{
    "docs": [
        {
            "location": "/",
            "text": "Problem Solving with Python\n\n\nIf you like this book, please consider purchasing a hard copy version on \namazon.com\n.\n\n\nOverview\n\n\n\n\nYou will find the book chapters on the left hand menu\n\n\nYou will find navigation within a section of a chapter (one webpage) on the righthand menu\n\n\nFull documentation on how to build this site locally are on GitHub at github.com/professorkazarinoff/Problem-Solving-with-Python/website\n\n\n\n\nCopywrite\n\n\nCopyright \u00a9 2018 - 2019 Peter D. Kazarinoff",
            "title": "Home"
        },
        {
            "location": "/#problem-solving-with-python",
            "text": "If you like this book, please consider purchasing a hard copy version on  amazon.com .",
            "title": "Problem Solving with Python"
        },
        {
            "location": "/#overview",
            "text": "You will find the book chapters on the left hand menu  You will find navigation within a section of a chapter (one webpage) on the righthand menu  Full documentation on how to build this site locally are on GitHub at github.com/professorkazarinoff/Problem-Solving-with-Python/website",
            "title": "Overview"
        },
        {
            "location": "/#copywrite",
            "text": "Copyright \u00a9 2018 - 2019 Peter D. Kazarinoff",
            "title": "Copywrite"
        },
        {
            "location": "/00-Preface/00.00-Motivation/",
            "text": "Preface\n\n\nMotivation\n\n\nThe motivation for writing this book is that many undergraduate engineering students have to take a programming course based on MATLAB. MATLAB is a great piece of software, but it currently costs $49.00 for a student license and requires a site license to be used on school computers. Subsequently, it is costly for a student to use MATLAB and it is costly for a college to support a course that uses MATLAB. In addition, this site license expires eventually and students need to purchase another copy often before they finish their degree.\n\n\nThe Python programming language, on the other hand, is open source and free. To download and use Python, the cost to both the student and the college is zero (minus time spent). By moving an undergraduate engineering programming class to Python, students will save money and have greater access to the software they use in class. Further in their engineering education, students can continue to use Python for free.",
            "title": "Motivation"
        },
        {
            "location": "/00-Preface/00.00-Motivation/#preface",
            "text": "",
            "title": "Preface"
        },
        {
            "location": "/00-Preface/00.00-Motivation/#motivation",
            "text": "The motivation for writing this book is that many undergraduate engineering students have to take a programming course based on MATLAB. MATLAB is a great piece of software, but it currently costs $49.00 for a student license and requires a site license to be used on school computers. Subsequently, it is costly for a student to use MATLAB and it is costly for a college to support a course that uses MATLAB. In addition, this site license expires eventually and students need to purchase another copy often before they finish their degree.  The Python programming language, on the other hand, is open source and free. To download and use Python, the cost to both the student and the college is zero (minus time spent). By moving an undergraduate engineering programming class to Python, students will save money and have greater access to the software they use in class. Further in their engineering education, students can continue to use Python for free.",
            "title": "Motivation"
        },
        {
            "location": "/00-Preface/00.02-Acknowledgments/",
            "text": "Acknowledgments\n\n\nThe creation of this book and supporting material would not be possible without the gracious support of my wife and family. Students at Portland Community College continue to give me hope that the next generation of engineers will be a diverse group of team problem solvers.\n\n\nThe Python Data Science Handbook\n and \nMachine Learning in Python\n as well as \nReiman Equations in Python\n served as inspiration and examples of using Jupyter notebooks to construct a book. The \nbookbook\n repository on GitHub provided a starting point for the tooling used to convert this book from Jupyter notebooks into a website and into LaTeX for printing.",
            "title": "Acknowledgments"
        },
        {
            "location": "/00-Preface/00.02-Acknowledgments/#acknowledgments",
            "text": "The creation of this book and supporting material would not be possible without the gracious support of my wife and family. Students at Portland Community College continue to give me hope that the next generation of engineers will be a diverse group of team problem solvers.  The Python Data Science Handbook  and  Machine Learning in Python  as well as  Reiman Equations in Python  served as inspiration and examples of using Jupyter notebooks to construct a book. The  bookbook  repository on GitHub provided a starting point for the tooling used to convert this book from Jupyter notebooks into a website and into LaTeX for printing.",
            "title": "Acknowledgments"
        },
        {
            "location": "/00-Preface/00.03-Supporting-Materials/",
            "text": "Supporting Materials\n\n\nSupporting materials for this text can be found on the textbook website:\n\n\n\n\nhttps://problemsolvingwithpython.com\n\n\n\n\nThe textbook website contains all of the text in web format. Code examples and Jupyter notebooks for the text can be found in the GitHub repository for the book:\n\n\n\n\nhttps:github.com/ProfessorKazarinoff/Problem-Solving-with-Python\n\n\n\n\nLive notebooks, where code examples found in the text can be run without installing any software, are available at:\n\n\n\n\nhttps://mybinder.org/v2/gh/ProfessorKazarinoff/Problem-Solving-with-Python/master\n\n\n\n\nIf you are an instructor and using this book in a course with students- please send me an email using your school email address. In the email, include the course you are teaching and the term, approximate enrollment, and a link to the course listing on your school website. \n\n\n\n\npeter.kazarinoff@problemsolvingwithpython.com\n\n\n\n\nI am happy to reply with a solution key for the end of chapter review problems as well as quiz and exam question banks.",
            "title": "Supporting Materials"
        },
        {
            "location": "/00-Preface/00.03-Supporting-Materials/#supporting-materials",
            "text": "Supporting materials for this text can be found on the textbook website:   https://problemsolvingwithpython.com   The textbook website contains all of the text in web format. Code examples and Jupyter notebooks for the text can be found in the GitHub repository for the book:   https:github.com/ProfessorKazarinoff/Problem-Solving-with-Python   Live notebooks, where code examples found in the text can be run without installing any software, are available at:   https://mybinder.org/v2/gh/ProfessorKazarinoff/Problem-Solving-with-Python/master   If you are an instructor and using this book in a course with students- please send me an email using your school email address. In the email, include the course you are teaching and the term, approximate enrollment, and a link to the course listing on your school website.    peter.kazarinoff@problemsolvingwithpython.com   I am happy to reply with a solution key for the end of chapter review problems as well as quiz and exam question banks.",
            "title": "Supporting Materials"
        },
        {
            "location": "/00-Preface/00.04-Formatting-Conventions/",
            "text": "Formatting Conventions\n\n\nThis book and supporting materials use the following formatting conventions:\n\n\nWeb Address\n\n\nWeb address will be shown as:\n\n\n\n\nhttps://github.com/professorkazarinoff/Problem-Solving-with-Python\n\n\n\n\nImportant terms and vocabulary\n\n\nImportant terms and vocabulary are shown in \nitalic text\n\n\n\n\n\n\nThere is a difference between \nlocal variables\n and \nglobal variables\n in Python code.\n\n\n\n\nFile Names\n\n\nFile Names are  shown in \nbold and italic text\n\n\n\n\n\n\nAfter completing the code, save the file as \nhello.py\n in the current directory.\n\n\n\n\nModule and Package Names\n\n\nModule and Package names will be shown in \nbold text\n\n\n\n\n\n\nNumPy\n and \nMatplotlib\n are two useful packages for problem solvers.\n\n\n\n\nInline code\n\n\nInline code, including variable names, is shown in \nmonospace font\n\n\n\n\n\n\nTo compare a variable use \nvar == 'string'\n and make sure to include \n==\n, the double equals sign.\n\n\n\n\nSeparate code blocks\n\n\nSeparate code blocks appear in their own sections in \nmonospaced font\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\n\n\nAnaconda Prompt Commands\n\n\nCommands typed into the \nAnaconda Prompt\n are shown in separate sections which contain the prompt symbol \n>\n before each line. Note the prompt \n>\n should not be typed. The prompt symbol is included to indicate \nAnaconda Prompt\n, not a character for the user to enter.\n\n\n> conda create -n env python=3.7\n> conda activate env\n\n\n\n\nTerminal Commands\n\n\nCommands typed into the MacOS or Linux terminal appear in separate sections which contain the dollar symbol \n$\n  before each line. Note the dollar symbol \n$\n should not be typed. The dollar symbol is included to indicate a terminal prompt, not a character for the user to enter.\n\n\n$ pip install pint\n$ cd pint_srcipts\n\n\n\n\nPython REPL Commands\n\n\nCommands typed into the \nPython REPL\n (the Python Interpreter) appears in separate code sections, which contain the triple arrow prompt \n>>>\n . Note the triple arrow \n>>>\n prompt should not be typed. Triple arrows are included to indicate the Python REPL prompt, not a character for the user to enter. The output from the Python REPL is shown on a separate line below the command, without the \n>>>\n prompt.\n\n\n>>> 2 + 2\n4\n>>> print('Problem Solving with Python')\nProblem Solving with Python\n\n\n\n\nJupyter Notebook cells\n\n\nCommands typed into Jupyter notebook cells appear with the label \nIn [#]:\n to the left of the code section. The output from Jupyter notebook cells is shown below the input cell. Only code in the input cells needs to be typed. Output cell are be produced automatically by clicking the run button or typing \n[shift]+[Enter]\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nA\n \n=\n \n2\n\n\nB\n \n=\n \n3\n\n\nC\n \n=\n \nA\n \n+\n \nB\n\n\nprint\n(\nC\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeystrokes and Buttons\n\n\nKeystrokes directly entered by the keyboard or buttons that are indicated on programs or web pages are shown inside square brackets in \n[monospaced font]\n.\n\n\n\n\n\n\nIn order to delete a line use the \n[Backspace]\n key. To exit the shell type \n[shift]+[c]",
            "title": "Formatting Conventions"
        },
        {
            "location": "/00-Preface/00.04-Formatting-Conventions/#formatting-conventions",
            "text": "This book and supporting materials use the following formatting conventions:",
            "title": "Formatting Conventions"
        },
        {
            "location": "/00-Preface/00.04-Formatting-Conventions/#web-address",
            "text": "Web address will be shown as:   https://github.com/professorkazarinoff/Problem-Solving-with-Python",
            "title": "Web Address"
        },
        {
            "location": "/00-Preface/00.04-Formatting-Conventions/#important-terms-and-vocabulary",
            "text": "Important terms and vocabulary are shown in  italic text    There is a difference between  local variables  and  global variables  in Python code.",
            "title": "Important terms and vocabulary"
        },
        {
            "location": "/00-Preface/00.04-Formatting-Conventions/#file-names",
            "text": "File Names are  shown in  bold and italic text    After completing the code, save the file as  hello.py  in the current directory.",
            "title": "File Names"
        },
        {
            "location": "/00-Preface/00.04-Formatting-Conventions/#module-and-package-names",
            "text": "Module and Package names will be shown in  bold text    NumPy  and  Matplotlib  are two useful packages for problem solvers.",
            "title": "Module and Package Names"
        },
        {
            "location": "/00-Preface/00.04-Formatting-Conventions/#inline-code",
            "text": "Inline code, including variable names, is shown in  monospace font    To compare a variable use  var == 'string'  and make sure to include  == , the double equals sign.",
            "title": "Inline code"
        },
        {
            "location": "/00-Preface/00.04-Formatting-Conventions/#separate-code-blocks",
            "text": "Separate code blocks appear in their own sections in  monospaced font  import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt",
            "title": "Separate code blocks"
        },
        {
            "location": "/00-Preface/00.04-Formatting-Conventions/#anaconda-prompt-commands",
            "text": "Commands typed into the  Anaconda Prompt  are shown in separate sections which contain the prompt symbol  >  before each line. Note the prompt  >  should not be typed. The prompt symbol is included to indicate  Anaconda Prompt , not a character for the user to enter.  > conda create -n env python=3.7\n> conda activate env",
            "title": "Anaconda Prompt Commands"
        },
        {
            "location": "/00-Preface/00.04-Formatting-Conventions/#terminal-commands",
            "text": "Commands typed into the MacOS or Linux terminal appear in separate sections which contain the dollar symbol  $   before each line. Note the dollar symbol  $  should not be typed. The dollar symbol is included to indicate a terminal prompt, not a character for the user to enter.  $ pip install pint\n$ cd pint_srcipts",
            "title": "Terminal Commands"
        },
        {
            "location": "/00-Preface/00.04-Formatting-Conventions/#python-repl-commands",
            "text": "Commands typed into the  Python REPL  (the Python Interpreter) appears in separate code sections, which contain the triple arrow prompt  >>>  . Note the triple arrow  >>>  prompt should not be typed. Triple arrows are included to indicate the Python REPL prompt, not a character for the user to enter. The output from the Python REPL is shown on a separate line below the command, without the  >>>  prompt.  >>> 2 + 2\n4\n>>> print('Problem Solving with Python')\nProblem Solving with Python",
            "title": "Python REPL Commands"
        },
        {
            "location": "/00-Preface/00.04-Formatting-Conventions/#jupyter-notebook-cells",
            "text": "Commands typed into Jupyter notebook cells appear with the label  In [#]:  to the left of the code section. The output from Jupyter notebook cells is shown below the input cell. Only code in the input cells needs to be typed. Output cell are be produced automatically by clicking the run button or typing  [shift]+[Enter]    In\u00a0[1]:  \n      A   =   2  B   =   3  C   =   A   +   B  print ( C )           5",
            "title": "Jupyter Notebook cells"
        },
        {
            "location": "/00-Preface/00.04-Formatting-Conventions/#keystrokes-and-buttons",
            "text": "Keystrokes directly entered by the keyboard or buttons that are indicated on programs or web pages are shown inside square brackets in  [monospaced font] .    In order to delete a line use the  [Backspace]  key. To exit the shell type  [shift]+[c]",
            "title": "Keystrokes and Buttons"
        },
        {
            "location": "/00-Preface/00.05-Errata/",
            "text": "Errata\n\n\nErrata including any typos, code errors and formatting inconsistencies can be submitted to:\n\n\n\n\nerrata@problemsolvingwithpython.com\n\n\n\n\nPlease include the chapter number and section number in your email. Thank-you in advance for helping improve this text for future readers.",
            "title": "Errata"
        },
        {
            "location": "/00-Preface/00.05-Errata/#errata",
            "text": "Errata including any typos, code errors and formatting inconsistencies can be submitted to:   errata@problemsolvingwithpython.com   Please include the chapter number and section number in your email. Thank-you in advance for helping improve this text for future readers.",
            "title": "Errata"
        },
        {
            "location": "/01-Orientation/01.00-Welcome/",
            "text": "Orientation\n\n\nIntroduction\n\n\nWelcome to the world of problem solving with Python! This first Orientation chapter will help you get started by guiding you through the process of installing Python on your computer.\nBy the end of this chapter, you will be able to:\n\n\n\n\n\n\nDescribe why Python is a useful computer language for problem solvers\n\n\n\n\n\n\nDescribe applications where Python is used\n\n\n\n\n\n\nDetail advantages of Python over other programming languages\n\n\n\n\n\n\nKnow the cost of Python\n\n\n\n\n\n\nKnow the difference between Python and Anaconda\n\n\n\n\n\n\nInstall Python on your computer\n\n\n\n\n\n\nInstall Anaconda on your computer",
            "title": "Introduction"
        },
        {
            "location": "/01-Orientation/01.00-Welcome/#orientation",
            "text": "",
            "title": "Orientation"
        },
        {
            "location": "/01-Orientation/01.00-Welcome/#introduction",
            "text": "Welcome to the world of problem solving with Python! This first Orientation chapter will help you get started by guiding you through the process of installing Python on your computer.\nBy the end of this chapter, you will be able to:    Describe why Python is a useful computer language for problem solvers    Describe applications where Python is used    Detail advantages of Python over other programming languages    Know the cost of Python    Know the difference between Python and Anaconda    Install Python on your computer    Install Anaconda on your computer",
            "title": "Introduction"
        },
        {
            "location": "/01-Orientation/01.01-Why-Python/",
            "text": "Why Python?\n\n\nYou might be wondering \"Why should I solve problems with Python?\" There are other programming languages in the world such as MATLAB, LabView, C++ and Java. What makes Python useful for solving problems?\n\n\nPython is a powerful programming language\n\n\nPython defines the types of objects you build into your code. Unlike some other languages such as C, you do not need to declare the object type. The object type is also mutable, you can change the type of object easily and on the fly. There is a wide array of object types built into Python. Objects can change in size. Python objects can also contain mixed data types. Strings and floating point numbers can be part of the same list.\n\n\nPython has an extensive Standard Library. A huge number of object types, functions and methods are available for use without importing any external modules. These include math functions, list methods, and calls to a computer's system. There is a lot that can be done with the Python Standard Library. The first couple of chapters of this book will just use the standard library. It can do a lot.\n\n\nPython has over 100,000 external packages available for download and use. They are easy to install off of the Python Package Index, commonly called PyPI (\"pie pee eye\"). There is a Python package for just about everything. There are packages which can help you: interact with the web, make complex computations, calculate unit conversions, plot data, work with .csv, .xls, and .pdf files, manipulate images and video, read data from sensors and test equipment, train machine learning algorithms, design web apps, work with GIS data, work with astronautical data. There are and many more Python packages added to PyPI every day. In this book, we will use some of the more useful Python packages for problem solvers such as NumPy, Matplotlib, and SymPy.\n\n\nPython is easy to learn and use\n\n\nOne way Problem solvers code solutions faster in Python faster than coding solutions in other programming languages is that Python is easy to learn and use. Python programs tend to be shorter and quicker to write than a program which completes a similar function in another languages. In the rapid design, prototype, test, iterate cycle programming solutions in Python can be written and tested quickly. Python is also an easy language for fellow problem solvers on your team to learn. Python's language syntax is also quite human readable. While programmers can become preoccupied with a program's runtime, it is development time that takes the longest.\n\n\nPython is transportable\n\n\nPython can be installed and run on each of the three major operating systems: Windows, Mac and Linux. On Mac and Linux Python comes installed out of the box. Just open up a terminal in on a MacOS or Linux machine and type \npython\n. That's it, you are now using Python. On Windows, I recommend downloading and installing the Anaconda distribution of Python. The Anaconda distribution of Python is free and can be installed on all three major operating systems.\n\n\nPython is free\n\n\nSome computer languages used for problem solving such as MATLAB and LabView cost money to download and install. Python is free to download and use. Python is also open source and individuals are free to modify, contribute to, and propose improvements to Python. All of the packages available on the Python Package Index are free to download and install. Many more packages, scripts and utilities can be found in open source code repositories on GitHub and BitBucket. \n\n\nPython is growing\n\n\nPython is growing in popularity. Python is particularly growing in the data sciences and in use with GIS systems, physical modeling, machine learning and computer vision. These are growing team problem-solving areas for engineers.",
            "title": "Why Python?"
        },
        {
            "location": "/01-Orientation/01.01-Why-Python/#why-python",
            "text": "You might be wondering \"Why should I solve problems with Python?\" There are other programming languages in the world such as MATLAB, LabView, C++ and Java. What makes Python useful for solving problems?",
            "title": "Why Python?"
        },
        {
            "location": "/01-Orientation/01.01-Why-Python/#python-is-a-powerful-programming-language",
            "text": "Python defines the types of objects you build into your code. Unlike some other languages such as C, you do not need to declare the object type. The object type is also mutable, you can change the type of object easily and on the fly. There is a wide array of object types built into Python. Objects can change in size. Python objects can also contain mixed data types. Strings and floating point numbers can be part of the same list.  Python has an extensive Standard Library. A huge number of object types, functions and methods are available for use without importing any external modules. These include math functions, list methods, and calls to a computer's system. There is a lot that can be done with the Python Standard Library. The first couple of chapters of this book will just use the standard library. It can do a lot.  Python has over 100,000 external packages available for download and use. They are easy to install off of the Python Package Index, commonly called PyPI (\"pie pee eye\"). There is a Python package for just about everything. There are packages which can help you: interact with the web, make complex computations, calculate unit conversions, plot data, work with .csv, .xls, and .pdf files, manipulate images and video, read data from sensors and test equipment, train machine learning algorithms, design web apps, work with GIS data, work with astronautical data. There are and many more Python packages added to PyPI every day. In this book, we will use some of the more useful Python packages for problem solvers such as NumPy, Matplotlib, and SymPy.",
            "title": "Python is a powerful programming language"
        },
        {
            "location": "/01-Orientation/01.01-Why-Python/#python-is-easy-to-learn-and-use",
            "text": "One way Problem solvers code solutions faster in Python faster than coding solutions in other programming languages is that Python is easy to learn and use. Python programs tend to be shorter and quicker to write than a program which completes a similar function in another languages. In the rapid design, prototype, test, iterate cycle programming solutions in Python can be written and tested quickly. Python is also an easy language for fellow problem solvers on your team to learn. Python's language syntax is also quite human readable. While programmers can become preoccupied with a program's runtime, it is development time that takes the longest.",
            "title": "Python is easy to learn and use"
        },
        {
            "location": "/01-Orientation/01.01-Why-Python/#python-is-transportable",
            "text": "Python can be installed and run on each of the three major operating systems: Windows, Mac and Linux. On Mac and Linux Python comes installed out of the box. Just open up a terminal in on a MacOS or Linux machine and type  python . That's it, you are now using Python. On Windows, I recommend downloading and installing the Anaconda distribution of Python. The Anaconda distribution of Python is free and can be installed on all three major operating systems.",
            "title": "Python is transportable"
        },
        {
            "location": "/01-Orientation/01.01-Why-Python/#python-is-free",
            "text": "Some computer languages used for problem solving such as MATLAB and LabView cost money to download and install. Python is free to download and use. Python is also open source and individuals are free to modify, contribute to, and propose improvements to Python. All of the packages available on the Python Package Index are free to download and install. Many more packages, scripts and utilities can be found in open source code repositories on GitHub and BitBucket.",
            "title": "Python is free"
        },
        {
            "location": "/01-Orientation/01.01-Why-Python/#python-is-growing",
            "text": "Python is growing in popularity. Python is particularly growing in the data sciences and in use with GIS systems, physical modeling, machine learning and computer vision. These are growing team problem-solving areas for engineers.",
            "title": "Python is growing"
        },
        {
            "location": "/01-Orientation/01.02-The-Anaconda-Distribution-of-Python/",
            "text": "The Anaconda Distribution of Python\n\n\nI recommend problem solvers install the \nAnaconda distribution of Python\n. The following section details the differences between the Anaconda distribution of Python and the version of Python you can download from \nPython.org\n\n\nHow is Anaconda different from Python?\n\n\nWhen you download Python from Python.org, you get the \nPython Interpreter\n, a little text editing program called \nIDLE\n and all of the Python Standard Library modules. \n\n\nThe Python Interpreter is an application or program that runs your Python code. A program written in the Python programming language is run with the Python Interpreter. So Python corresponds to both the language that a program is written in as well as the application that runs the program.\n\n\nWhen you download the Anaconda distribution of Python from Anaconda.com, you get a Python Interpreter, the \nAnaconda Prompt\n (a command line program), \nSpyder\n (a code editor) and about 600 extra Python modules that aren't included in the Python Standard Library. The Anaconda distribution of Python also includes a program called Anaconda Navigator that allows you to launch Jupyter notebooks quickly.\n\n\nWhy download Anaconda, if I want to use is Python?\n\n\nRegardless if you download Python from Python.org or if you download Anaconda (with all the extra stuff it comes with) from Anaconda.com, you will be able to write and execute Python code. However, there are a couple of advantages to using the Anaconda distribution of Python.\n\n\nAnaconda includes Python plus about 600 additional Python packages\n\n\nThe Anaconda distribution of Python is advantageous because it includes Python as well as about 600 additional Python packages. These additional packages are all free to install. The packages that come with Anaconda includes many of the most common Python packages use to solve problems. If you download Anaconda, you get Python including the Python Standard Library plus about 600 extra packages. If you download Python from Python.org, you just get Python and The Standard Library but no additional modules. You could install the extra modules that come with Anaconda (that don't come with plain old Python), but why not save a step (or about 600 steps) and just install Anaconda instead of installing about 600 different modules?\n\n\nAnaconda installs without administrator privileges\n\n\nEven if you don't have the ability to install programs on a computer, like a computer in a school computer lab, you can still download and use Anaconda. The Anaconda distribution of Python will also allow you to install additional modules from the Python package index (\nPyPI.org\n) and conda-forge (\nconda-forge.org\n), the conda package index.\n\n\nAnaconda works on MacOS\n\n\nIf you use MacOS, you probably already have Python installed on your computer. Most MacOS installations come with Python included. The problem is that the version of Python that comes with MacOS is old (usually legacy Python, Python 2) and the version of Python that comes with MacOS is locked up behind a set of administrator privileges. Because the pre-installed version of Python included with MacOS can require administrator privileges, you can have trouble with installation and run-time problems. Some things will seem to work fine, and then other things won't run at all, or you will keep getting asked for an administrator password over and over. \n\n\nDownloading and installing Anaconda (separate from the version of Python that came with MacOS) prevents most of the problems on MacOS caused by using the pre-installed version of Python.\n\n\nAnaconda makes package management and virtual environments easier\n\n\nAnother advantage of Anaconda is that package management and virtual environments are a lot easier when you have Anaconda. Virtual environments and package handling might not seem to make a huge difference right now. If you just downloaded Anaconda for the first time, you are probably not dealing with package management and virtual environments yet. (It's OK if you don't even know what those two things are yet). After you write a couple of Python programs and start downloading a couple of extra modules from PyPI or conda-forge, dealing with package management and virtual environments becomes more critical.",
            "title": "The Anaconda Distribution of Python"
        },
        {
            "location": "/01-Orientation/01.02-The-Anaconda-Distribution-of-Python/#the-anaconda-distribution-of-python",
            "text": "I recommend problem solvers install the  Anaconda distribution of Python . The following section details the differences between the Anaconda distribution of Python and the version of Python you can download from  Python.org",
            "title": "The Anaconda Distribution of Python"
        },
        {
            "location": "/01-Orientation/01.02-The-Anaconda-Distribution-of-Python/#how-is-anaconda-different-from-python",
            "text": "When you download Python from Python.org, you get the  Python Interpreter , a little text editing program called  IDLE  and all of the Python Standard Library modules.   The Python Interpreter is an application or program that runs your Python code. A program written in the Python programming language is run with the Python Interpreter. So Python corresponds to both the language that a program is written in as well as the application that runs the program.  When you download the Anaconda distribution of Python from Anaconda.com, you get a Python Interpreter, the  Anaconda Prompt  (a command line program),  Spyder  (a code editor) and about 600 extra Python modules that aren't included in the Python Standard Library. The Anaconda distribution of Python also includes a program called Anaconda Navigator that allows you to launch Jupyter notebooks quickly.",
            "title": "How is Anaconda different from Python?"
        },
        {
            "location": "/01-Orientation/01.02-The-Anaconda-Distribution-of-Python/#why-download-anaconda-if-i-want-to-use-is-python",
            "text": "Regardless if you download Python from Python.org or if you download Anaconda (with all the extra stuff it comes with) from Anaconda.com, you will be able to write and execute Python code. However, there are a couple of advantages to using the Anaconda distribution of Python.",
            "title": "Why download Anaconda, if I want to use is Python?"
        },
        {
            "location": "/01-Orientation/01.02-The-Anaconda-Distribution-of-Python/#anaconda-includes-python-plus-about-600-additional-python-packages",
            "text": "The Anaconda distribution of Python is advantageous because it includes Python as well as about 600 additional Python packages. These additional packages are all free to install. The packages that come with Anaconda includes many of the most common Python packages use to solve problems. If you download Anaconda, you get Python including the Python Standard Library plus about 600 extra packages. If you download Python from Python.org, you just get Python and The Standard Library but no additional modules. You could install the extra modules that come with Anaconda (that don't come with plain old Python), but why not save a step (or about 600 steps) and just install Anaconda instead of installing about 600 different modules?",
            "title": "Anaconda includes Python plus about 600 additional Python packages"
        },
        {
            "location": "/01-Orientation/01.02-The-Anaconda-Distribution-of-Python/#anaconda-installs-without-administrator-privileges",
            "text": "Even if you don't have the ability to install programs on a computer, like a computer in a school computer lab, you can still download and use Anaconda. The Anaconda distribution of Python will also allow you to install additional modules from the Python package index ( PyPI.org ) and conda-forge ( conda-forge.org ), the conda package index.",
            "title": "Anaconda installs without administrator privileges"
        },
        {
            "location": "/01-Orientation/01.02-The-Anaconda-Distribution-of-Python/#anaconda-works-on-macos",
            "text": "If you use MacOS, you probably already have Python installed on your computer. Most MacOS installations come with Python included. The problem is that the version of Python that comes with MacOS is old (usually legacy Python, Python 2) and the version of Python that comes with MacOS is locked up behind a set of administrator privileges. Because the pre-installed version of Python included with MacOS can require administrator privileges, you can have trouble with installation and run-time problems. Some things will seem to work fine, and then other things won't run at all, or you will keep getting asked for an administrator password over and over.   Downloading and installing Anaconda (separate from the version of Python that came with MacOS) prevents most of the problems on MacOS caused by using the pre-installed version of Python.",
            "title": "Anaconda works on MacOS"
        },
        {
            "location": "/01-Orientation/01.02-The-Anaconda-Distribution-of-Python/#anaconda-makes-package-management-and-virtual-environments-easier",
            "text": "Another advantage of Anaconda is that package management and virtual environments are a lot easier when you have Anaconda. Virtual environments and package handling might not seem to make a huge difference right now. If you just downloaded Anaconda for the first time, you are probably not dealing with package management and virtual environments yet. (It's OK if you don't even know what those two things are yet). After you write a couple of Python programs and start downloading a couple of extra modules from PyPI or conda-forge, dealing with package management and virtual environments becomes more critical.",
            "title": "Anaconda makes package management and virtual environments easier"
        },
        {
            "location": "/01-Orientation/01.03-Installing-Anaconda-on-Windows/",
            "text": "Installing Anaconda on Windows\n\n\nFor problem solvers, I recommend installing and using the Anaconda distribution of Python.\nThis section details the installation of the Anaconda distribution of Python on Windows 10. I think the Anaconda distribution of Python is the best option for problem solvers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs. Anaconda comes bundled with about 600 packages pre-installed including \nNumPy\n, \nMatplotlib\n and \nSymPy\n. These three packages are very useful for problem solvers and will be discussed in subsequent chapters.\n\n\nFollow the steps below to install the Anaconda distribution of Python on Windows.\n\n\nSteps:\n\n\n\n\n\n\nVisit \nAnaconda.com/downloads\n\n\n\n\n\n\nSelect Windows\n\n\n\n\n\n\nDownload the \n.exe\n installer\n\n\n\n\n\n\nOpen and run the \n.exe\n installer\n\n\n\n\n\n\nOpen the \nAnaconda Prompt\n and run some Python code\n\n\n\n\n\n\n1. Visit the Anaconda downloads page\n\n\nGo to the following link: \nAnaconda.com/downloads\n\n\nThe Anaconda Downloads Page will look something like this:\n\n\n\n\n2. Select Windows\n\n\nSelect Windows where the three operating systems are listed.\n\n\n\n\n3. Download\n\n\nDownload the most recent Python 3 release. At the time of writing, the most recent release was the Python 3.6 Version. Python 2.7 is legacy Python. For problem solvers, select the Python 3.6 version. If you are unsure if your computer is running a 64-bit or 32-bit version of Windows, select 64-bit as 64-bit Windows is most common.\n\n\n\n\nYou may be prompted to enter your email. You can still download Anaconda if you click \n[No Thanks]\n and don't enter your Work Email address.\n\n\n\n\nThe download is quite large (over 500 MB) so it may take a while to for Anaconda to download.\n\n\n\n\n4. Open and run the installer\n\n\nOnce the download completes, open and run the \n.exe\n installer\n\n\n\n\nAt the beginning of the install, you need to click \nNext\n to confirm the installation.\n\n\n\n\nThen agree to the license.\n\n\n\n\nAt the Advanced Installation Options screen, I recommend that you \ndo not check\n \"Add Anaconda to my PATH environment variable\"\n\n\n\n\n5. Open the Anaconda Prompt from the Windows start menu\n\n\nAfter the installation of Anaconda is complete, you can go to the Windows start menu and select the Anaconda Prompt.\n\n\n\n\nThis opens the \nAnaconda Prompt\n. \nAnaconda\n is the Python distribution and the \nAnaconda Prompt\n is a command line shell (a program where you type in commands instead of using a mouse). The black screen and text that makes up the \nAnaconda Prompt\n doesn't look like much, but it is really helpful for problem solvers using Python.\n\n\nAt the Anaconda prompt, type \npython\n and hit \n[Enter]\n. The \npython\n command starts the Python interpreter, also called the Python REPL (for Read Evaluate Print Loop).\n\n\n> python\n\n\n\n\n\n\nNote the Python version. You should see something like \nPython 3.6.1\n.  With the interpreter running, you will see a set of greater-than symbols \n>>>\n before the cursor. \n\n\n\n\nNow you can type Python commands. Try typing \nimport this\n. You should see the \nZen of Python\n by Tim Peters\n\n\n\n\nTo close the Python interpreter, type \nexit()\n at the prompt \n>>>\n.  Note the double parenthesis at the end of the \nexit()\n command. The \n()\n is needed to stop the Python interpreter and get back out to the \nAnaconda Prompt\n.\n\n\nTo close the \nAnaconda Prompt\n, you can either close the window with the mouse, or type \nexit\n, no parenthesis necessary.\n\n\nWhen you want to use the Python interpreter again, just click the Windows Start button and select the \nAnaconda Prompt\n and type \npython\n.",
            "title": "Installing Anaconda on Windows"
        },
        {
            "location": "/01-Orientation/01.03-Installing-Anaconda-on-Windows/#installing-anaconda-on-windows",
            "text": "For problem solvers, I recommend installing and using the Anaconda distribution of Python.\nThis section details the installation of the Anaconda distribution of Python on Windows 10. I think the Anaconda distribution of Python is the best option for problem solvers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs. Anaconda comes bundled with about 600 packages pre-installed including  NumPy ,  Matplotlib  and  SymPy . These three packages are very useful for problem solvers and will be discussed in subsequent chapters.  Follow the steps below to install the Anaconda distribution of Python on Windows.",
            "title": "Installing Anaconda on Windows"
        },
        {
            "location": "/01-Orientation/01.03-Installing-Anaconda-on-Windows/#steps",
            "text": "Visit  Anaconda.com/downloads    Select Windows    Download the  .exe  installer    Open and run the  .exe  installer    Open the  Anaconda Prompt  and run some Python code",
            "title": "Steps:"
        },
        {
            "location": "/01-Orientation/01.03-Installing-Anaconda-on-Windows/#1-visit-the-anaconda-downloads-page",
            "text": "Go to the following link:  Anaconda.com/downloads  The Anaconda Downloads Page will look something like this:",
            "title": "1. Visit the Anaconda downloads page"
        },
        {
            "location": "/01-Orientation/01.03-Installing-Anaconda-on-Windows/#2-select-windows",
            "text": "Select Windows where the three operating systems are listed.",
            "title": "2. Select Windows"
        },
        {
            "location": "/01-Orientation/01.03-Installing-Anaconda-on-Windows/#3-download",
            "text": "Download the most recent Python 3 release. At the time of writing, the most recent release was the Python 3.6 Version. Python 2.7 is legacy Python. For problem solvers, select the Python 3.6 version. If you are unsure if your computer is running a 64-bit or 32-bit version of Windows, select 64-bit as 64-bit Windows is most common.   You may be prompted to enter your email. You can still download Anaconda if you click  [No Thanks]  and don't enter your Work Email address.   The download is quite large (over 500 MB) so it may take a while to for Anaconda to download.",
            "title": "3. Download"
        },
        {
            "location": "/01-Orientation/01.03-Installing-Anaconda-on-Windows/#4-open-and-run-the-installer",
            "text": "Once the download completes, open and run the  .exe  installer   At the beginning of the install, you need to click  Next  to confirm the installation.   Then agree to the license.   At the Advanced Installation Options screen, I recommend that you  do not check  \"Add Anaconda to my PATH environment variable\"",
            "title": "4. Open and run the installer"
        },
        {
            "location": "/01-Orientation/01.03-Installing-Anaconda-on-Windows/#5-open-the-anaconda-prompt-from-the-windows-start-menu",
            "text": "After the installation of Anaconda is complete, you can go to the Windows start menu and select the Anaconda Prompt.   This opens the  Anaconda Prompt .  Anaconda  is the Python distribution and the  Anaconda Prompt  is a command line shell (a program where you type in commands instead of using a mouse). The black screen and text that makes up the  Anaconda Prompt  doesn't look like much, but it is really helpful for problem solvers using Python.  At the Anaconda prompt, type  python  and hit  [Enter] . The  python  command starts the Python interpreter, also called the Python REPL (for Read Evaluate Print Loop).  > python   Note the Python version. You should see something like  Python 3.6.1 .  With the interpreter running, you will see a set of greater-than symbols  >>>  before the cursor.    Now you can type Python commands. Try typing  import this . You should see the  Zen of Python  by Tim Peters   To close the Python interpreter, type  exit()  at the prompt  >>> .  Note the double parenthesis at the end of the  exit()  command. The  ()  is needed to stop the Python interpreter and get back out to the  Anaconda Prompt .  To close the  Anaconda Prompt , you can either close the window with the mouse, or type  exit , no parenthesis necessary.  When you want to use the Python interpreter again, just click the Windows Start button and select the  Anaconda Prompt  and type  python .",
            "title": "5. Open the Anaconda Prompt from the Windows start menu"
        },
        {
            "location": "/01-Orientation/01.04-Installing-Anaconda-on-MacOS/",
            "text": "Installing Anaconda on MacOS\n\n\nThis section details the installation of the Anaconda Distribution of Python on MacOS. Most versions of MacOS come pre-installed with legacy Python (Version 2.7). You can confirm the legacy version of Python is installed on MacOS by opening and running a command at the MacOS \nterminal\n. To open the MacOS terminal use \n[command]+[Space Bar]\n and type \nterminal\n in the Spotlight Search bar.\n\n\nIn the MacOS Terminal type (note: the dollar sign \n$\n is used to indicate the terminal prompt. The dollar sign \n$\n does not need to be typed):\n\n\n$ python\n\n\n\n\nYou will most likely see Python version 2.7 is installed. An issue for MacOS users is that the installed system version of Python has a set of permissions that may always allow Python to run and may not allow users to install external packages.  Therefore, I recommend the Anaconda distribution of Python is installed alongside the system version of Python that comes pre-installed with MacOS. You will be able to run Python code using the Anaconda distribution of Python, and you will be able to install external packages using the Anaconda distribution of Python.\n\n\nFollow the steps below to install the Anaconda distribution of Python on MacOS.\n\n\nSteps:\n\n\n\n\n\n\nVisit \nAnaconda.com/downloads\n\n\n\n\n\n\nSelect MacOS and Download the \n.pkg\n installer\n\n\n\n\n\n\nOpen the \n.pkg\n installer\n\n\n\n\n\n\nFollow the installation instructions\n\n\n\n\n\n\nSource your \n.bash-rc\n file\n\n\n\n\n\n\nOpen a terminal and type \npython\n and run some code.\n\n\n\n\n\n\n1. Visit the Anaconda downloads page\n\n\nGo to the following link: \nAnaconda.com/downloads\n\n\n2. Select MacOS and download the .pkg installer\n\n\nIn the operating systems box, select \n[MacOS]\n. Then download the most recent Python 3 distribution (at the time of this writing the most recent version is Python 3.6) graphical installer by clicking the Download link. Python 2.7 is legacy Python. For problem solvers, select the most recent Python 3 version.\n\n\n\n\nYou may be prompted to enter your email. You can still download Anaconda if you click \n[No Thanks]\n or \n[x]\n and don't enter your Work Email address.\n\n\n\n\n3. Open the .pkg installer\n\n\nNavigate to the Downloads folder and double-click the \n.pkg\n installer file you just downloaded. It may be helpful to order the contents of the Downloads folder by date to find the \n.pkg\n file.\n\n\n4. Follow the installation instructions\n\n\nFollow the installation instructions. It is advised that you install \nAnaconda\n for the current user and that \nAnaconda\n \nis added to your PATH\n.\n\n\n5. Source your .bash-rc file\n\n\nOnce Anaconda is installed, you need to load the changes to your \nPATH\n environment variable in the current terminal session.\n\n\nOpen the MacOS Terminal and type:\n\n\n$ cd ~\n$ source .bashrc\n\n\n\n\n6. Open a terminal and type \npython\n and run some code.\n\n\nOpen the MacOS Terminal and type:\n\n\n$ python\n\n\n\n\nYou should see something like\n\n\nPython 3.6.3 | Anaconda Inc. |\n\n\n\n\nAt the Python REPL (the Python \n>>>\n prompt) try:\n\n\n>>> import this\n\n\n\n\nIf you see the Zen of Python, the installation was successful. Exit out of the Python REPL using the command \nexit()\n. Make sure to include the double parenthesis \n()\n after the \nexit\n command.\n\n\n>>> exit()",
            "title": "Installing Anaconda on MacOS"
        },
        {
            "location": "/01-Orientation/01.04-Installing-Anaconda-on-MacOS/#installing-anaconda-on-macos",
            "text": "This section details the installation of the Anaconda Distribution of Python on MacOS. Most versions of MacOS come pre-installed with legacy Python (Version 2.7). You can confirm the legacy version of Python is installed on MacOS by opening and running a command at the MacOS  terminal . To open the MacOS terminal use  [command]+[Space Bar]  and type  terminal  in the Spotlight Search bar.  In the MacOS Terminal type (note: the dollar sign  $  is used to indicate the terminal prompt. The dollar sign  $  does not need to be typed):  $ python  You will most likely see Python version 2.7 is installed. An issue for MacOS users is that the installed system version of Python has a set of permissions that may always allow Python to run and may not allow users to install external packages.  Therefore, I recommend the Anaconda distribution of Python is installed alongside the system version of Python that comes pre-installed with MacOS. You will be able to run Python code using the Anaconda distribution of Python, and you will be able to install external packages using the Anaconda distribution of Python.  Follow the steps below to install the Anaconda distribution of Python on MacOS.",
            "title": "Installing Anaconda on MacOS"
        },
        {
            "location": "/01-Orientation/01.04-Installing-Anaconda-on-MacOS/#steps",
            "text": "Visit  Anaconda.com/downloads    Select MacOS and Download the  .pkg  installer    Open the  .pkg  installer    Follow the installation instructions    Source your  .bash-rc  file    Open a terminal and type  python  and run some code.",
            "title": "Steps:"
        },
        {
            "location": "/01-Orientation/01.04-Installing-Anaconda-on-MacOS/#1-visit-the-anaconda-downloads-page",
            "text": "Go to the following link:  Anaconda.com/downloads",
            "title": "1. Visit the Anaconda downloads page"
        },
        {
            "location": "/01-Orientation/01.04-Installing-Anaconda-on-MacOS/#2-select-macos-and-download-the-pkg-installer",
            "text": "In the operating systems box, select  [MacOS] . Then download the most recent Python 3 distribution (at the time of this writing the most recent version is Python 3.6) graphical installer by clicking the Download link. Python 2.7 is legacy Python. For problem solvers, select the most recent Python 3 version.   You may be prompted to enter your email. You can still download Anaconda if you click  [No Thanks]  or  [x]  and don't enter your Work Email address.",
            "title": "2. Select MacOS and download the .pkg installer"
        },
        {
            "location": "/01-Orientation/01.04-Installing-Anaconda-on-MacOS/#3-open-the-pkg-installer",
            "text": "Navigate to the Downloads folder and double-click the  .pkg  installer file you just downloaded. It may be helpful to order the contents of the Downloads folder by date to find the  .pkg  file.",
            "title": "3. Open the .pkg installer"
        },
        {
            "location": "/01-Orientation/01.04-Installing-Anaconda-on-MacOS/#4-follow-the-installation-instructions",
            "text": "Follow the installation instructions. It is advised that you install  Anaconda  for the current user and that  Anaconda   is added to your PATH .",
            "title": "4. Follow the installation instructions"
        },
        {
            "location": "/01-Orientation/01.04-Installing-Anaconda-on-MacOS/#5-source-your-bash-rc-file",
            "text": "Once Anaconda is installed, you need to load the changes to your  PATH  environment variable in the current terminal session.  Open the MacOS Terminal and type:  $ cd ~\n$ source .bashrc",
            "title": "5. Source your .bash-rc file"
        },
        {
            "location": "/01-Orientation/01.04-Installing-Anaconda-on-MacOS/#6-open-a-terminal-and-type-python-and-run-some-code",
            "text": "Open the MacOS Terminal and type:  $ python  You should see something like  Python 3.6.3 | Anaconda Inc. |  At the Python REPL (the Python  >>>  prompt) try:  >>> import this  If you see the Zen of Python, the installation was successful. Exit out of the Python REPL using the command  exit() . Make sure to include the double parenthesis  ()  after the  exit  command.  >>> exit()",
            "title": "6. Open a terminal and type python and run some code."
        },
        {
            "location": "/01-Orientation/01.05-Installing-Anaconda-on-Linux/",
            "text": "Installing Anaconda on Linux\n\n\nThis section details the installation of the Anaconda distribution of Python on Linux, specifically Ubuntu 18.04, but the instructions should work for other Debian-based Linux distributions as well.\n\n\nUbuntu 18.04 comes pre-installed with Python (Version 3.6) and legacy Python (Version 2.7). You can confirm the legacy version of Python is installed by opening up a terminal.\n\n\nIn the terminal type:\n\n\n$ python\n\n\n\n\nYou will most likely see Python Version 2.7 is installed. If you enter:\n\n\n$ python3\n\n\n\n\nYou will most likely see Python Version 3.6 is also installed. You can use the 3.6 Version of Python, but each time a new package needs to be downloaded, the \n$ pip3 install\n command must be used.\n\n\nInstall the Anaconda distribution of Python to follow the examples in the book without the need to install additional third-party packages.\n\n\nSteps:\n\n\n\n\n\n\nVisit \nAnaconda.com/downloads\n\n\n\n\n\n\nSelect Linux\n\n\n\n\n\n\nCopy the bash (.sh file) installer link\n\n\n\n\n\n\nUse \nwget\n to download the bash installer\n\n\n\n\n\n\nRun the bash script to install \nAnaconda3\n\n\n\n\n\n\nsource\n the \n.bash-rc\n file to add Anaconda to your \nPATH\n\n\n\n\n\n\nStart the Python REPL\n\n\n\n\n\n\n1. Visit the Anaconda downloads page\n\n\nGo to the following link: \nAnaconda.com/downloads\n\n\n2. Select Linux\n\n\nOn the downloads page, select the Linux operating system\n\n\n\n\n3. Copy the bash (.sh file) installer link\n\n\nIn the \nPython 3.6 Version* \n box, right-click on the [64-Bit(x86) Installer] link. Select [copy link address].\n\n\n\n\n4. Use \nwget\n to download the bash installer\n\n\nNow that the bash installer (.sh file) link is stored on the clipboard, use \nwget\n to download the installer script. In a terminal, \ncd\n into the home directory and make a new directory called \ntmp\n. \ncd\n into \ntmp\n and use \nwget\n to download the installer. Although the installer is a bash script, it is still quite large and the download will not be immediate (Note the link below includes \n<release>\n. the specific release depends on when you download the installer).\n\n\n$ cd ~\n$ mkdir tmp\n$ cd tmp\n$ https://repo.continuum.io/archive/Anaconda3<release>.sh\n\n\n\n\n5. Run the bash script to install \nAnaconda3\n\n\nWith the bash installer script downloaded, run the \n.sh\n script to install \nAnaconda3\n. Ensure you are in the directory where the installer script downloaded:\n\n\n$ ls\nAnaconda3-5.2.0-Linux-x86_64.sh\n\n\n\n\nRun the installer script with bash.\n\n\n$ bash Anaconda3-5.2.0-Linux-x86_64.sh\n\n\n\n\nAccept the Licence Agreement and allow Anaconda to be added to your \nPATH\n. By adding Anaconda to your \nPATH\n, the Anaconda distribution of Python will be called when you type \n$ python\n in a terminal.\n\n\n6. \nsource\n the \n.bash-rc\n file to add Anaconda to your \nPATH\n\n\nNow that \nAnaconda3\n is installed and \nAnaconda3\n is added to our \nPATH\n, \nsource\n the \n.bashrc\n file to load the new \nPATH\n environment variable into the current terminal session. Note the \n.bashrc\n file is in the home directory. You can see it with \n$ ls -a\n.\n\n\n$ cd ~\n$ source .bashrc\n\n\n\n\n7. Start the Python REPL\n\n\nTo verify the installation is complete, open Python from the command line:\n\n\n$ python\n\nPython 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 18:21:58)\n[GCC 7.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n\n\n\n\nIf you see Python 3.6 from Anaconda listed, your installation is complete. To exit the Python REPL, type:\n\n\n>>> exit()",
            "title": "Installing Anaconda on Linux"
        },
        {
            "location": "/01-Orientation/01.05-Installing-Anaconda-on-Linux/#installing-anaconda-on-linux",
            "text": "This section details the installation of the Anaconda distribution of Python on Linux, specifically Ubuntu 18.04, but the instructions should work for other Debian-based Linux distributions as well.  Ubuntu 18.04 comes pre-installed with Python (Version 3.6) and legacy Python (Version 2.7). You can confirm the legacy version of Python is installed by opening up a terminal.  In the terminal type:  $ python  You will most likely see Python Version 2.7 is installed. If you enter:  $ python3  You will most likely see Python Version 3.6 is also installed. You can use the 3.6 Version of Python, but each time a new package needs to be downloaded, the  $ pip3 install  command must be used.  Install the Anaconda distribution of Python to follow the examples in the book without the need to install additional third-party packages.",
            "title": "Installing Anaconda on Linux"
        },
        {
            "location": "/01-Orientation/01.05-Installing-Anaconda-on-Linux/#steps",
            "text": "Visit  Anaconda.com/downloads    Select Linux    Copy the bash (.sh file) installer link    Use  wget  to download the bash installer    Run the bash script to install  Anaconda3    source  the  .bash-rc  file to add Anaconda to your  PATH    Start the Python REPL",
            "title": "Steps:"
        },
        {
            "location": "/01-Orientation/01.05-Installing-Anaconda-on-Linux/#1-visit-the-anaconda-downloads-page",
            "text": "Go to the following link:  Anaconda.com/downloads",
            "title": "1. Visit the Anaconda downloads page"
        },
        {
            "location": "/01-Orientation/01.05-Installing-Anaconda-on-Linux/#2-select-linux",
            "text": "On the downloads page, select the Linux operating system",
            "title": "2. Select Linux"
        },
        {
            "location": "/01-Orientation/01.05-Installing-Anaconda-on-Linux/#3-copy-the-bash-sh-file-installer-link",
            "text": "In the  Python 3.6 Version*   box, right-click on the [64-Bit(x86) Installer] link. Select [copy link address].",
            "title": "3. Copy the bash (.sh file) installer link"
        },
        {
            "location": "/01-Orientation/01.05-Installing-Anaconda-on-Linux/#4-use-wget-to-download-the-bash-installer",
            "text": "Now that the bash installer (.sh file) link is stored on the clipboard, use  wget  to download the installer script. In a terminal,  cd  into the home directory and make a new directory called  tmp .  cd  into  tmp  and use  wget  to download the installer. Although the installer is a bash script, it is still quite large and the download will not be immediate (Note the link below includes  <release> . the specific release depends on when you download the installer).  $ cd ~\n$ mkdir tmp\n$ cd tmp\n$ https://repo.continuum.io/archive/Anaconda3<release>.sh",
            "title": "4. Use wget to download the bash installer"
        },
        {
            "location": "/01-Orientation/01.05-Installing-Anaconda-on-Linux/#5-run-the-bash-script-to-install-anaconda3",
            "text": "With the bash installer script downloaded, run the  .sh  script to install  Anaconda3 . Ensure you are in the directory where the installer script downloaded:  $ ls\nAnaconda3-5.2.0-Linux-x86_64.sh  Run the installer script with bash.  $ bash Anaconda3-5.2.0-Linux-x86_64.sh  Accept the Licence Agreement and allow Anaconda to be added to your  PATH . By adding Anaconda to your  PATH , the Anaconda distribution of Python will be called when you type  $ python  in a terminal.",
            "title": "5. Run the bash script to install Anaconda3"
        },
        {
            "location": "/01-Orientation/01.05-Installing-Anaconda-on-Linux/#6-source-the-bash-rc-file-to-add-anaconda-to-your-path",
            "text": "Now that  Anaconda3  is installed and  Anaconda3  is added to our  PATH ,  source  the  .bashrc  file to load the new  PATH  environment variable into the current terminal session. Note the  .bashrc  file is in the home directory. You can see it with  $ ls -a .  $ cd ~\n$ source .bashrc",
            "title": "6. source the .bash-rc file to add Anaconda to your PATH"
        },
        {
            "location": "/01-Orientation/01.05-Installing-Anaconda-on-Linux/#7-start-the-python-repl",
            "text": "To verify the installation is complete, open Python from the command line:  $ python\n\nPython 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 18:21:58)\n[GCC 7.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>  If you see Python 3.6 from Anaconda listed, your installation is complete. To exit the Python REPL, type:  >>> exit()",
            "title": "7. Start the Python REPL"
        },
        {
            "location": "/01-Orientation/01.06-Installing-Python-from-Python-dot-org/",
            "text": "Installing Python from Python.org\n\n\nBelow is the recommended way to install a new version of Python from Python.org on each of the three major operating systems: Windows, MacOS and Linux.\n\n\nThis book is based on Python version 3.6.  Some of the examples in the book may not work properly on legacy Python (version 2.7).  I recommend installing the Anaconda Distribution of Python on Windows and MacOSX. The installation of Anaconda on these operating systems was detailed in previous sections.\n\n\nInstalling Python on Windows\n\n\nGo to \nhttps://www.python.org/downloads/\n and download the latest release. Make sure to select the box \n[add Python to my path]\n during the installation. \n\n\n\n\nInstalling Python on MacOS\n\n\nGo to \nhttps://www.python.org/downloads/mac-osx/\n and download the latest release. \n\n\n\n\nInstalling Python on Linux\n\n\nOpen a terminal and enter \n$ python\n to see if a version of Python is already installed on the system.\n\n\n$ python\nPython 2.7.12 (default, Dec  4 2017, 14:50:18)\n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> exit()\n\n\n\n\nIn the code block above, the version of Python is \nPython 2.7.12\n. If the Python version is 2.7 or below, try the command \n$ python3\n.\n\n\n$ python3\nPython 3.6.7 (default, Oct 22 2018, 11:32:17) \n[GCC 8.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> exit()\n\n\n\n\nIf no version of Python is shown, you can download a release of Python 3.6 from the deadsnakes package repository.\n\n\n$ sudo add-apt-repository ppa:deadsnakes/ppa\n[Enter]\n$ sudo apt-get update\n$ sudo apt-get install python3.6\n\n\n\n\nAfter installation, you may need to append your PATH environment variable to ensure the newly installed Python 3.6 version is the version of Python called when using the terminal. The commands below will add \n/usr/bin\n to your \nPATH\n, and add an alias in \n.bashrc\n so that the command \n$ python3.6\n produces the Python 3.6 REPL. Take care to ensure the double chevron \n>>\n is used, as a single chevron \n>\n will overwrite the \n.bashrc\n file.\n\n\n$ cd ~\n$ echo  \"PATH=/usr/bin:$PATH\" >> ~/.bashrc \n$ echo \"alias python3.6='/usr/bin/python3.6'\" >> ~/.bashrc\n$ source .bashrc\n$ python3.6\nPython 3.6.6 (default, Jun 28 2018, 04:42:43)\n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> exit()",
            "title": "Installing Python from Python.org"
        },
        {
            "location": "/01-Orientation/01.06-Installing-Python-from-Python-dot-org/#installing-python-from-pythonorg",
            "text": "Below is the recommended way to install a new version of Python from Python.org on each of the three major operating systems: Windows, MacOS and Linux.  This book is based on Python version 3.6.  Some of the examples in the book may not work properly on legacy Python (version 2.7).  I recommend installing the Anaconda Distribution of Python on Windows and MacOSX. The installation of Anaconda on these operating systems was detailed in previous sections.",
            "title": "Installing Python from Python.org"
        },
        {
            "location": "/01-Orientation/01.06-Installing-Python-from-Python-dot-org/#installing-python-on-windows",
            "text": "Go to  https://www.python.org/downloads/  and download the latest release. Make sure to select the box  [add Python to my path]  during the installation.",
            "title": "Installing Python on Windows"
        },
        {
            "location": "/01-Orientation/01.06-Installing-Python-from-Python-dot-org/#installing-python-on-macos",
            "text": "Go to  https://www.python.org/downloads/mac-osx/  and download the latest release.",
            "title": "Installing Python on MacOS"
        },
        {
            "location": "/01-Orientation/01.06-Installing-Python-from-Python-dot-org/#installing-python-on-linux",
            "text": "Open a terminal and enter  $ python  to see if a version of Python is already installed on the system.  $ python\nPython 2.7.12 (default, Dec  4 2017, 14:50:18)\n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> exit()  In the code block above, the version of Python is  Python 2.7.12 . If the Python version is 2.7 or below, try the command  $ python3 .  $ python3\nPython 3.6.7 (default, Oct 22 2018, 11:32:17) \n[GCC 8.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> exit()  If no version of Python is shown, you can download a release of Python 3.6 from the deadsnakes package repository.  $ sudo add-apt-repository ppa:deadsnakes/ppa\n[Enter]\n$ sudo apt-get update\n$ sudo apt-get install python3.6  After installation, you may need to append your PATH environment variable to ensure the newly installed Python 3.6 version is the version of Python called when using the terminal. The commands below will add  /usr/bin  to your  PATH , and add an alias in  .bashrc  so that the command  $ python3.6  produces the Python 3.6 REPL. Take care to ensure the double chevron  >>  is used, as a single chevron  >  will overwrite the  .bashrc  file.  $ cd ~\n$ echo  \"PATH=/usr/bin:$PATH\" >> ~/.bashrc \n$ echo \"alias python3.6='/usr/bin/python3.6'\" >> ~/.bashrc\n$ source .bashrc\n$ python3.6\nPython 3.6.6 (default, Jun 28 2018, 04:42:43)\n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> exit()",
            "title": "Installing Python on Linux"
        },
        {
            "location": "/01-Orientation/01.07-Summary/",
            "text": "Summary\n\n\nIn this chapter, you learned about the Anaconda distribution of Python and how the Anaconda distribution of Python compares the version of Python at Python.org.  The Anaconda distribution of Python comes with about 600 packages pre-installed as well as Jupyter notebooks and the Anaconda Prompt. Jupyter notebooks and some of the pre-installed packages that come with Anaconda will be used later chapters. This text recommends that problem solvers install the Anaconda distribution of Python.\n\n\nThis chapter showed how to install the Anaconda distribution of Python on Windows, MacOS, and Linux.  \n\n\nAt the end of the chapter, a description of how to download and install Python from Python.org was shown.\n\n\nKey Terms and Concepts\n\n\nAnaconda\n\n\nAnaconda Prompt\n\n\ndownload\n\n\ninstall\n\n\nPython\n\n\nLegacy Python\n\n\nPython Interpreter\n\n\nPython REPL\n\n\npackage\n\n\noperating system\n\n\nWindows\n\n\nMacOS\n\n\nLinux\n\n\nterminal\n\n\nPATH",
            "title": "Summary"
        },
        {
            "location": "/01-Orientation/01.07-Summary/#summary",
            "text": "In this chapter, you learned about the Anaconda distribution of Python and how the Anaconda distribution of Python compares the version of Python at Python.org.  The Anaconda distribution of Python comes with about 600 packages pre-installed as well as Jupyter notebooks and the Anaconda Prompt. Jupyter notebooks and some of the pre-installed packages that come with Anaconda will be used later chapters. This text recommends that problem solvers install the Anaconda distribution of Python.  This chapter showed how to install the Anaconda distribution of Python on Windows, MacOS, and Linux.    At the end of the chapter, a description of how to download and install Python from Python.org was shown.",
            "title": "Summary"
        },
        {
            "location": "/01-Orientation/01.07-Summary/#key-terms-and-concepts",
            "text": "Anaconda  Anaconda Prompt  download  install  Python  Legacy Python  Python Interpreter  Python REPL  package  operating system  Windows  MacOS  Linux  terminal  PATH",
            "title": "Key Terms and Concepts"
        },
        {
            "location": "/01-Orientation/01.08-Review-Questions/",
            "text": "Review Questions\n\n\nQ01.01 What is Python? How is the Python language different than the Python Interpreter?\n\n\nQ01.02 What is the difference between the version of Python at python.org and the version of Python at Anaconda.com?\n\n\nQ01.03 What are the advantages and disadvantages of using the Anaconda distribution of Python compared to using the version of Python at python.org?\n\n\nQ01.04 There are many different applications to edit Python code. Some examples include: JupyterLab, Sublime Text, Visual Studio Code, and PyCharm. Pick two Python code editors and explain a feature of each code editor. \n\n\nQ01.05 What are some advantages of Python compared to other computer programming languages?\n\n\nQ01.06 What is PyPI? How many packages are currently available for download on PyPI?\n\n\nQ01.07 Find three modules that are part of the Python Standard Library. Write a short description of what each of the modules you choose is used for.\n\n\nQ01.08 Which computer operating systems can Python be installed on?\n\n\nQ01.09 How much does Python cost to download and install?\n\n\nQ01.10 What are three subject areas that have seen a growth in the use of Python?\n\n\nQ01.11 Besides PyPI where else can problem solvers go to find Python packages, scripts, and utilities?\n\n\nQ01.12 Name three packages that come pre-installed with the Anaconda distribution of Python\n\n\nQ01.13 How much does the Anaconda distribution of Python cost to download and install?\n\n\nQ01.14 Which operating systems can the Anaconda distribution of Python be installed on?\n\n\nQ01.15 What type of program is the Anaconda Prompt?\n\n\nQ01.16 What is another name for the Python interpreter?\n\n\nQ01.17 How can you bring up the Python interpreter (the Python REPL) using the Anaconda Prompt?\n\n\nQ01.18 What prompt is shown in the Python interpreter (the Python REPL)?\n\n\nQ01.19 What command do you type to close the Python interpreter (the Python REPL)?\n\n\nQ01.20 What are the first three lines in \nThe Zen of Python\n by Tim Peters?\n\n\nQ01.21 How do you open the Anaconda Prompt?\n\n\nInstalling Python on MacOS\n\n\nQ01.30 What web address do you go to download the Anaconda distribution of Python for MacOS?\n\n\nQ01.31 What file extension does the installer for MacOS of the Anaconda distribution of Python use?\n\n\nQ01.32 When you install the Anaconda distribution of Python on MacOS, what is advised to do for the installation options?\n\n\nQ01.33 Why do you need to \nsource\n the \n.bashrc\n file after you install the Anaconda distribution of Python for MacOS?\n\n\nQ01.34 How can you bring up the Python interpreter (the Python REPL) using the MacOS terminal?\n\n\nQ01.35 Which version of Python is it advisable to download and install on MacOS?\n\n\nQ01.36 Python can be installed on MacOS using a terminal program called \nHomebrew\n. What command is issued to the MacOS terminal to install Python using \nHomebrew\n?\n\n\nQ01.37 What version of Python comes pre-installed on MacOS?\n\n\nInstalling Python on Linux\n\n\nQ01.40 What version(s) of Python comes pre-installed on most Linux distributions?\n\n\nQ01.41 In Linux, what happens when you type \npython\n at the terminal compared to when you type \npython3\n at the terminal?\n\n\nQ01.42 If you use the system version of Python 3 installed on Linux, what command must you enter to install Python packages to the Python 3 version that comes pre-installed?\n\n\nQ01.43 What kind of file type (what is the file extension) is downloaded from Anaconda.com to install the Anaconda distribution of Python on Linux?\n\n\nQ01.44 Why do you need to \nsource\n the \n.bashrc\n file after you install the Anaconda distribution of Python for Linux?\n\n\nQ01.45 How can you bring up the Python interpreter (the Python REPL) using a Linux terminal?\n\n\nQ01.46 Which version of Python is it advisable to download and install on Linux?\n\n\nQ01.47 What is a disadvantage of using the version of Python that comes pre-installed on Linux, compared to using the Anaconda distribution of Python on Linux?\n\n\nQ01.48 Before you install the Anaconda distribution of Python on Linux, what version of Python are you most likely to see when you enter the command \n$ python\n in a Linux terminal?\n\n\nQ01.49 Before you install the Anaconda distribution of Python on Linux, what version of Python are you most likely to see when you enter the command \n$ python3\n in a Linux terminal?\n\n\nInstalling Python from Python.org\n\n\nQ01.50 What web address do you go to download Python from Python.org?\n\n\nQ01.51 What option is advised to select when downloading and installing Python from Python.org on Windows?\n\n\nQ01.52 If Python 3 is not available on Linux, what package repository can Python 3.6 be downloaded from?\n\n\nQ01.53 Go to Python.org. What is the current version of Python available for download?\n\n\nErrors, Explanations, and Solutions\n\n\nFor each of the problems below, run the line of code. Copy the output, then suggest and run a line of code that fixes the error.\n\n\nQ01.91 Open the Python Interpreter (the Python REPL). Try to close the Python Interpreter with the command:\n\n\n>>> exit\n\n\n\n\nQ02.92 Open the Python Interpreter (the Python REPL). Try to view \nThe Zen of Python\n by Tim Peters with the command:\n\n\n>>> Zen of Python\n\n\n\n\nQ01.93 Open the Anaconda Prompt. Try to open the Python Interpreter (the Python REPL) with the command:\n\n\n> python3\n\n\n\n\nQ01.94 Open the Anaconda Prompt. Try to open the Python Interpreter (the Python REPL) with the command:\n\n\n> Python\n\n\n\n\nQ02.95 Open the Python Interpreter (the Python REPL). Try to view \nThe Zen of Python\n by Tim Peters with the command:\n\n\n>>> import this()",
            "title": "Review Questions"
        },
        {
            "location": "/01-Orientation/01.08-Review-Questions/#review-questions",
            "text": "Q01.01 What is Python? How is the Python language different than the Python Interpreter?  Q01.02 What is the difference between the version of Python at python.org and the version of Python at Anaconda.com?  Q01.03 What are the advantages and disadvantages of using the Anaconda distribution of Python compared to using the version of Python at python.org?  Q01.04 There are many different applications to edit Python code. Some examples include: JupyterLab, Sublime Text, Visual Studio Code, and PyCharm. Pick two Python code editors and explain a feature of each code editor.   Q01.05 What are some advantages of Python compared to other computer programming languages?  Q01.06 What is PyPI? How many packages are currently available for download on PyPI?  Q01.07 Find three modules that are part of the Python Standard Library. Write a short description of what each of the modules you choose is used for.  Q01.08 Which computer operating systems can Python be installed on?  Q01.09 How much does Python cost to download and install?  Q01.10 What are three subject areas that have seen a growth in the use of Python?  Q01.11 Besides PyPI where else can problem solvers go to find Python packages, scripts, and utilities?  Q01.12 Name three packages that come pre-installed with the Anaconda distribution of Python  Q01.13 How much does the Anaconda distribution of Python cost to download and install?  Q01.14 Which operating systems can the Anaconda distribution of Python be installed on?  Q01.15 What type of program is the Anaconda Prompt?  Q01.16 What is another name for the Python interpreter?  Q01.17 How can you bring up the Python interpreter (the Python REPL) using the Anaconda Prompt?  Q01.18 What prompt is shown in the Python interpreter (the Python REPL)?  Q01.19 What command do you type to close the Python interpreter (the Python REPL)?  Q01.20 What are the first three lines in  The Zen of Python  by Tim Peters?  Q01.21 How do you open the Anaconda Prompt?",
            "title": "Review Questions"
        },
        {
            "location": "/01-Orientation/01.08-Review-Questions/#installing-python-on-macos",
            "text": "Q01.30 What web address do you go to download the Anaconda distribution of Python for MacOS?  Q01.31 What file extension does the installer for MacOS of the Anaconda distribution of Python use?  Q01.32 When you install the Anaconda distribution of Python on MacOS, what is advised to do for the installation options?  Q01.33 Why do you need to  source  the  .bashrc  file after you install the Anaconda distribution of Python for MacOS?  Q01.34 How can you bring up the Python interpreter (the Python REPL) using the MacOS terminal?  Q01.35 Which version of Python is it advisable to download and install on MacOS?  Q01.36 Python can be installed on MacOS using a terminal program called  Homebrew . What command is issued to the MacOS terminal to install Python using  Homebrew ?  Q01.37 What version of Python comes pre-installed on MacOS?",
            "title": "Installing Python on MacOS"
        },
        {
            "location": "/01-Orientation/01.08-Review-Questions/#installing-python-on-linux",
            "text": "Q01.40 What version(s) of Python comes pre-installed on most Linux distributions?  Q01.41 In Linux, what happens when you type  python  at the terminal compared to when you type  python3  at the terminal?  Q01.42 If you use the system version of Python 3 installed on Linux, what command must you enter to install Python packages to the Python 3 version that comes pre-installed?  Q01.43 What kind of file type (what is the file extension) is downloaded from Anaconda.com to install the Anaconda distribution of Python on Linux?  Q01.44 Why do you need to  source  the  .bashrc  file after you install the Anaconda distribution of Python for Linux?  Q01.45 How can you bring up the Python interpreter (the Python REPL) using a Linux terminal?  Q01.46 Which version of Python is it advisable to download and install on Linux?  Q01.47 What is a disadvantage of using the version of Python that comes pre-installed on Linux, compared to using the Anaconda distribution of Python on Linux?  Q01.48 Before you install the Anaconda distribution of Python on Linux, what version of Python are you most likely to see when you enter the command  $ python  in a Linux terminal?  Q01.49 Before you install the Anaconda distribution of Python on Linux, what version of Python are you most likely to see when you enter the command  $ python3  in a Linux terminal?",
            "title": "Installing Python on Linux"
        },
        {
            "location": "/01-Orientation/01.08-Review-Questions/#installing-python-from-pythonorg",
            "text": "Q01.50 What web address do you go to download Python from Python.org?  Q01.51 What option is advised to select when downloading and installing Python from Python.org on Windows?  Q01.52 If Python 3 is not available on Linux, what package repository can Python 3.6 be downloaded from?  Q01.53 Go to Python.org. What is the current version of Python available for download?",
            "title": "Installing Python from Python.org"
        },
        {
            "location": "/01-Orientation/01.08-Review-Questions/#errors-explanations-and-solutions",
            "text": "For each of the problems below, run the line of code. Copy the output, then suggest and run a line of code that fixes the error.  Q01.91 Open the Python Interpreter (the Python REPL). Try to close the Python Interpreter with the command:  >>> exit  Q02.92 Open the Python Interpreter (the Python REPL). Try to view  The Zen of Python  by Tim Peters with the command:  >>> Zen of Python  Q01.93 Open the Anaconda Prompt. Try to open the Python Interpreter (the Python REPL) with the command:  > python3  Q01.94 Open the Anaconda Prompt. Try to open the Python Interpreter (the Python REPL) with the command:  > Python  Q02.95 Open the Python Interpreter (the Python REPL). Try to view  The Zen of Python  by Tim Peters with the command:  >>> import this()",
            "title": "Errors, Explanations, and Solutions"
        },
        {
            "location": "/02-The-Python-REPL/02.00-Introduction/",
            "text": "The Python REPL\n\n\nIntroduction\n\n\nWelcome to the world of problem solving with Python! This first Orientation Chapter will help you get started by guiding you through the process of installing Python on your computer.\nBy the end of this chapter, you will be able to:\n\n\n\n\n\n\nOpen and close the Python REPL\n\n\n\n\n\n\nCompute mathematical calculations using the Python REPL\n\n\n\n\n\n\nUse the output from Python REPL as input in another problem\n\n\n\n\n\n\nImport the math and statistics modules from the Python Standard Library and use their functions\n\n\n\n\n\n\nAssign values to variables\n\n\n\n\n\n\nUse variables in calculations\n\n\n\n\n\n\nCreate strings\n\n\n\n\n\n\nCombine, compare, and pull characters out of strings",
            "title": "Introduction"
        },
        {
            "location": "/02-The-Python-REPL/02.00-Introduction/#the-python-repl",
            "text": "",
            "title": "The Python REPL"
        },
        {
            "location": "/02-The-Python-REPL/02.00-Introduction/#introduction",
            "text": "Welcome to the world of problem solving with Python! This first Orientation Chapter will help you get started by guiding you through the process of installing Python on your computer.\nBy the end of this chapter, you will be able to:    Open and close the Python REPL    Compute mathematical calculations using the Python REPL    Use the output from Python REPL as input in another problem    Import the math and statistics modules from the Python Standard Library and use their functions    Assign values to variables    Use variables in calculations    Create strings    Combine, compare, and pull characters out of strings",
            "title": "Introduction"
        },
        {
            "location": "/02-The-Python-REPL/02.01-Python-as-a-Calculator/",
            "text": "Python as a Calculator\n\n\nPython can be used as a calculator to compute arithmetic operations like addition, subtraction, multiplication and division. Python can also be used for trigonometric calculations and statistical calculations.\n\n\nArithmetic\n\n\nPython can be used as a calculator to make simple arithmetic calculations. \n\n\nSimple arithmetic calculations can be completed at the Python Prompt, also called the \nPython REPL\n. REPL stands for Read Evaluate Print Loop. The Python REPL shows three arrow symbols \n>>>\n followed by a blinking cursor. Programmers type commands at the \n>>>\n prompt then hit \n[ENTER]\n to see the results. \n\n\nCommands typed into the Python REPL are \nread\n by the interpreter, results of running the commands are \nevaluated\n, then \nprinted\n to the command window.  After the output is printed, the \n>>>\n prompt appears on a new line. This process repeats over and over again in a continuous \nloop\n. \n\n\nTry the following commands at the Python REPL:\n\n\nSuppose the mass of a battery is 5 kg and the mass of the battery cables is 3 kg. What is the mass of the battery cable assembly?\n\n\n>>> 5 + 3\n8\n\n\n\n\nSuppose one of the cables above is removed and it has a mass of 1.5 kg. What is the mass of the leftover assembly?\n\n\n>>> 8 - 1.5\n6.5\n\n\n\n\nIf the battery has a mass of 5000 g and a volume of 2500 \ncm^3\ncm^3\n What is the density of the battery? The formula for density is below, where \nD\nD\n is density, \nm\nm\n is mass and \nv\nv\n is volume.\n\n\n\n\n D = \\frac{m}{v} \n\n\n D = \\frac{m}{v} \n\n\n\n\nIn the problem above \nm = 5000\nm = 5000\n and \nv=2500\nv=2500\n\n\nLet's solve this with Python.\n\n\n>>> 5000 / 2500\n2.0\n\n\n\n\nWhat is the total mass if we have 2 batteries, and each battery weighs 5 kg?\n\n\n>>> 5 * 2\n10\n\n\n\n\nThe length, width, and height of each battery is 3 cm. What is the area of the base of the battery?\nTo complete this problem, use the double asterisk symbol \n**\n to raise a number to a power.\n\n\n>>> 3 ** 2\n9\n\n\n\n\nWhat is the volume of the battery if each the length, width, and height of the battery are all 3 cm?\n\n\n>>> 3 ** 3\n27\n\n\n\n\nFind the mass of the two batteries and two cables.\n\n\nWe can use Python to find the mass of the batteries and then use the answer, which Python saves as an underscore _ to use in our next operation. (The underscore \n_\n in Python is comparable to the \nans\n variable in MATLAB)\n\n\n>>> 2 * 5 \n10\n>>> _ + 1.5 + 1\n12.5\n\n\n\n\nSection Summary\n\n\nA summary of the arithmetic operations in Python is below:\n\n\n\n\n\n\n\n\noperator\n\n\ndescription\n\n\nexample\n\n\nresult\n\n\n\n\n\n\n\n\n\n\n+\n\n\naddition\n\n\n2 + 3\n\n\n5\n\n\n\n\n\n\n-\n\n\nsubtraction\n\n\n8 - 6\n\n\n2\n\n\n\n\n\n\n-\n\n\nnegative number\n\n\n-4\n\n\n-4\n\n\n\n\n\n\n*\n\n\nmultiplication\n\n\n5 * 2\n\n\n10\n\n\n\n\n\n\n/\n\n\ndivision\n\n\n6 / 3\n\n\n2\n\n\n\n\n\n\n**\n\n\nraises a number to a power\n\n\n10**2\n\n\n100\n\n\n\n\n\n\n_\n\n\nreturns last saved value\n\n\n_ + 7\n\n\n107\n\n\n\n\n\n\n### Trigonometry: sine, cosine, and tangent\n\n\n\n\n\n\n\n\n\n\n\n\nTrigonometry functions such as sine, cosine, and tangent can also be calculated using the Python REPL.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo use Python's trig functions, we need to introduce a new concept: \nimporting modules\n. \n\n\nIn Python, there are many operations built into the language when the REPL starts. These include \n+\n , \n-\n, \n*\n, \n/\n like we saw in the previous section. However, not all functions will work right away when Python starts. Say we want to find the sine of an angle. Try the following:\n\n\n>>> sin(60)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sin' is not defined\n\n\n\n\nThis error results because we have not told Python to include the \nsin\n function. The \nsin\n function is part of the \nPython Standard Library\n. The Python Standard Library comes with every Python installation and includes many functions, but not all of these functions are available to us when we start a new Python REPL session. To use Python's \nsin\n function, first import the \nsin\n function from the \nmath\n \nmodule\n which is part of the Python Standard Library. \n\n\nImporting modules and functions is easy. Use the following syntax: \n\n\nfrom module import function\n\n\n\n\nTo import the \nsin()\n function from the \nmath\n module try:\n\n\n>>> from math import sin\n>>> sin(60)\n-0.3048106211022167\n\n\n\n\nSuccess! Multiple modules can be imported at the same time. Say we want to use a bunch of different trig functions to solve the following problem.\n\n\nAn angle has a value of \n\\pi\n\\pi\n/6 radians. What is the sine, cos, and tangent of the angle?\n\n\nTo solve this problem we need to import the \nsin()\n, \ncos()\n, and \ntan()\n functions. It is also useful to have the value of \n\\pi\n\\pi\n, rather than having to write \n3.14....\n We can import all of these functions at the same time using the syntax:\n\n\nfrom module import function1, function2, function3\n\n\n\n\nNote the commas in between the function names. \n\n\nTry:\n\n\n>>> from math import sin, cos, tan, pi\n>>> pi\n3.141592653589793\n>>> sin(pi/6)\n0.49999999999999994\n>>> >>> cos(pi/6)\n0.8660254037844387\n>>> tan(pi/6)\n0.5773502691896257\n\n\n\n\nSection Summary\n\n\nThe following trig functions are part of Python's \nmath\n module:\n\n\n\n\n\n\n\n\ntrig function\n\n\nname\n\n\ndescription\n\n\nexample\n\n\nresult\n\n\n\n\n\n\n\n\n\n\nmath.pi\n\n\npi\n\n\nmathematical constant \n\\pi\n\\pi\n\n\nmath.pi\n\n\n3.14\n\n\n\n\n\n\nmath.sin()\n\n\nsine\n\n\nsine of an angle in radians\n\n\nmath.sin(4)\n\n\n9.025\n\n\n\n\n\n\nmath.cos()\n\n\ncosine\n\n\ncosine of an angle in radians\n\n\ncos(3.1)\n\n\n400\n\n\n\n\n\n\nmath.tan()\n\n\ntangent\n\n\ntangent of an angle in radians\n\n\ntan(100)\n\n\n2.0\n\n\n\n\n\n\nmath.asin()\n\n\narc sine\n\n\ninverse sine, ouput in radians\n\n\nmath.sin(4)\n\n\n9.025\n\n\n\n\n\n\nmath.acos()\n\n\narc cosine\n\n\ninverse cosine, ouput in radians\n\n\nlog(3.1)\n\n\n400\n\n\n\n\n\n\nmath.atan()\n\n\narc tangent\n\n\ninverse tangent, ouput in radians\n\n\natan(100)\n\n\n2.0\n\n\n\n\n\n\nmath.radians()\n\n\nradians conversion\n\n\ndegrees to radians\n\n\nmath.radians(90)\n\n\n1.57\n\n\n\n\n\n\nmath.degress()\n\n\ndegree conversion\n\n\nradians to degrees\n\n\nmath.degrees(2)\n\n\n114.59\n\n\n\n\n\n\n\n\nExponents and Logarithms\n\n\nCalculating exponents and logarithms with Python is easy. Note the exponent and logarithm functions are imported from the \nmath\n module just like the trig functions were imported from the \nmath\n module above. \n\n\nThe following exponents and logarithms functions can be imported from Python's math module:\n\n\n\n\nlog\n\n\nlog10\n\n\nexp\n\n\ne\n\n\npow(x,y)\n\n\nsqrt\n\n\n\n\nLet's try a couple of examples:\n\n\n>>> from math import log, log10, exp, e, pow, sqrt\n>>> log(3.0*e**3.4)         # note: natural log\n4.4986122886681095\n\n\n\n\nA right triangle has side lengths 3 and 4. What is the length of the hypotenuse?\n\n\n>>> sqrt(3**2 + 4**2)\n5.0 \n\n\n\n\nThe power function \npow()\n works like the \n**\n operator to raise a number to a power.\n\n\n>>> 5**2\n25\n\n\n\n\n\n\n>>> pow(5,2)\n25.0\n\n\n\n\nSection Summary\n\n\nThe following exponent and logarithm functions are part of Python's \nmath\n module:\n\n\n\n\n\n\n\n\nmath module function\n\n\nname\n\n\ndescription\n\n\nexample\n\n\nresult\n\n\n\n\n\n\n\n\n\n\nmath.e\n\n\neuler's number\n\n\nmathematical constant \ne\ne\n\n\nmath.e\n\n\n2.718\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmath.exp()\n\n\nexponent\n\n\ne\ne\n raised to a power\n\n\nmath.exp(2.2)\n\n\n9.025\n\n\n\n\n\n\nmath.log()\n\n\nnatural logerithm\n\n\nlog base e\n\n\nmath.log(3.1)\n\n\n400\n\n\n\n\n\n\nmath.log10()\n\n\nbase 10 logerithm\n\n\nlog base 10\n\n\nmath.log10(100)\n\n\n2.0\n\n\n\n\n\n\nmath.pow()\n\n\nexponents\n\n\nraises a number to a power\n\n\nmath.pow(2,3)\n\n\n8.0\n\n\n\n\n\n\nmath.sqrt()\n\n\nsquare root\n\n\nsquare root of a number\n\n\nmath.sqrt(16)\n\n\n4.0\n\n\n\n\n\n\n### Statistics\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo round out this section, we will look at a couple of statistics functions. These functions are part of the Python Standard Library, but not part of the \nmath\n module. To access Python's statistics functions, we need to import them from the \nstatistics\n module using the statement \nfrom statistics import mean, median, mode, stdev\n. Then the functions \nmean\n, \nmedian\n, \nmode\n and \nstdev\n(standard deviation) can be used.  \n\n\n>>> from statistics import mean, median, mode, stdev\n\n>>> test_scores = [60, 83, 83, 91, 100]\n\n>>> mean(test_scores)\n83.4\n\n>>> median(test_scores)\n83\n\n>>> mode(test_scores)\n83\n\n>>> stdev(test_scores)\n14.842506526863986 \n\n\n\n\nAlternatively, we can import the entire \nstatistics\n module using the statement \nimport statistics\n. Then to use the functions, we need to use the names \nstatistics.mean\n, \nstatistics.median\n, \nstatistics.mode\n, and \nstatistics.stdev\n. See below:\n\n\n>>> import statistics\n\n>>> test_scores = [60, 83, 83, 91, 100 ]\n\n>>> statistics.mean(test_scores)\n83.4\n\n>>> statistics.median(test_scores)\n83\n\n>>> statistics.mode(test_scores)\n83\n\n>>> statistics.stdev(test_scores)\n14.842506526863986 \n\n\n\n\nSection Summary\n\n\nThe following functions are part of Python's \nstatistics\n module:\n\n\n\n\n\n\n\n\nstatistics module function\n\n\nname\n\n\ndescription\n\n\nexample\n\n\nresult\n\n\n\n\n\n\n\n\n\n\nmean()\n\n\nmean\n\n\nmean or average\n\n\nmean([1,4,5,5])\n\n\n3.75\n\n\n\n\n\n\nmedian()\n\n\nmedian\n\n\nmiddle value\n\n\nmedian([1,4,5,5])\n\n\n4.5\n\n\n\n\n\n\nmode()\n\n\nmode\n\n\nmost often\n\n\nmode([1,4,5,5])\n\n\n5\n\n\n\n\n\n\nstdev()\n\n\nstandard deviation\n\n\nspread of data\n\n\nstdev([1,4,5,5])\n\n\n1.892\n\n\n\n\n\n\nvariance()\n\n\nvariance\n\n\nvariance of data\n\n\nvariance([1,4,5,5])\n\n\n3.583",
            "title": "Python as a Calculator"
        },
        {
            "location": "/02-The-Python-REPL/02.01-Python-as-a-Calculator/#python-as-a-calculator",
            "text": "Python can be used as a calculator to compute arithmetic operations like addition, subtraction, multiplication and division. Python can also be used for trigonometric calculations and statistical calculations.",
            "title": "Python as a Calculator"
        },
        {
            "location": "/02-The-Python-REPL/02.01-Python-as-a-Calculator/#arithmetic",
            "text": "Python can be used as a calculator to make simple arithmetic calculations.   Simple arithmetic calculations can be completed at the Python Prompt, also called the  Python REPL . REPL stands for Read Evaluate Print Loop. The Python REPL shows three arrow symbols  >>>  followed by a blinking cursor. Programmers type commands at the  >>>  prompt then hit  [ENTER]  to see the results.   Commands typed into the Python REPL are  read  by the interpreter, results of running the commands are  evaluated , then  printed  to the command window.  After the output is printed, the  >>>  prompt appears on a new line. This process repeats over and over again in a continuous  loop .   Try the following commands at the Python REPL:  Suppose the mass of a battery is 5 kg and the mass of the battery cables is 3 kg. What is the mass of the battery cable assembly?  >>> 5 + 3\n8  Suppose one of the cables above is removed and it has a mass of 1.5 kg. What is the mass of the leftover assembly?  >>> 8 - 1.5\n6.5  If the battery has a mass of 5000 g and a volume of 2500  cm^3 cm^3  What is the density of the battery? The formula for density is below, where  D D  is density,  m m  is mass and  v v  is volume.    D = \\frac{m}{v}    D = \\frac{m}{v}    In the problem above  m = 5000 m = 5000  and  v=2500 v=2500  Let's solve this with Python.  >>> 5000 / 2500\n2.0  What is the total mass if we have 2 batteries, and each battery weighs 5 kg?  >>> 5 * 2\n10  The length, width, and height of each battery is 3 cm. What is the area of the base of the battery?\nTo complete this problem, use the double asterisk symbol  **  to raise a number to a power.  >>> 3 ** 2\n9  What is the volume of the battery if each the length, width, and height of the battery are all 3 cm?  >>> 3 ** 3\n27  Find the mass of the two batteries and two cables.  We can use Python to find the mass of the batteries and then use the answer, which Python saves as an underscore _ to use in our next operation. (The underscore  _  in Python is comparable to the  ans  variable in MATLAB)  >>> 2 * 5 \n10\n>>> _ + 1.5 + 1\n12.5",
            "title": "Arithmetic"
        },
        {
            "location": "/02-The-Python-REPL/02.01-Python-as-a-Calculator/#section-summary",
            "text": "A summary of the arithmetic operations in Python is below:     operator  description  example  result      +  addition  2 + 3  5    -  subtraction  8 - 6  2    -  negative number  -4  -4    *  multiplication  5 * 2  10    /  division  6 / 3  2    **  raises a number to a power  10**2  100    _  returns last saved value  _ + 7  107    ### Trigonometry: sine, cosine, and tangent       Trigonometry functions such as sine, cosine, and tangent can also be calculated using the Python REPL.        To use Python's trig functions, we need to introduce a new concept:  importing modules .   In Python, there are many operations built into the language when the REPL starts. These include  +  ,  - ,  * ,  /  like we saw in the previous section. However, not all functions will work right away when Python starts. Say we want to find the sine of an angle. Try the following:  >>> sin(60)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sin' is not defined  This error results because we have not told Python to include the  sin  function. The  sin  function is part of the  Python Standard Library . The Python Standard Library comes with every Python installation and includes many functions, but not all of these functions are available to us when we start a new Python REPL session. To use Python's  sin  function, first import the  sin  function from the  math   module  which is part of the Python Standard Library.   Importing modules and functions is easy. Use the following syntax:   from module import function  To import the  sin()  function from the  math  module try:  >>> from math import sin\n>>> sin(60)\n-0.3048106211022167  Success! Multiple modules can be imported at the same time. Say we want to use a bunch of different trig functions to solve the following problem.  An angle has a value of  \\pi \\pi /6 radians. What is the sine, cos, and tangent of the angle?  To solve this problem we need to import the  sin() ,  cos() , and  tan()  functions. It is also useful to have the value of  \\pi \\pi , rather than having to write  3.14....  We can import all of these functions at the same time using the syntax:  from module import function1, function2, function3  Note the commas in between the function names.   Try:  >>> from math import sin, cos, tan, pi\n>>> pi\n3.141592653589793\n>>> sin(pi/6)\n0.49999999999999994\n>>> >>> cos(pi/6)\n0.8660254037844387\n>>> tan(pi/6)\n0.5773502691896257",
            "title": "Section Summary"
        },
        {
            "location": "/02-The-Python-REPL/02.01-Python-as-a-Calculator/#section-summary_1",
            "text": "The following trig functions are part of Python's  math  module:     trig function  name  description  example  result      math.pi  pi  mathematical constant  \\pi \\pi  math.pi  3.14    math.sin()  sine  sine of an angle in radians  math.sin(4)  9.025    math.cos()  cosine  cosine of an angle in radians  cos(3.1)  400    math.tan()  tangent  tangent of an angle in radians  tan(100)  2.0    math.asin()  arc sine  inverse sine, ouput in radians  math.sin(4)  9.025    math.acos()  arc cosine  inverse cosine, ouput in radians  log(3.1)  400    math.atan()  arc tangent  inverse tangent, ouput in radians  atan(100)  2.0    math.radians()  radians conversion  degrees to radians  math.radians(90)  1.57    math.degress()  degree conversion  radians to degrees  math.degrees(2)  114.59",
            "title": "Section Summary"
        },
        {
            "location": "/02-The-Python-REPL/02.01-Python-as-a-Calculator/#exponents-and-logarithms",
            "text": "Calculating exponents and logarithms with Python is easy. Note the exponent and logarithm functions are imported from the  math  module just like the trig functions were imported from the  math  module above.   The following exponents and logarithms functions can be imported from Python's math module:   log  log10  exp  e  pow(x,y)  sqrt   Let's try a couple of examples:  >>> from math import log, log10, exp, e, pow, sqrt\n>>> log(3.0*e**3.4)         # note: natural log\n4.4986122886681095  A right triangle has side lengths 3 and 4. What is the length of the hypotenuse?  >>> sqrt(3**2 + 4**2)\n5.0   The power function  pow()  works like the  **  operator to raise a number to a power.  >>> 5**2\n25   >>> pow(5,2)\n25.0",
            "title": "Exponents and Logarithms"
        },
        {
            "location": "/02-The-Python-REPL/02.01-Python-as-a-Calculator/#section-summary_2",
            "text": "The following exponent and logarithm functions are part of Python's  math  module:     math module function  name  description  example  result      math.e  euler's number  mathematical constant  e e  math.e  2.718           math.exp()  exponent  e e  raised to a power  math.exp(2.2)  9.025    math.log()  natural logerithm  log base e  math.log(3.1)  400    math.log10()  base 10 logerithm  log base 10  math.log10(100)  2.0    math.pow()  exponents  raises a number to a power  math.pow(2,3)  8.0    math.sqrt()  square root  square root of a number  math.sqrt(16)  4.0    ### Statistics         To round out this section, we will look at a couple of statistics functions. These functions are part of the Python Standard Library, but not part of the  math  module. To access Python's statistics functions, we need to import them from the  statistics  module using the statement  from statistics import mean, median, mode, stdev . Then the functions  mean ,  median ,  mode  and  stdev (standard deviation) can be used.    >>> from statistics import mean, median, mode, stdev\n\n>>> test_scores = [60, 83, 83, 91, 100]\n\n>>> mean(test_scores)\n83.4\n\n>>> median(test_scores)\n83\n\n>>> mode(test_scores)\n83\n\n>>> stdev(test_scores)\n14.842506526863986   Alternatively, we can import the entire  statistics  module using the statement  import statistics . Then to use the functions, we need to use the names  statistics.mean ,  statistics.median ,  statistics.mode , and  statistics.stdev . See below:  >>> import statistics\n\n>>> test_scores = [60, 83, 83, 91, 100 ]\n\n>>> statistics.mean(test_scores)\n83.4\n\n>>> statistics.median(test_scores)\n83\n\n>>> statistics.mode(test_scores)\n83\n\n>>> statistics.stdev(test_scores)\n14.842506526863986",
            "title": "Section Summary"
        },
        {
            "location": "/02-The-Python-REPL/02.01-Python-as-a-Calculator/#section-summary_3",
            "text": "The following functions are part of Python's  statistics  module:     statistics module function  name  description  example  result      mean()  mean  mean or average  mean([1,4,5,5])  3.75    median()  median  middle value  median([1,4,5,5])  4.5    mode()  mode  most often  mode([1,4,5,5])  5    stdev()  standard deviation  spread of data  stdev([1,4,5,5])  1.892    variance()  variance  variance of data  variance([1,4,5,5])  3.583",
            "title": "Section Summary"
        },
        {
            "location": "/02-The-Python-REPL/02.02-Variables/",
            "text": "Variables\n\n\nVariables are assigned in Python using the \n=\n equals sign also called the \nassignment operator\n. The statement:\n\n\na = 2\n\n\n\n\nAssigns the integer \n2\n to the variable \na\n.\n\n\n>>> a = 2\n>>> a\n2\n\n\n\n\nNote the assignment operator \n=\n(equals), is different from the logical comparison operator \n==\n (equivalent to).\n\n\n>>> a == 2\nTrue\n\n\n\n\nVariable names in Python must conform to the following rules:\n\n\n\n\nvariable names must start with a letter\n\n\nvariable names can only contain letters, numbers, and the underscore character \n_\n\n\nvariable names can not contain spaces\n\n\nvariable names are not enclosed in quotes or brackets\nThe following code lines show valid variable names:\n\n\n\n\nconstant = 4\n\nnew_variable = 'var'\n\nmy2rules = ['rule1','rule2']\n\nSQUARES = 4\n\n\n\n\nThe following code lines show invalid variable names:\n\n\na constant = 4\n\n3newVariables = [1, 2, 3]\n\n&sum = 4 + 4\n\n\n\n\nLet's solve the problem below at the Python REPL using variables.\n\n\nProblem\n\n\nThe Arrhenius relationship states:\n\n\n\n\n n = n_{v}e^{-Q_v/(RT)} \n\n\n n = n_{v}e^{-Q_v/(RT)} \n\n\n\n\nIn a system where \nn_v = 2.0 \\times 10^{-3}\nn_v = 2.0 \\times 10^{-3}\n, \nQ_v = 5\nQ_v = 5\n, \nR=3.18\nR=3.18\n, and \nT=293\nT=293\n, calculate \nn\nn\n.\n\n\nUse variables to assign a value to each one of the constants in the problem and calculate \nn\nn\n.\n\n\n>>> nv = 2.0e(-0.3)\n>>> Qv = 5\n>>> R = 3.18\n>>> T = 293\n>>> from math import exp\n>>> n = nv*exp(-1*Qv/(R*T))\n>>> n\n0.8079052775625613",
            "title": "Variables"
        },
        {
            "location": "/02-The-Python-REPL/02.02-Variables/#variables",
            "text": "Variables are assigned in Python using the  =  equals sign also called the  assignment operator . The statement:  a = 2  Assigns the integer  2  to the variable  a .  >>> a = 2\n>>> a\n2  Note the assignment operator  = (equals), is different from the logical comparison operator  ==  (equivalent to).  >>> a == 2\nTrue  Variable names in Python must conform to the following rules:   variable names must start with a letter  variable names can only contain letters, numbers, and the underscore character  _  variable names can not contain spaces  variable names are not enclosed in quotes or brackets\nThe following code lines show valid variable names:   constant = 4\n\nnew_variable = 'var'\n\nmy2rules = ['rule1','rule2']\n\nSQUARES = 4  The following code lines show invalid variable names:  a constant = 4\n\n3newVariables = [1, 2, 3]\n\n&sum = 4 + 4  Let's solve the problem below at the Python REPL using variables.",
            "title": "Variables"
        },
        {
            "location": "/02-The-Python-REPL/02.02-Variables/#problem",
            "text": "The Arrhenius relationship states:    n = n_{v}e^{-Q_v/(RT)}    n = n_{v}e^{-Q_v/(RT)}    In a system where  n_v = 2.0 \\times 10^{-3} n_v = 2.0 \\times 10^{-3} ,  Q_v = 5 Q_v = 5 ,  R=3.18 R=3.18 , and  T=293 T=293 , calculate  n n .  Use variables to assign a value to each one of the constants in the problem and calculate  n n .  >>> nv = 2.0e(-0.3)\n>>> Qv = 5\n>>> R = 3.18\n>>> T = 293\n>>> from math import exp\n>>> n = nv*exp(-1*Qv/(R*T))\n>>> n\n0.8079052775625613",
            "title": "Problem"
        },
        {
            "location": "/02-The-Python-REPL/02.03-String-Operations/",
            "text": "String Operations\n\n\nStrings are sequences of letters, numbers, punctuation, and spaces. Strings are defined at the Python REPL by enclosing letters, numbers, punctuation, and spaces in single quotes \n' '\n or double quotes \n\" \"\n. \n\n\n>>> word = \"Solution\"\n>>> another_word = \"another solution\"\n>>> third_word = \"3rd solution!\"\n\n\n\n\nIn Python, some operations we can do on strings include concatenation (combining strings), logical comparisons (comparing strings) and indexing (pulling specific characters out of strings).\n\n\nString Concatenation\n\n\nStrings can be \nconcatenated\n or combined using the \n+\n operator.\n\n\n>>> word = \"Solution\"\n>>> another_word = \"another solution\"\n>>> third_word = \"3rd solution!\"\n>>> all_words = word+another_word+third_word\n>>> all_words\n'Solutionanother solution3rd solution!'\n\n\n\n\nTo include spaces in the concatenated string, add a string which just contains one space \n\" \"\n in between each string you combine.\n\n\n>>> word = \"Solution\"\n>>> another_word = \"another solution\"\n>>> third_word = \"3rd solution!\"\n>>> all_words = word + \" \" + another_word + \" \" + third_word\n>>> all_words\n'Solution another solution 3rd solution!'\n\n\n\n\nString Comparison\n\n\nStrings can be compared using the comparison operator; the double equals sign \n==\n. Note the comparison operator (double equals \n==\n) is not the same as the assignment operator, a single equals sign \n=\n.\n\n\n>>> name1 = 'Gabby'\n>>> name2 = 'Gabby'\n>>> name1 == name2\nTrue\n\n\n\n\n>>> name1 = 'Gabby'\n>>> name2 = 'Maelle'\n>>> name1 == name2\nFalse\n\n\n\n\nCapital letters and lower case letters are different characters in Python. A string with the same letters, but different capitalization are not equivalent.\n\n\n>>> name1 = 'Gabby'\n>>> name2 = 'gabby'\n>>> name1 == name2\nFalse",
            "title": "String Operations"
        },
        {
            "location": "/02-The-Python-REPL/02.03-String-Operations/#string-operations",
            "text": "Strings are sequences of letters, numbers, punctuation, and spaces. Strings are defined at the Python REPL by enclosing letters, numbers, punctuation, and spaces in single quotes  ' '  or double quotes  \" \" .   >>> word = \"Solution\"\n>>> another_word = \"another solution\"\n>>> third_word = \"3rd solution!\"  In Python, some operations we can do on strings include concatenation (combining strings), logical comparisons (comparing strings) and indexing (pulling specific characters out of strings).",
            "title": "String Operations"
        },
        {
            "location": "/02-The-Python-REPL/02.03-String-Operations/#string-concatenation",
            "text": "Strings can be  concatenated  or combined using the  +  operator.  >>> word = \"Solution\"\n>>> another_word = \"another solution\"\n>>> third_word = \"3rd solution!\"\n>>> all_words = word+another_word+third_word\n>>> all_words\n'Solutionanother solution3rd solution!'  To include spaces in the concatenated string, add a string which just contains one space  \" \"  in between each string you combine.  >>> word = \"Solution\"\n>>> another_word = \"another solution\"\n>>> third_word = \"3rd solution!\"\n>>> all_words = word + \" \" + another_word + \" \" + third_word\n>>> all_words\n'Solution another solution 3rd solution!'",
            "title": "String Concatenation"
        },
        {
            "location": "/02-The-Python-REPL/02.03-String-Operations/#string-comparison",
            "text": "Strings can be compared using the comparison operator; the double equals sign  == . Note the comparison operator (double equals  == ) is not the same as the assignment operator, a single equals sign  = .  >>> name1 = 'Gabby'\n>>> name2 = 'Gabby'\n>>> name1 == name2\nTrue  >>> name1 = 'Gabby'\n>>> name2 = 'Maelle'\n>>> name1 == name2\nFalse  Capital letters and lower case letters are different characters in Python. A string with the same letters, but different capitalization are not equivalent.  >>> name1 = 'Gabby'\n>>> name2 = 'gabby'\n>>> name1 == name2\nFalse",
            "title": "String Comparison"
        },
        {
            "location": "/02-The-Python-REPL/02.04-Print-Statements/",
            "text": "Print Statements\n\n\nThe \nprint()\n function useful in Python. The value or expression inside of the parenthesis in the \nprint()\n function \"prints\" out to the REPL when the \nprint()\n function is called. \n\n\nAn example using the \nprint()\n function is below:\n\n\n>>> name = \"Gabby\"\n>>> print(\"Your name is: \")\nYour name is\n>>> print(name)\nGabby\n\n\n\n\nRemember that strings must be enclosed by quotation marks. The following command produces an error.\n\n\n>>> print(Gabby)\n\nNameError: name 'Gabby' is not defined\n\n\n\n\nThis error is corrected by surrounding the string \nGabby\n with quotation marks.\n\n\n>>> print(\"Gabby\")\nGabby\n\n\n\n\nExpressions passed to the \nprint()\n function are evaluated before they are printed out. For instance, the sum of two numbers can be shown with the \nprint()\n function.\n\n\n>>>print(1+2)\n3\n\n\n\n\nIf you want to see the text \n1+2\n, you need to define \n\"1+2\"\n as a string and print out the string \n\"1+2\"\n instead.\n\n\n>>>print(\"1+2\")\n1+2\n\n\n\n\nStrings can be concatenated (combined) inside of a \nprint()\n statement.\n\n\n>>> name = Gabby\n>>> print('Your name is: ' + name)\nYour name is Gabby\n\n\n\n\nThe \nprint()\n function also prints out individual expressions one after another with a space in between when the expressions are placed inside the \nprint()\n function and separated by a comma.\n\n\n>>> print(\"Name:\",\"Gabby\",\"Age\", 3+5)\nName: Gabby Age 8",
            "title": "Print Statements"
        },
        {
            "location": "/02-The-Python-REPL/02.04-Print-Statements/#print-statements",
            "text": "The  print()  function useful in Python. The value or expression inside of the parenthesis in the  print()  function \"prints\" out to the REPL when the  print()  function is called.   An example using the  print()  function is below:  >>> name = \"Gabby\"\n>>> print(\"Your name is: \")\nYour name is\n>>> print(name)\nGabby  Remember that strings must be enclosed by quotation marks. The following command produces an error.  >>> print(Gabby)\n\nNameError: name 'Gabby' is not defined  This error is corrected by surrounding the string  Gabby  with quotation marks.  >>> print(\"Gabby\")\nGabby  Expressions passed to the  print()  function are evaluated before they are printed out. For instance, the sum of two numbers can be shown with the  print()  function.  >>>print(1+2)\n3  If you want to see the text  1+2 , you need to define  \"1+2\"  as a string and print out the string  \"1+2\"  instead.  >>>print(\"1+2\")\n1+2  Strings can be concatenated (combined) inside of a  print()  statement.  >>> name = Gabby\n>>> print('Your name is: ' + name)\nYour name is Gabby  The  print()  function also prints out individual expressions one after another with a space in between when the expressions are placed inside the  print()  function and separated by a comma.  >>> print(\"Name:\",\"Gabby\",\"Age\", 3+5)\nName: Gabby Age 8",
            "title": "Print Statements"
        },
        {
            "location": "/02-The-Python-REPL/02.05-Summary/",
            "text": "Summary\n\n\nIn this chapter, you learned how to use the Python REPL, also called the Python prompt, to solve calculation problems. You learned how to do arithmetic, powers and logarithms, trigonometry and save values to variables. Operations on strings were introduced including concatenation, comparison, indexing, and slicing. In the last section of the chapter, Python's \nprint()\n function was introduced. As shown multiple times through this chapter, remember Python counting starts at \n0\n and ends at \nn-1\n.\n\n\nKey Terms and Concepts\n\n\nREPL\n\n\nPython REPL\n\n\nPython Prompt\n\n\nprompt\n\n\nPython Interpreter\n\n\ninterpreter\n\n\noperator\n\n\nmathematical operator\n\n\nimport\n\n\nmodule\n\n\nPython Standard Library\n\n\nStandard Library\n\n\nsyntax\n\n\nfunctions\n\n\ncommand line\n\n\nerror\n\n\nvariable\n\n\nassignment operator\n\n\ncomparison operator\n\n\nconcatenate\n\n\nequivalent\n\n\nindex\n\n\nindexing\n\n\nslicing\n\n\nSummary of Python Functions and Commands\n\n\nBelow is a summary of the functions and operators used in this chapter:\n\n\nArithmetic\n\n\n\n\n\n\n\n\nArithmetic Operators\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n+\n\n\naddition\n\n\n\n\n\n\n-\n\n\nsubtraction\n\n\n\n\n\n\n*\n\n\nmultiplication\n\n\n\n\n\n\n/\n\n\ndivision\n\n\n\n\n\n\n**\n\n\nexponents\n\n\n\n\n\n\n_\n\n\nanswer in memory\n\n\n\n\n\n\n\n\nTrigonometry\n\n\n\n\n\n\n\n\nTrig Function\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfrom math import *\n\n\n\n\n\n\n\n\nsin\n\n\nsine of angle in radians\n\n\n\n\n\n\ncos\n\n\ncosine of angle in radians\n\n\n\n\n\n\ntan\n\n\ntangent of angle in radians\n\n\n\n\n\n\npi\n\n\n\\pi\n\\pi\n\n\n\n\n\n\ndegrees\n\n\nconvert radians to degrees\n\n\n\n\n\n\nradians\n\n\nconvert degrees to radians\n\n\n\n\n\n\nasin\n\n\ninverse sine\n\n\n\n\n\n\nacos\n\n\ninverse cosine\n\n\n\n\n\n\natan\n\n\ninverse tangent\n\n\n\n\n\n\n\n\nLogarithms and Exponents\n\n\n\n\n\n\n\n\nLogarithms and Exponent Function\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfrom math import *\n\n\n\n\n\n\n\n\nlog\n\n\nlog base e, natural log\n\n\n\n\n\n\nlog10\n\n\nlog base 10\n\n\n\n\n\n\nexp\n\n\ne^{power}\ne^{power}\n\n\n\n\n\n\ne\n\n\nthe math constant \ne\ne\n\n\n\n\n\n\npow(x,y)\n\n\nx raised to the y power\n\n\n\n\n\n\nsqrt\n\n\nsquare root\n\n\n\n\n\n\n\n\nStatistics\n\n\n\n\n\n\n\n\nStatistical Function\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfrom statistics import *\n\n\n\n\n\n\n\n\nmean\n\n\nmean (average)\n\n\n\n\n\n\nmedian\n\n\nmedian (middle value)\n\n\n\n\n\n\nmode\n\n\n(most often)\n\n\n\n\n\n\nstdev\n\n\nstandard deviation of a sample\n\n\n\n\n\n\npstdev\n\n\nstandard deviation of a population",
            "title": "Summary"
        },
        {
            "location": "/02-The-Python-REPL/02.05-Summary/#summary",
            "text": "In this chapter, you learned how to use the Python REPL, also called the Python prompt, to solve calculation problems. You learned how to do arithmetic, powers and logarithms, trigonometry and save values to variables. Operations on strings were introduced including concatenation, comparison, indexing, and slicing. In the last section of the chapter, Python's  print()  function was introduced. As shown multiple times through this chapter, remember Python counting starts at  0  and ends at  n-1 .",
            "title": "Summary"
        },
        {
            "location": "/02-The-Python-REPL/02.05-Summary/#key-terms-and-concepts",
            "text": "REPL  Python REPL  Python Prompt  prompt  Python Interpreter  interpreter  operator  mathematical operator  import  module  Python Standard Library  Standard Library  syntax  functions  command line  error  variable  assignment operator  comparison operator  concatenate  equivalent  index  indexing  slicing",
            "title": "Key Terms and Concepts"
        },
        {
            "location": "/02-The-Python-REPL/02.05-Summary/#summary-of-python-functions-and-commands",
            "text": "Below is a summary of the functions and operators used in this chapter:",
            "title": "Summary of Python Functions and Commands"
        },
        {
            "location": "/02-The-Python-REPL/02.05-Summary/#arithmetic",
            "text": "Arithmetic Operators  Description      +  addition    -  subtraction    *  multiplication    /  division    **  exponents    _  answer in memory",
            "title": "Arithmetic"
        },
        {
            "location": "/02-The-Python-REPL/02.05-Summary/#trigonometry",
            "text": "Trig Function  Description      from math import *     sin  sine of angle in radians    cos  cosine of angle in radians    tan  tangent of angle in radians    pi  \\pi \\pi    degrees  convert radians to degrees    radians  convert degrees to radians    asin  inverse sine    acos  inverse cosine    atan  inverse tangent",
            "title": "Trigonometry"
        },
        {
            "location": "/02-The-Python-REPL/02.05-Summary/#logarithms-and-exponents",
            "text": "Logarithms and Exponent Function  Description      from math import *     log  log base e, natural log    log10  log base 10    exp  e^{power} e^{power}    e  the math constant  e e    pow(x,y)  x raised to the y power    sqrt  square root",
            "title": "Logarithms and Exponents"
        },
        {
            "location": "/02-The-Python-REPL/02.05-Summary/#statistics",
            "text": "Statistical Function  Description      from statistics import *     mean  mean (average)    median  median (middle value)    mode  (most often)    stdev  standard deviation of a sample    pstdev  standard deviation of a population",
            "title": "Statistics"
        },
        {
            "location": "/02-The-Python-REPL/02.06-Review-Questions/",
            "text": "Review Questions\n\n\nArithmetic\n\n\nQ02.01 \n2 + \\frac{1}{2}\n2 + \\frac{1}{2}\n\n\nQ02.02 \n4 \\times 2 + \\frac{2}{4}\n4 \\times 2 + \\frac{2}{4}\n\n\nQ02.03 \n\\frac{5}{2} \\times 3 + 4\n\\frac{5}{2} \\times 3 + 4\n\n\nQ02.04 \n4^2 + 3\n4^2 + 3\n\n\nQ02.05 \n\\sqrt{16}\n\\sqrt{16}\n\n\nQ02.06 \n3^{4-5}\n3^{4-5}\n\n\nQ02.07 \n\\frac{1+3+5}{2+4+6}\n\\frac{1+3+5}{2+4+6}\n\n\nQ02.08 \n1 - 2 + \\frac{9}{6} -3 + 5\n1 - 2 + \\frac{9}{6} -3 + 5\n\n\nQ02.09 \n(3 + 5 -2)^{2/3}\n(3 + 5 -2)^{2/3}\n\n\nQ02.10 \n\\frac{5+3}{2 \\times 5}\n\\frac{5+3}{2 \\times 5}\n\n\nQ02.11 \n\\sqrt{6^2 + 4}\n\\sqrt{6^2 + 4}\n\n\nQ02.12 \n1 + 9 \\times \\frac{8}{4^2} + 1^{3-4} \\times \\frac{1}{2.5}\n1 + 9 \\times \\frac{8}{4^2} + 1^{3-4} \\times \\frac{1}{2.5}\n\n\nString Indexing\n\n\nQ02.15 Write two lines of code that pulls out the first three letters of the word \"Problem\" \n\n\nQ02.16 Write two lines of code that pulls out the last four letters of the word \"Problem\"\n\n\nQ02.17 Write two lines of code that pulls out every other letter of the word \"Problem\" starting with the letter \"P\".\n\n\nQ02.18 Write two lines of code that rewrites the word \"Problem\" backwards\n\n\nTrigonometry\n\n\nQ2.30 Find the sine of \n0\n0\n, \n\\pi/4\n\\pi/4\n, \n\\pi/2\n\\pi/2\n, \n3\\pi/4\n3\\pi/4\n, and \n\\pi\n\\pi\n.\n\n\nQ2.31 Find the cosine of 0 degrees, 30 degrees, 60 degrees and 90 degrees.\n\n\nQ2.32 Find the tangent of 3/4, 5/12, and -8/6.\n\n\nQ2.33 Find the sin of 0.1 radians. Then find the arcsine of the result and see if it equals 0.1 radians.\n\n\nQ02.34 The U.S. Forest service can use trigonometry to find the height of trees. The height of a tree, \nh\nh\n is equal to the distance \nd\nd\n between an observer and the base of the tree multiplied by the tangent of the angle \n\\theta\n\\theta\n between looking straight along the ground and looking up at the top of tree according to the formula:\n\n\n\n\n h = d\\tan(\\theta) \n\n\n h = d\\tan(\\theta) \n\n\n\n\nIf a Forest Service ranger is 20 feet away from the base of a douglas fir tree and looks up at a 63 degree angle relative to straight ahead to see the top of the tree, what is the height of the douglas fir tree?\n\n\nQ02.35 The tangent of an angle is equal to the sine of the angle divided by the cosine of the angle. Make two calculations, one for the tangent of -29 degrees and another calculation for the sine of -29 degrees divided by the cosine of -29 degrees. Do you observe the output of both calculations to be the same?\n\n\nQ02.36 A simple model of water level based on tides (assuming high tide is at midnight) is:\n\n\n\n\n h = (4.8)\\sin(\\pi/6)(t+3)+5.1 \n\n\n h = (4.8)\\sin(\\pi/6)(t+3)+5.1 \n\n\n\n\nWhere \nh\nh\n is the water height and \nt\nt\n is the number of hours since midnight. Using this model, calculate the water level \nh\nh\n  at 6am (\nt=6\nt=6\n hours since midnight).\n\n\nQ02.37 The x-component of a force \nF_x\nF_x\n is equal to the magnitude of the force \n|\\vec{F}|\n|\\vec{F}|\n multiplied by the cosine of the angle \n\\theta\n\\theta\n of the force relative to the positive x-axis. \n\n\n\n\n F_x = |\\vec{F}|\\cos(\\theta) \n\n\n F_x = |\\vec{F}|\\cos(\\theta) \n\n\n\n\nIf the magnitude of a force \n|\\vec{F}| = 12.4\n|\\vec{F}| = 12.4\n and the force acts at \n\\theta=110\n\\theta=110\n degrees relative to the positive x-axis, what is the x-component of the force \nF_x\nF_x\n?\n\n\nQ02.37 The distance \nd\nd\n a free-thrown projectile travels is dependent on the projectile's initial velocity \nv_0\nv_0\n, the acceleration due to gravity \ng=9.81 m/s^2\ng=9.81 m/s^2\n and the angle \n\\theta\n\\theta\n at which the project is launched according to:\n\n\n\n\n d = \\frac{{v_0}^2}{g} \\sin(2\\theta) \n\n\n d = \\frac{{v_0}^2}{g} \\sin(2\\theta) \n\n\n\n\nIf a projectile is launched at a 12 degree angle with an initial velocity of 150 m/s, how far will the projectile travel?\n\n\nLogarithms and Exponents\n\n\nQ02.41 Show that the natural log of Euler's number, \n\\ln(e)\n\\ln(e)\n, is equal to one.\n\n\nQ02.42 Logarithms turn multiplication into addition. Complete both of the calculations below to see if the expressions are equal to each other:\n\n\n\n\n \\log(87.1 \\times 210 \\times 10^{3}) \n\n\n \\log(87.1 \\times 210 \\times 10^{3}) \n\n\n\n\n\n\n \\log(87.1) + \\log(210) + \\log(10^{3}) \n\n\n \\log(87.1) + \\log(210) + \\log(10^{3}) \n\n\n\n\nQ02.43 Logarithms turn exponents into multiplication and multiplication into addition. Complete both of the calculations below to see if the expressions are equal. Remember, Python has a couple log functions including \nlog()\n and \nlog10()\n.\n\n\n\n\n \\log(6.02 \\times 10^{23}) \n\n\n \\log(6.02 \\times 10^{23}) \n\n\n\n\n\n\n 23+\\log(6.02) \n\n\n 23+\\log(6.02) \n\n\n\n\nQ02.44 Python's math module has the natural log (\n\\ln\n\\ln\n) function \nmath.log()\n and the log (base 10) function \nmath.log10()\n. If you want to find the log with an arbitrary base, \nb\nb\n, of a number \nn\nn\n, you can use a ratio of natural logarithms (log base \ne\ne\n) according to:\n\n\n\n\n \\log_b(n) = \\frac{\\ln(n)}{\\ln(b)} \n\n\n \\log_b(n) = \\frac{\\ln(n)}{\\ln(b)} \n\n\n\n\nCalculate the base 4 logarithm of \n3.9 \\times 10^{-9}\n3.9 \\times 10^{-9}\n\n\n\n\n log_{4}(3.9 \\times 10^{-9}) \n\n\n log_{4}(3.9 \\times 10^{-9}) \n\n\n\n\nQ02.45 The magnitude of a vector \n|\\vec{v}|\n|\\vec{v}|\n is equal to the square root of the sum of the squares of the vector's components \nv_x\nv_x\n, \nv_y\nv_y\n, and \nv_z\nv_z\n according to:\n\n\n\n\n |\\vec{v}| = \\sqrt{{v_x}^2 + {v_y}^2 + {v_z}^2} \n\n\n |\\vec{v}| = \\sqrt{{v_x}^2 + {v_y}^2 + {v_z}^2} \n\n\n\n\nWhat is the magnitude of a vector \n\\vec{v}\n\\vec{v}\n that has components \nv_x = 76.3\nv_x = 76.3\n, \nv_y = 70.9\nv_y = 70.9\n, \nv_z = 93.6\nv_z = 93.6\n ? \n\n\nQ02.46 Moore's Law, a relationship that states the number of transistors that fit on a microchip doubles every two years can be modeled as:\n\n\n\n\n P_n = P_0 \\times 2^n \n\n\n P_n = P_0 \\times 2^n \n\n\n\n\nWhere \nP_0\nP_0\n is the original number of transistors on a microchip and \nP_n\nP_n\n is the number of transistors on a microchip after \nn\nn\n number of years since the original microchip.  If the original microchip has 1000 transistors, how many transistors were projected to be on a microchip 40 years later?\n\n\nVariables in Calculations\n\n\nQ02.71 \na = 2\na = 2\n, \nb = 3\nb = 3\n, calculate \n\\frac{4}{5}(a^2 - b^3)\n\\frac{4}{5}(a^2 - b^3)\n\n\nQ02.72 The area of a circle, \na\na\n, is dependent on the circle's radius, \nr\nr\n, according to \na=\\pi r^2\na=\\pi r^2\n. What is the area of a circle with radius \nr=4\nr=4\n?\n\n\nQ02.73 The area of a circle, \na\na\n, is dependent on the circle's diameter, \nd\nd\n, according to \na=\\pi (\\frac{d}{2})^2\na=\\pi (\\frac{d}{2})^2\n. What is the area of a circle with diameter \nd=6\nd=6\n?\n\n\nQ02.74 The volume of a sphere, \nv\nv\n, is dependent on the sphere's radius, \nr\nr\n, according to \nv=(\\frac{4}{3})\\pi r^3\nv=(\\frac{4}{3})\\pi r^3\n. What is the volume of a sphere with radius \nr=1.5\nr=1.5\n?\n\n\nQ02.75 The volume of a cylinder, \nv\nv\n, is dependent on the cylinder's radius, \nr\nr\n, and height, \nh\nh\n, according to \nv=\\pi r^2 h\nv=\\pi r^2 h\n. What is the volume of a cylinder with radius \nr=5\nr=5\n and height \nh=10\nh=10\n ?\n\n\nQ02.76 The surface area of a sphere, \na_s\na_s\n is related to the sphere's radius, \nr\nr\n, according to \na_s=4\\pi r^2\na_s=4\\pi r^2\n. What is the surface area \na_s\na_s\n of a sphere with radius \nr=2.5\nr=2.5\n?\n\n\nQ02.77 The general equation for the distance, \nd\nd\n, that a free falling body travels (neglecting air resistance) is \nd = \\frac{1}{2}gt^2\nd = \\frac{1}{2}gt^2\n, where \ng\ng\n is the acceleration due to gravity and \nt\nt\n is the fall time. Assume the acceleration due to gravity \ng = 9.81\ng = 9.81\n. How far (what distance) will a ball fall in time \nt = 12\nt = 12\n?  \n\n\nQ02.78 The general equation for the fall time, \nt\nt\n, that a free falling body takes (neglecting air resistance) to cover a distance, \nd\nd\n is \nt = \\sqrt{\\frac{d}{0.5g}}\nt = \\sqrt{\\frac{d}{0.5g}}\n, where \ng\ng\n is the acceleration due to gravity. Assume the acceleration due to gravity \ng = 9.81\ng = 9.81\n. How long (what time) will it take a base jumper to fall distance \nd = 2000\nd = 2000\n?\n\n\nQ02.79 The value of an investment \nv\nv\n compounded annually at an interest rate of \nr\\%\nr\\%\n after \nn\nn\n years is dependent on the original investment \nP\nP\n according to:\n\n\n\n\n v = P(1 + r/100)^n \n\n\n v = P(1 + r/100)^n \n\n\n\n\nIf \nP=1000\nP=1000\n dollars at a rate of \nr=7\\%\nr=7\\%\n, what will the value \nv\nv\n be after \nn=20\nn=20\n years? \n\n\nQ02.80 The original principal \nP\nP\n needed to produce a total savings of value \nv\nv\n at a rate of \nr\\%\nr\\%\n over \nn\nn\n years is calculated by:\n\n\n\n\n P = \\frac{v}{(1+r/100)^n} \n\n\n P = \\frac{v}{(1+r/100)^n} \n\n\n\n\nWhat is the principal \nP\nP\n needed to save one million dollars at a rate \nr=10\\%\nr=10\\%\n over \nn=40\nn=40\n years?\n\n\nQ02.81 Electrical power \nP\nP\n is related to current \nI\nI\n and resistance \nR\nR\n according to \nP = I^2R\nP = I^2R\n. An electrical load with a resistance \nR = 10,000\nR = 10,000\n running at a current \nI=0.200\nI=0.200\n draws how much power \nP\nP\n ?\n\n\nErrors, Explanations, and Solutions\n\n\nFor each of the problems below, run the line of code. Then explain the error in your words. Give an explanation more specific than \ninvalid syntax\n. Then suggest and run a line of code that fixes the error.\n\n\nQ02.91 \n\n\n>>> 9 x 10\n\n\n\n\nQ02.92\n\n\n>>> 1 1/2 + 2 2/3\n\n\n\n\nQ02.93\n\n\n>>> 3cos(35)\n\n\n\n\nQ02.94\n\n\n>>> 8.31 x 10^9\n\n\n\n\nQ02.95\n\n\n>>> (2+3)**(2-3e(4)\n\n\n\n\nQ02.96\n\n\n>>> 7% + 8% + 9%\n\n\n\n\nQ02.97\n\n\n>>> (-)54.2 + 9.2\n\n\n\n\nQ02.98\n\n\n>>> '5' / '4'\n\n\n\n\nQ02.99\n\n\n>>> ln(e) - log(10)",
            "title": "Review Questions"
        },
        {
            "location": "/02-The-Python-REPL/02.06-Review-Questions/#review-questions",
            "text": "",
            "title": "Review Questions"
        },
        {
            "location": "/02-The-Python-REPL/02.06-Review-Questions/#arithmetic",
            "text": "Q02.01  2 + \\frac{1}{2} 2 + \\frac{1}{2}  Q02.02  4 \\times 2 + \\frac{2}{4} 4 \\times 2 + \\frac{2}{4}  Q02.03  \\frac{5}{2} \\times 3 + 4 \\frac{5}{2} \\times 3 + 4  Q02.04  4^2 + 3 4^2 + 3  Q02.05  \\sqrt{16} \\sqrt{16}  Q02.06  3^{4-5} 3^{4-5}  Q02.07  \\frac{1+3+5}{2+4+6} \\frac{1+3+5}{2+4+6}  Q02.08  1 - 2 + \\frac{9}{6} -3 + 5 1 - 2 + \\frac{9}{6} -3 + 5  Q02.09  (3 + 5 -2)^{2/3} (3 + 5 -2)^{2/3}  Q02.10  \\frac{5+3}{2 \\times 5} \\frac{5+3}{2 \\times 5}  Q02.11  \\sqrt{6^2 + 4} \\sqrt{6^2 + 4}  Q02.12  1 + 9 \\times \\frac{8}{4^2} + 1^{3-4} \\times \\frac{1}{2.5} 1 + 9 \\times \\frac{8}{4^2} + 1^{3-4} \\times \\frac{1}{2.5}",
            "title": "Arithmetic"
        },
        {
            "location": "/02-The-Python-REPL/02.06-Review-Questions/#string-indexing",
            "text": "Q02.15 Write two lines of code that pulls out the first three letters of the word \"Problem\"   Q02.16 Write two lines of code that pulls out the last four letters of the word \"Problem\"  Q02.17 Write two lines of code that pulls out every other letter of the word \"Problem\" starting with the letter \"P\".  Q02.18 Write two lines of code that rewrites the word \"Problem\" backwards",
            "title": "String Indexing"
        },
        {
            "location": "/02-The-Python-REPL/02.06-Review-Questions/#trigonometry",
            "text": "Q2.30 Find the sine of  0 0 ,  \\pi/4 \\pi/4 ,  \\pi/2 \\pi/2 ,  3\\pi/4 3\\pi/4 , and  \\pi \\pi .  Q2.31 Find the cosine of 0 degrees, 30 degrees, 60 degrees and 90 degrees.  Q2.32 Find the tangent of 3/4, 5/12, and -8/6.  Q2.33 Find the sin of 0.1 radians. Then find the arcsine of the result and see if it equals 0.1 radians.  Q02.34 The U.S. Forest service can use trigonometry to find the height of trees. The height of a tree,  h h  is equal to the distance  d d  between an observer and the base of the tree multiplied by the tangent of the angle  \\theta \\theta  between looking straight along the ground and looking up at the top of tree according to the formula:    h = d\\tan(\\theta)    h = d\\tan(\\theta)    If a Forest Service ranger is 20 feet away from the base of a douglas fir tree and looks up at a 63 degree angle relative to straight ahead to see the top of the tree, what is the height of the douglas fir tree?  Q02.35 The tangent of an angle is equal to the sine of the angle divided by the cosine of the angle. Make two calculations, one for the tangent of -29 degrees and another calculation for the sine of -29 degrees divided by the cosine of -29 degrees. Do you observe the output of both calculations to be the same?  Q02.36 A simple model of water level based on tides (assuming high tide is at midnight) is:    h = (4.8)\\sin(\\pi/6)(t+3)+5.1    h = (4.8)\\sin(\\pi/6)(t+3)+5.1    Where  h h  is the water height and  t t  is the number of hours since midnight. Using this model, calculate the water level  h h   at 6am ( t=6 t=6  hours since midnight).  Q02.37 The x-component of a force  F_x F_x  is equal to the magnitude of the force  |\\vec{F}| |\\vec{F}|  multiplied by the cosine of the angle  \\theta \\theta  of the force relative to the positive x-axis.     F_x = |\\vec{F}|\\cos(\\theta)    F_x = |\\vec{F}|\\cos(\\theta)    If the magnitude of a force  |\\vec{F}| = 12.4 |\\vec{F}| = 12.4  and the force acts at  \\theta=110 \\theta=110  degrees relative to the positive x-axis, what is the x-component of the force  F_x F_x ?  Q02.37 The distance  d d  a free-thrown projectile travels is dependent on the projectile's initial velocity  v_0 v_0 , the acceleration due to gravity  g=9.81 m/s^2 g=9.81 m/s^2  and the angle  \\theta \\theta  at which the project is launched according to:    d = \\frac{{v_0}^2}{g} \\sin(2\\theta)    d = \\frac{{v_0}^2}{g} \\sin(2\\theta)    If a projectile is launched at a 12 degree angle with an initial velocity of 150 m/s, how far will the projectile travel?",
            "title": "Trigonometry"
        },
        {
            "location": "/02-The-Python-REPL/02.06-Review-Questions/#logarithms-and-exponents",
            "text": "Q02.41 Show that the natural log of Euler's number,  \\ln(e) \\ln(e) , is equal to one.  Q02.42 Logarithms turn multiplication into addition. Complete both of the calculations below to see if the expressions are equal to each other:    \\log(87.1 \\times 210 \\times 10^{3})    \\log(87.1 \\times 210 \\times 10^{3})      \\log(87.1) + \\log(210) + \\log(10^{3})    \\log(87.1) + \\log(210) + \\log(10^{3})    Q02.43 Logarithms turn exponents into multiplication and multiplication into addition. Complete both of the calculations below to see if the expressions are equal. Remember, Python has a couple log functions including  log()  and  log10() .    \\log(6.02 \\times 10^{23})    \\log(6.02 \\times 10^{23})      23+\\log(6.02)    23+\\log(6.02)    Q02.44 Python's math module has the natural log ( \\ln \\ln ) function  math.log()  and the log (base 10) function  math.log10() . If you want to find the log with an arbitrary base,  b b , of a number  n n , you can use a ratio of natural logarithms (log base  e e ) according to:    \\log_b(n) = \\frac{\\ln(n)}{\\ln(b)}    \\log_b(n) = \\frac{\\ln(n)}{\\ln(b)}    Calculate the base 4 logarithm of  3.9 \\times 10^{-9} 3.9 \\times 10^{-9}    log_{4}(3.9 \\times 10^{-9})    log_{4}(3.9 \\times 10^{-9})    Q02.45 The magnitude of a vector  |\\vec{v}| |\\vec{v}|  is equal to the square root of the sum of the squares of the vector's components  v_x v_x ,  v_y v_y , and  v_z v_z  according to:    |\\vec{v}| = \\sqrt{{v_x}^2 + {v_y}^2 + {v_z}^2}    |\\vec{v}| = \\sqrt{{v_x}^2 + {v_y}^2 + {v_z}^2}    What is the magnitude of a vector  \\vec{v} \\vec{v}  that has components  v_x = 76.3 v_x = 76.3 ,  v_y = 70.9 v_y = 70.9 ,  v_z = 93.6 v_z = 93.6  ?   Q02.46 Moore's Law, a relationship that states the number of transistors that fit on a microchip doubles every two years can be modeled as:    P_n = P_0 \\times 2^n    P_n = P_0 \\times 2^n    Where  P_0 P_0  is the original number of transistors on a microchip and  P_n P_n  is the number of transistors on a microchip after  n n  number of years since the original microchip.  If the original microchip has 1000 transistors, how many transistors were projected to be on a microchip 40 years later?",
            "title": "Logarithms and Exponents"
        },
        {
            "location": "/02-The-Python-REPL/02.06-Review-Questions/#variables-in-calculations",
            "text": "Q02.71  a = 2 a = 2 ,  b = 3 b = 3 , calculate  \\frac{4}{5}(a^2 - b^3) \\frac{4}{5}(a^2 - b^3)  Q02.72 The area of a circle,  a a , is dependent on the circle's radius,  r r , according to  a=\\pi r^2 a=\\pi r^2 . What is the area of a circle with radius  r=4 r=4 ?  Q02.73 The area of a circle,  a a , is dependent on the circle's diameter,  d d , according to  a=\\pi (\\frac{d}{2})^2 a=\\pi (\\frac{d}{2})^2 . What is the area of a circle with diameter  d=6 d=6 ?  Q02.74 The volume of a sphere,  v v , is dependent on the sphere's radius,  r r , according to  v=(\\frac{4}{3})\\pi r^3 v=(\\frac{4}{3})\\pi r^3 . What is the volume of a sphere with radius  r=1.5 r=1.5 ?  Q02.75 The volume of a cylinder,  v v , is dependent on the cylinder's radius,  r r , and height,  h h , according to  v=\\pi r^2 h v=\\pi r^2 h . What is the volume of a cylinder with radius  r=5 r=5  and height  h=10 h=10  ?  Q02.76 The surface area of a sphere,  a_s a_s  is related to the sphere's radius,  r r , according to  a_s=4\\pi r^2 a_s=4\\pi r^2 . What is the surface area  a_s a_s  of a sphere with radius  r=2.5 r=2.5 ?  Q02.77 The general equation for the distance,  d d , that a free falling body travels (neglecting air resistance) is  d = \\frac{1}{2}gt^2 d = \\frac{1}{2}gt^2 , where  g g  is the acceleration due to gravity and  t t  is the fall time. Assume the acceleration due to gravity  g = 9.81 g = 9.81 . How far (what distance) will a ball fall in time  t = 12 t = 12 ?    Q02.78 The general equation for the fall time,  t t , that a free falling body takes (neglecting air resistance) to cover a distance,  d d  is  t = \\sqrt{\\frac{d}{0.5g}} t = \\sqrt{\\frac{d}{0.5g}} , where  g g  is the acceleration due to gravity. Assume the acceleration due to gravity  g = 9.81 g = 9.81 . How long (what time) will it take a base jumper to fall distance  d = 2000 d = 2000 ?  Q02.79 The value of an investment  v v  compounded annually at an interest rate of  r\\% r\\%  after  n n  years is dependent on the original investment  P P  according to:    v = P(1 + r/100)^n    v = P(1 + r/100)^n    If  P=1000 P=1000  dollars at a rate of  r=7\\% r=7\\% , what will the value  v v  be after  n=20 n=20  years?   Q02.80 The original principal  P P  needed to produce a total savings of value  v v  at a rate of  r\\% r\\%  over  n n  years is calculated by:    P = \\frac{v}{(1+r/100)^n}    P = \\frac{v}{(1+r/100)^n}    What is the principal  P P  needed to save one million dollars at a rate  r=10\\% r=10\\%  over  n=40 n=40  years?  Q02.81 Electrical power  P P  is related to current  I I  and resistance  R R  according to  P = I^2R P = I^2R . An electrical load with a resistance  R = 10,000 R = 10,000  running at a current  I=0.200 I=0.200  draws how much power  P P  ?",
            "title": "Variables in Calculations"
        },
        {
            "location": "/02-The-Python-REPL/02.06-Review-Questions/#errors-explanations-and-solutions",
            "text": "For each of the problems below, run the line of code. Then explain the error in your words. Give an explanation more specific than  invalid syntax . Then suggest and run a line of code that fixes the error.  Q02.91   >>> 9 x 10  Q02.92  >>> 1 1/2 + 2 2/3  Q02.93  >>> 3cos(35)  Q02.94  >>> 8.31 x 10^9  Q02.95  >>> (2+3)**(2-3e(4)  Q02.96  >>> 7% + 8% + 9%  Q02.97  >>> (-)54.2 + 9.2  Q02.98  >>> '5' / '4'  Q02.99  >>> ln(e) - log(10)",
            "title": "Errors, Explanations, and Solutions"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.00-Introduction/",
            "text": "Data Types and Variables\n\n\nIntroduction\n\n\nPython has many built-in data types. These include integers, floats, booleans, strings, and lists. \n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nExplain the difference between Python's built-in data types\n\n\n\n\n\n\nDefine variables with the assignment operator \n=\n\n\n\n\n\n\nCreate variables with different data types\n\n\n\n\n\n\nUse Python's \ntype()\n function to determine an object's type\n\n\n\n\n\n\nComplete logical evaluations of variables\n\n\n\n\n\n\nConvert variables from one data type to another",
            "title": "Introduction"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.00-Introduction/#data-types-and-variables",
            "text": "",
            "title": "Data Types and Variables"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.00-Introduction/#introduction",
            "text": "Python has many built-in data types. These include integers, floats, booleans, strings, and lists.   By the end of this chapter you will be able to:    Explain the difference between Python's built-in data types    Define variables with the assignment operator  =    Create variables with different data types    Use Python's  type()  function to determine an object's type    Complete logical evaluations of variables    Convert variables from one data type to another",
            "title": "Introduction"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.01-Numeric-Data-Types/",
            "text": "Numeric Data Types\n\n\nPython has many useful built-in data types. Python variables can store different types of data. A variable's data type is created dynamically, without the need to explicitly define a data type when the variable is created.\n\n\nIt is useful for problem solvers to understand a couple of Python's core data types in order to write well-constructed code. \n\n\nA review of variable assignment in Python\n\n\nRemember from the previous chapter that variables in Python are defined with the assignment operator, the equals sign \n=\n. Recall that to define a variable in Python, the variable name is written first, then the assignment operator \n=\n followed by a value or expression.\n\n\nThe general syntax to assign a value to variable name is below:\n\n\nvariable_name = value\n````\n\nVariable names in Python must adhere to the following rules:\n\n * variable names must start with a letter\n * variable names can only contain letters, numbers and the underscore character ```_```\n * variable names can not contain spaces\n * variable names are not enclosed in quotes or brackets\n\n\nBelow is a discussion of a few different built-in data types in Python.\n### Integers\n\n_Integers_ are one of the Python data types. An integer is a whole number, negative, positive or zero. In Python, integer variables are defined by simply assigning a whole number to a variable. Python's ```type()``` function can be used to determine the data type of a variable.\n\n```python\n>>> a = 5\n>>> type(a)\n<class 'int'>\n\n\n\n\nThe output \n<class 'int'>\n indicates the variable \na\n is an integer. Integers can be negative or zero.\n\n\n>>> b = -2\n>>> type(b)\n<class 'int'>\n>>> z = 0\n>>> type(z)\n<class 'int'>\n\n\n\n\nFloating Point Numbers\n\n\nFloating point numbers or \nfloats\n are another Python data type. Floats are decimals, positive, negative and zero. Floats can also be numbers in scientific notation which contain exponents.\n\n\nBoth a lower case \ne\n or an upper case \nE\n can be used to define floats in scientific notation. In Python, a float can be defined using a decimal point \n.\n when a variable is assigned.\n\n\n>>> c = 6.2\n>>> type(c)\n<class 'float'>\n>>> d = -0.03\n>>> type(d)\n<class 'float'>\n>>> Na = 6.02e23\n>>> Na\n6.02e+23\n>>> type(Na)\n<class 'float'>\n\n\n\n\nTo define a variable as a float instead of an integer, even if the variable is assigned a whole number, a trailing decimal point \n.\n is used. Note the difference when a decimal point \n.\n comes after a whole number:\n\n\n>>> g = 5\n>>> type(g)\n<class 'int'>\n>>> g = 5.\n>>> type(g)\n<class 'float'>\n\n\n\n\nComplex Numbers\n\n\nAnother useful numeric data type for problem solvers is the \ncomplex number\n data type. A complex number is defined in Python using a real component \n+\n an imaginary component \nj\n. The letter \nj\n must be used to denote the imaginary component. Using the letter \ni\n to define a complex number in Python returns an error. Note how imaginary numbers add to integers and floats.\n\n\n>>> comp = 4 + 2j\n>>> type(comp)\n<class 'complex'>\n\n>>> comp2 = 4 + 2i\n              ^\nSyntaxError: invalid syntax\n\n\n\n\n\n\n>>> intgr = 3\n>>> type(intgr)\n<class 'int'>\n\n>>> comp_sum = comp + intgr\n>>> print(comp_sum)\n(7+2j)\n\n>>> flt = 2.1\n>>> comp_sum = comp + flt\n>>> print(comp_sum)\n(6.1+2j)",
            "title": "Numeric Data Types"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.01-Numeric-Data-Types/#numeric-data-types",
            "text": "Python has many useful built-in data types. Python variables can store different types of data. A variable's data type is created dynamically, without the need to explicitly define a data type when the variable is created.  It is useful for problem solvers to understand a couple of Python's core data types in order to write well-constructed code.",
            "title": "Numeric Data Types"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.01-Numeric-Data-Types/#a-review-of-variable-assignment-in-python",
            "text": "Remember from the previous chapter that variables in Python are defined with the assignment operator, the equals sign  = . Recall that to define a variable in Python, the variable name is written first, then the assignment operator  =  followed by a value or expression.  The general syntax to assign a value to variable name is below:  variable_name = value\n````\n\nVariable names in Python must adhere to the following rules:\n\n * variable names must start with a letter\n * variable names can only contain letters, numbers and the underscore character ```_```\n * variable names can not contain spaces\n * variable names are not enclosed in quotes or brackets\n\n\nBelow is a discussion of a few different built-in data types in Python.\n### Integers\n\n_Integers_ are one of the Python data types. An integer is a whole number, negative, positive or zero. In Python, integer variables are defined by simply assigning a whole number to a variable. Python's ```type()``` function can be used to determine the data type of a variable.\n\n```python\n>>> a = 5\n>>> type(a)\n<class 'int'>  The output  <class 'int'>  indicates the variable  a  is an integer. Integers can be negative or zero.  >>> b = -2\n>>> type(b)\n<class 'int'>\n>>> z = 0\n>>> type(z)\n<class 'int'>",
            "title": "A review of variable assignment in Python"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.01-Numeric-Data-Types/#floating-point-numbers",
            "text": "Floating point numbers or  floats  are another Python data type. Floats are decimals, positive, negative and zero. Floats can also be numbers in scientific notation which contain exponents.  Both a lower case  e  or an upper case  E  can be used to define floats in scientific notation. In Python, a float can be defined using a decimal point  .  when a variable is assigned.  >>> c = 6.2\n>>> type(c)\n<class 'float'>\n>>> d = -0.03\n>>> type(d)\n<class 'float'>\n>>> Na = 6.02e23\n>>> Na\n6.02e+23\n>>> type(Na)\n<class 'float'>  To define a variable as a float instead of an integer, even if the variable is assigned a whole number, a trailing decimal point  .  is used. Note the difference when a decimal point  .  comes after a whole number:  >>> g = 5\n>>> type(g)\n<class 'int'>\n>>> g = 5.\n>>> type(g)\n<class 'float'>",
            "title": "Floating Point Numbers"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.01-Numeric-Data-Types/#complex-numbers",
            "text": "Another useful numeric data type for problem solvers is the  complex number  data type. A complex number is defined in Python using a real component  +  an imaginary component  j . The letter  j  must be used to denote the imaginary component. Using the letter  i  to define a complex number in Python returns an error. Note how imaginary numbers add to integers and floats.  >>> comp = 4 + 2j\n>>> type(comp)\n<class 'complex'>\n\n>>> comp2 = 4 + 2i\n              ^\nSyntaxError: invalid syntax   >>> intgr = 3\n>>> type(intgr)\n<class 'int'>\n\n>>> comp_sum = comp + intgr\n>>> print(comp_sum)\n(7+2j)\n\n>>> flt = 2.1\n>>> comp_sum = comp + flt\n>>> print(comp_sum)\n(6.1+2j)",
            "title": "Complex Numbers"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.02-Boolean-Data-Type/",
            "text": "Boolean Data Type\n\n\nThe \nboolean\n data type is either True or False. In Python, boolean variables are defined by the \nTrue\n and \nFalse\n keywords. \n\n\n>>> a = True\n>>> type(a)\n<class 'bool'>\n\n>>> b = False\n>>> type(b)\n<class 'bool'>\n\n\n\n\nThe output \n<class 'bool'>\n indicates the variable is a boolean data type.\n\n\nNote that \nTrue\n and \nFalse\n must have an Upper Case first letter. Using a lowercase \ntrue\n returns an error.\n\n\n>>> c = true\nTraceback (most recent call last):\n  File \"<input>\", line 1, in <module>\nNameError: name 'true' is not defined\n\n>>> d = false\nTraceback (most recent call last):\n  File \"<input>\", line 1, in <module>\nNameError: name 'false' is not defined\n\n\n\n\nIntegers and Floats as Booleans\n\n\nIntegers and floating point numbers can be converted to the boolean data type using Python's \nbool()\n function. An int, float or complex number set to zero returns as \nFalse\n. An integer, float or complex number set to any other number, positive or negative, returns as \nTrue\n.\n\n\n>>> zero_int = 0\n>>> bool(zero_int)\nFalse\n\n\n\n\n>>> pos_int = 1\n>>> bool(pos_int)\nTrue\n\n\n\n\n>>> neg_flt = -5.1\n>>> bool(neg_flt)\nTrue\n\n\n\n\nBoolean Arithmetic\n\n\nBoolean arithmetic\n is the arithmetic of true and false logic. A boolean or logical value can either be \nTrue\n or \nFalse\n.  Boolean values can be manipulated and combined with \nboolean operators\n. Boolean operators include \nand\n, \nor\n, and \nnot\n.\n\n\nThe common boolean operators in Python are below:\n\n\n\n\nor\n\n\nand\n\n\nnot\n\n\n==\n (equivalent)\n\n\n!=\n (not equivalent)\n\n\n\n\nIn the code section below, two variables are assigned the boolean values \nTrue\n and \nFalse\n. Then these boolean values are combined and manipulated with boolean operators.\n\n\n>>> A = True\n>>> B = False\n\n\n\n\n>>> A or B\nTrue\n\n\n\n\n>>> A and B\nFalse\n\n\n\n\n>>> not A\nFalse\n\n\n\n\n>>> not B\nTrue\n\n\n\n\n>>> A == B\nFalse\n\n\n\n\n>>> A != B\nTrue\n\n\n\n\nBoolean operators such as \nand\n, \nor\n, and \nnot\n can be combined with parenthesis to make compound \nboolean expressions\n. \n\n\n>>> C = False\n>>> A or (C and B)\nTrue\n>>> (A and B) or C\nFalse\n\n\n\n\nA summary of boolean arithmetic and boolean operators is shown in the table below:\n\n\n\n\n\n\n\n\nA\n\n\nB\n\n\nnot A\n\n\nnot B\n\n\nA == B\n\n\nA =! B\n\n\nA or B\n\n\nA and B\n\n\n\n\n\n\n\n\n\n\nT\n\n\nF\n\n\nF\n\n\nT\n\n\nF\n\n\nT\n\n\nT\n\n\nF\n\n\n\n\n\n\nF\n\n\nT\n\n\nT\n\n\nF\n\n\nF\n\n\nT\n\n\nT\n\n\nF\n\n\n\n\n\n\nT\n\n\nT\n\n\nF\n\n\nF\n\n\nT\n\n\nF\n\n\nT\n\n\nT\n\n\n\n\n\n\nF\n\n\nF\n\n\nT\n\n\nT\n\n\nT\n\n\nF\n\n\nF\n\n\nF",
            "title": "Boolean Data Type"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.02-Boolean-Data-Type/#boolean-data-type",
            "text": "The  boolean  data type is either True or False. In Python, boolean variables are defined by the  True  and  False  keywords.   >>> a = True\n>>> type(a)\n<class 'bool'>\n\n>>> b = False\n>>> type(b)\n<class 'bool'>  The output  <class 'bool'>  indicates the variable is a boolean data type.  Note that  True  and  False  must have an Upper Case first letter. Using a lowercase  true  returns an error.  >>> c = true\nTraceback (most recent call last):\n  File \"<input>\", line 1, in <module>\nNameError: name 'true' is not defined\n\n>>> d = false\nTraceback (most recent call last):\n  File \"<input>\", line 1, in <module>\nNameError: name 'false' is not defined",
            "title": "Boolean Data Type"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.02-Boolean-Data-Type/#integers-and-floats-as-booleans",
            "text": "Integers and floating point numbers can be converted to the boolean data type using Python's  bool()  function. An int, float or complex number set to zero returns as  False . An integer, float or complex number set to any other number, positive or negative, returns as  True .  >>> zero_int = 0\n>>> bool(zero_int)\nFalse  >>> pos_int = 1\n>>> bool(pos_int)\nTrue  >>> neg_flt = -5.1\n>>> bool(neg_flt)\nTrue",
            "title": "Integers and Floats as Booleans"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.02-Boolean-Data-Type/#boolean-arithmetic",
            "text": "Boolean arithmetic  is the arithmetic of true and false logic. A boolean or logical value can either be  True  or  False .  Boolean values can be manipulated and combined with  boolean operators . Boolean operators include  and ,  or , and  not .  The common boolean operators in Python are below:   or  and  not  ==  (equivalent)  !=  (not equivalent)   In the code section below, two variables are assigned the boolean values  True  and  False . Then these boolean values are combined and manipulated with boolean operators.  >>> A = True\n>>> B = False  >>> A or B\nTrue  >>> A and B\nFalse  >>> not A\nFalse  >>> not B\nTrue  >>> A == B\nFalse  >>> A != B\nTrue  Boolean operators such as  and ,  or , and  not  can be combined with parenthesis to make compound  boolean expressions .   >>> C = False\n>>> A or (C and B)\nTrue\n>>> (A and B) or C\nFalse  A summary of boolean arithmetic and boolean operators is shown in the table below:     A  B  not A  not B  A == B  A =! B  A or B  A and B      T  F  F  T  F  T  T  F    F  T  T  F  F  T  T  F    T  T  F  F  T  F  T  T    F  F  T  T  T  F  F  F",
            "title": "Boolean Arithmetic"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.03-Strings/",
            "text": "Strings\n\n\nAnother built-in Python data type is \nstrings\n. Strings are sequences of letters, numbers, symbols, and spaces. In Python, strings can be almost any length and can contain spaces. String variables are assigned in Python using quotation marks \n'   '\n or \n\" \"\n. In Python, strings can be defined by single quotation marks \n' '\n or double quotation marks \n\" \"\n. \n\n\nPython strings can contain blank spaces. A blank space is a valid character in Python string.\n\n\n>>> string = 'z'\n>>>> type(string)\n<class 'str'>\n\n>>> string = 'Engineers'\n>>> type(string)\n<class 'str'>\n\n\n\n\nThe output \n<class 'str'>\n indicates the variable is a string.\n\n\nNumbers as Strings\n\n\nNumbers and decimals can be defined as strings too. If a decimal number is defined using quotes \n'   '\n, the number is saved as a string rather than as a float. Integers defined using quotes will become strings as well if surrounded by quotes.\n\n\n>>> num = '5.2'\n>>> type(num)\n<class 'str'>\n\n>>> num = '2'\n>>> type(num)\n<class 'str'>\n\n\n\n\nStrings as Boolean Values\n\n\nStrings can be converted to boolean values (converted to True or False). The empty string \n\"\"\n returns as \nFalse\n. All other strings convert to \nTrue\n. \n\n\n>>> name = \"Gabby\"\n>>> bool(name)\nTrue\n\n\n\n\n>>> empty = \"\"\n>>> bool(empty)\nFalse\n\n\n\n\nNote that a string which contains just one space (\n\" \"\n) is not empty. It contains the space character. Therefore a string made up of just one space converts to \nTrue\n.\n\n\n>>> space = \" \"\n>>> bool(space)\nTrue\n\n\n\n\nString Indexing\n\n\nString indexing is the process of pulling out specific characters from a string in a particular order. In Python, strings are indexed using square brackets \n[ ]\n. An important point to remember: \nPython counting starts at \n0\n and ends at \nn-1\n. \n\n\nConsider the word below.\n\n\nSolution\n\n\n\n\nThe letter \nS\n is at the zero index, the letter \no\n is at the first index. The last letter of the word \nSolution\n is \nn\n. \nn\n is in the seventh index. Even though the word \nSolution\n has eight letters, the last letter is in the seventh index. This is because Python indexing starts at \n0\n and ends at \nn-1\n.\n\n\n\n\n>>> word = 'Solution'\n>>> word[0]\n'S'\n\n\n\n\n>>> word[1]\n'o'\n\n\n\n\n>>> word[7]\n'n'\n\n\n\n\nIf the eighth index of the word \nSolution\n is called, an error is returned.\n\n\n>>> word[8]\n\nIndexError: string index out of range\n\n\n\n\nNegative Indexing\n\n\nPlacing a negative number inside of the square brackets pulls a character out of a string starting from the end of the string.\n\n\n>>> word[-1]\n'n'\n\n\n\n\n>>> word[-2]\n'o'\n\n\n\n\n\n\nString Slicing\n\n\nA colon on the inside of the square brackets between two numbers indicates \nthrough\n. If the index \n[0:3]\n is called, the characters at positions \n0\n through \n3\n are returned. Remember Python counting starts at \n0\n and ends at \nn-1\n. So \n[0:3]\n indicates the first through third letters, which are indexes \n0\n to \n2\n.\n\n\n>>> word[0:3]\n'Sol'\n\n\n\n\nA colon by itself on the inside of square brackets indicates \nall\n.\n\n\n>>> word[:]\n'Solution'\n\n\n\n\nWhen three numbers are separated by two colons inside of square brackets, the numbers represent \nstart\n : \nstop\n : \nstep\n. But remember that Python counting starts at \n0\n and ends at \nn-1\n. \n\n\n>>> word[0:7:2]  #start:stop:step\n'Slto'\n\n\n\n\nWhen two colons are used inside of square brackets, and less than three numbers are specified, the missing numbers are set to their \"defaults\". The default start is \n0\n, the default stop is \nn-1\n, and the default step is \n1\n. \n\n\nThe two code lines below produce the same output since \n0\n is the default start and \n7\n (n-1) is the default stop. Both lines of code use a step of \n2\n.\n\n\n>>> word[0:7:2]\n'Slto'\n\n\n\n\n>>> word[::2]\n'Slto'\n\n\n\n\nThe characters that make up a string can be reversed by using the default start and stop values and specifying a step of \n-1\n.\n\n\n>>> word[::-1]\n'noituloS'",
            "title": "Strings"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.03-Strings/#strings",
            "text": "Another built-in Python data type is  strings . Strings are sequences of letters, numbers, symbols, and spaces. In Python, strings can be almost any length and can contain spaces. String variables are assigned in Python using quotation marks  '   '  or  \" \" . In Python, strings can be defined by single quotation marks  ' '  or double quotation marks  \" \" .   Python strings can contain blank spaces. A blank space is a valid character in Python string.  >>> string = 'z'\n>>>> type(string)\n<class 'str'>\n\n>>> string = 'Engineers'\n>>> type(string)\n<class 'str'>  The output  <class 'str'>  indicates the variable is a string.",
            "title": "Strings"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.03-Strings/#numbers-as-strings",
            "text": "Numbers and decimals can be defined as strings too. If a decimal number is defined using quotes  '   ' , the number is saved as a string rather than as a float. Integers defined using quotes will become strings as well if surrounded by quotes.  >>> num = '5.2'\n>>> type(num)\n<class 'str'>\n\n>>> num = '2'\n>>> type(num)\n<class 'str'>",
            "title": "Numbers as Strings"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.03-Strings/#strings-as-boolean-values",
            "text": "Strings can be converted to boolean values (converted to True or False). The empty string  \"\"  returns as  False . All other strings convert to  True .   >>> name = \"Gabby\"\n>>> bool(name)\nTrue  >>> empty = \"\"\n>>> bool(empty)\nFalse  Note that a string which contains just one space ( \" \" ) is not empty. It contains the space character. Therefore a string made up of just one space converts to  True .  >>> space = \" \"\n>>> bool(space)\nTrue",
            "title": "Strings as Boolean Values"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.03-Strings/#string-indexing",
            "text": "String indexing is the process of pulling out specific characters from a string in a particular order. In Python, strings are indexed using square brackets  [ ] . An important point to remember:  Python counting starts at  0  and ends at  n-1 .   Consider the word below.  Solution  The letter  S  is at the zero index, the letter  o  is at the first index. The last letter of the word  Solution  is  n .  n  is in the seventh index. Even though the word  Solution  has eight letters, the last letter is in the seventh index. This is because Python indexing starts at  0  and ends at  n-1 .   >>> word = 'Solution'\n>>> word[0]\n'S'  >>> word[1]\n'o'  >>> word[7]\n'n'  If the eighth index of the word  Solution  is called, an error is returned.  >>> word[8]\n\nIndexError: string index out of range",
            "title": "String Indexing"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.03-Strings/#negative-indexing",
            "text": "Placing a negative number inside of the square brackets pulls a character out of a string starting from the end of the string.  >>> word[-1]\n'n'  >>> word[-2]\n'o'",
            "title": "Negative Indexing"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.03-Strings/#string-slicing",
            "text": "A colon on the inside of the square brackets between two numbers indicates  through . If the index  [0:3]  is called, the characters at positions  0  through  3  are returned. Remember Python counting starts at  0  and ends at  n-1 . So  [0:3]  indicates the first through third letters, which are indexes  0  to  2 .  >>> word[0:3]\n'Sol'  A colon by itself on the inside of square brackets indicates  all .  >>> word[:]\n'Solution'  When three numbers are separated by two colons inside of square brackets, the numbers represent  start  :  stop  :  step . But remember that Python counting starts at  0  and ends at  n-1 .   >>> word[0:7:2]  #start:stop:step\n'Slto'  When two colons are used inside of square brackets, and less than three numbers are specified, the missing numbers are set to their \"defaults\". The default start is  0 , the default stop is  n-1 , and the default step is  1 .   The two code lines below produce the same output since  0  is the default start and  7  (n-1) is the default stop. Both lines of code use a step of  2 .  >>> word[0:7:2]\n'Slto'  >>> word[::2]\n'Slto'  The characters that make up a string can be reversed by using the default start and stop values and specifying a step of  -1 .  >>> word[::-1]\n'noituloS'",
            "title": "String Slicing"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.04-Lists/",
            "text": "Lists\n\n\nA list is a data structure in Python that can contain multiple elements of any of the other data type. A list is defined with square brackets \n[ ]\n and commas \n,\n between elements.\n\n\n>>> lst = [ 1, 2, 3 ]\n>>> type(lst)\nlist\n\n>>> lst = [ 1, 5.3, '3rd_Element']\n>>> type(lst)\nlist\n\n\n\n\nIndexing Lists\n\n\nIndividual elements of a list can be accessed or \nindexed\n using bracket \n[ ]\n notation. Note that Python lists start with the index zero, not the index 1. For example:\n\n\n>>> lst = ['statics', 'strengths', 'dynamics']\n>>> lst[0]\n'statics'\n\n>>> lst[1]\n'strengths'\n\n>>> lst[2]\n'dynamics'\n\n\n\n\n\n\nRemember!\n Python lists start indexing at [0] not at [1]. To call the elements in a list with 3 values use: lst[0], lst[1], lst[2].\n\n\n\n\nColons \n:\n are used inside the square brackets to denote \nall\n\n\n>>> lst = [2, 4, 6]\n>>> lst[:]\n[2, 4, 6]\n\n\n\n\nNegative numbers can be used as indexes to call the last number of elements in the list\n\n\n>>> lst = [2, 4, 6]\n>>> lst[-1]\n6\n\n\n\n\nThe colon operator can also be used to denote \nall upto\n and \nfrom thru end\n.\n\n\n>>> lst = [2, 4, 6]\n>>> lst[:2]\n[2, 4]\n\n\n\nlst = [2, 4, 6]\nlst[2:]\n[6]\n\n\n\n\nThe colon operator can also be used to denote \nstart : end + 1\n. Note that the indexing here in not inclusive. \nlst[1:3]\n will return the 2nd element, and 3rd element but not the fourth even though \n3\n is used in the index.\n\n\n\n\nRemember!\n Python indexing is not inclusive. The last element called in an index will not be returned.",
            "title": "Lists"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.04-Lists/#lists",
            "text": "A list is a data structure in Python that can contain multiple elements of any of the other data type. A list is defined with square brackets  [ ]  and commas  ,  between elements.  >>> lst = [ 1, 2, 3 ]\n>>> type(lst)\nlist\n\n>>> lst = [ 1, 5.3, '3rd_Element']\n>>> type(lst)\nlist",
            "title": "Lists"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.04-Lists/#indexing-lists",
            "text": "Individual elements of a list can be accessed or  indexed  using bracket  [ ]  notation. Note that Python lists start with the index zero, not the index 1. For example:  >>> lst = ['statics', 'strengths', 'dynamics']\n>>> lst[0]\n'statics'\n\n>>> lst[1]\n'strengths'\n\n>>> lst[2]\n'dynamics'   Remember!  Python lists start indexing at [0] not at [1]. To call the elements in a list with 3 values use: lst[0], lst[1], lst[2].  Colons  :  are used inside the square brackets to denote  all  >>> lst = [2, 4, 6]\n>>> lst[:]\n[2, 4, 6]  Negative numbers can be used as indexes to call the last number of elements in the list  >>> lst = [2, 4, 6]\n>>> lst[-1]\n6  The colon operator can also be used to denote  all upto  and  from thru end .  >>> lst = [2, 4, 6]\n>>> lst[:2]\n[2, 4]\n\n\n\nlst = [2, 4, 6]\nlst[2:]\n[6]  The colon operator can also be used to denote  start : end + 1 . Note that the indexing here in not inclusive.  lst[1:3]  will return the 2nd element, and 3rd element but not the fourth even though  3  is used in the index.   Remember!  Python indexing is not inclusive. The last element called in an index will not be returned.",
            "title": "Indexing Lists"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.05-Dictionaries-and-Tuples/",
            "text": "Dictionaries and Tuples\n\n\nBesides lists, Python has two additional data structures that can store multiple objects. These data structures are \ndictionaries\n and \ntuples\n.\n\n\nDictionaries\n\n\nDictionaries are made up of key: value pairs. In Python, lists are organized and accessed based on position. Dictionaries in Python are organized and accessed using keys and values. The location of a pair of keys and values stored in a Python dictionary is irrelevant.\n\n\nDictionaries are defined in Python with curly braces \n{  }\n. Commas separate the key-value pairs that make up the dictionary. Each key-value pair is related by a colon \n:\n.\n\n\nLet's store the ages of two people in a dictionary. The two people are \nGabby\n and \nMaelle\n. \nGabby\n is \n8\n and \nMaelle\n is \n5\n. Note the name \nGabby\n is a string and the age \n8\n is an integer.\n\n\n>>> age_dict = {\"Gabby\": 8 , \"Maelle\": 5}\n>>> type(age_dict)\ndict\n\n\n\n\nThe values stored in a dictionary are called and assigned using the following syntax:\n\n\ndict_name[key] = value\n\n\n\n\n>>> age_dict = {\"Gabby\": 8 , \"Maelle\": 5}\n>>> age_dict[\"Gabby\"]\n8\n\n\n\n\nWe can add a new person to our \nage_dict\n with the following command:\n\n\n>>> age_dict = {\"Gabby\": 8 , \"Maelle\": 5}\n\n>>> age_dict[\"Peter\"]= 40\n>>> age_dict\n{'Gabby': 8, 'Maelle': 5, 'Peter': 40}\n\n\n\n\nDictionaries can be converted to lists by calling the \n.items()\n, \n.keys()\n, and \n.values()\n methods. \n\n\n>>> age_dict = {\"Gabby\": 8 , \"Maelle\": 5}\n\n>>> whole_list = list(age_dict.items())\n>>> whole_list\n[('Gabby', 8), ('Maelle', 5)]\n\n>>> name_list = list(age_dict.keys())\n>>> name_list\n['Gabby', 'Maelle']\n\n>>> age_list = list(age_dict.values())\n>>> age_list\n[8, 5]\n\n\n\n\nItems can be removed from dictionaries by calling the \n.pop()\n method. The dictionary key (and that key's associated value) supplied to the \n.pop()\n method is removed from the dictionary.\n\n\n>>> age_dict = {\"Gabby\": 8 , \"Maelle\": 5}\n>>> age_dict.pop(\"Gabby\")\n>>> age_dict\n{'Maelle': 5}\n\n\n\n\nTuples\n\n\nTuples are immutable lists. Elements of a list can be modified, but elements in a tuple can only be accessed, not modified. The name \ntuple\n does not mean that only two values can be stored in this data structure.\n\n\nTuples are defined in Python by enclosing elements in parenthesis \n( )\n and separating elements with commas. The command below creates a tuple containing the numbers \n3\n, \n4\n, and \n5\n.\n\n\n>>> t_var = (3,4,5)\n>>> t_var\n(3, 4, 5)\n\n\n\n\nNote how the elements of a list can be modified: \n\n\n>>> l_var = [3,4,5]  # a list\n>>> l_var[0]= 8\n>>> l_var\n[8, 4, 5]\n\n\n\n\nThe elements of a tuple can not be modified. If you try to assign a new value to one of the elements in a tuple, an error is returned.\n\n\n>>> t_var = (3,4,5)  # a tuple\n>>> t_var[0]= 8\n>>> t_var\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n\nTo create a tuple that just contains one numerical value, the number must be followed by a comma. Without a comma, the variable is defined as a number.\n\n\n>>> num = (5)\n>>> type(num)\nint\n\n\n\n\nWhen a comma is included after the number, the variable is defined as a tuple.\n\n\n>>> t_var = (5,)\n>>> type(t_var)\ntuple",
            "title": "Dictionaries and Tuples"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.05-Dictionaries-and-Tuples/#dictionaries-and-tuples",
            "text": "Besides lists, Python has two additional data structures that can store multiple objects. These data structures are  dictionaries  and  tuples .",
            "title": "Dictionaries and Tuples"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.05-Dictionaries-and-Tuples/#dictionaries",
            "text": "Dictionaries are made up of key: value pairs. In Python, lists are organized and accessed based on position. Dictionaries in Python are organized and accessed using keys and values. The location of a pair of keys and values stored in a Python dictionary is irrelevant.  Dictionaries are defined in Python with curly braces  {  } . Commas separate the key-value pairs that make up the dictionary. Each key-value pair is related by a colon  : .  Let's store the ages of two people in a dictionary. The two people are  Gabby  and  Maelle .  Gabby  is  8  and  Maelle  is  5 . Note the name  Gabby  is a string and the age  8  is an integer.  >>> age_dict = {\"Gabby\": 8 , \"Maelle\": 5}\n>>> type(age_dict)\ndict  The values stored in a dictionary are called and assigned using the following syntax:  dict_name[key] = value  >>> age_dict = {\"Gabby\": 8 , \"Maelle\": 5}\n>>> age_dict[\"Gabby\"]\n8  We can add a new person to our  age_dict  with the following command:  >>> age_dict = {\"Gabby\": 8 , \"Maelle\": 5}\n\n>>> age_dict[\"Peter\"]= 40\n>>> age_dict\n{'Gabby': 8, 'Maelle': 5, 'Peter': 40}  Dictionaries can be converted to lists by calling the  .items() ,  .keys() , and  .values()  methods.   >>> age_dict = {\"Gabby\": 8 , \"Maelle\": 5}\n\n>>> whole_list = list(age_dict.items())\n>>> whole_list\n[('Gabby', 8), ('Maelle', 5)]\n\n>>> name_list = list(age_dict.keys())\n>>> name_list\n['Gabby', 'Maelle']\n\n>>> age_list = list(age_dict.values())\n>>> age_list\n[8, 5]  Items can be removed from dictionaries by calling the  .pop()  method. The dictionary key (and that key's associated value) supplied to the  .pop()  method is removed from the dictionary.  >>> age_dict = {\"Gabby\": 8 , \"Maelle\": 5}\n>>> age_dict.pop(\"Gabby\")\n>>> age_dict\n{'Maelle': 5}",
            "title": "Dictionaries"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.05-Dictionaries-and-Tuples/#tuples",
            "text": "Tuples are immutable lists. Elements of a list can be modified, but elements in a tuple can only be accessed, not modified. The name  tuple  does not mean that only two values can be stored in this data structure.  Tuples are defined in Python by enclosing elements in parenthesis  ( )  and separating elements with commas. The command below creates a tuple containing the numbers  3 ,  4 , and  5 .  >>> t_var = (3,4,5)\n>>> t_var\n(3, 4, 5)  Note how the elements of a list can be modified:   >>> l_var = [3,4,5]  # a list\n>>> l_var[0]= 8\n>>> l_var\n[8, 4, 5]  The elements of a tuple can not be modified. If you try to assign a new value to one of the elements in a tuple, an error is returned.  >>> t_var = (3,4,5)  # a tuple\n>>> t_var[0]= 8\n>>> t_var\n\nTypeError: 'tuple' object does not support item assignment  To create a tuple that just contains one numerical value, the number must be followed by a comma. Without a comma, the variable is defined as a number.  >>> num = (5)\n>>> type(num)\nint  When a comma is included after the number, the variable is defined as a tuple.  >>> t_var = (5,)\n>>> type(t_var)\ntuple",
            "title": "Tuples"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.06-Summary/",
            "text": "Summary\n\n\nIn this chapter, we reviewed a couple of different data types built-in to Python. These data types include the numeric data types: integers, floats, and complex numbers. The string data type is composed of letters, numbers, spaces, and punctuation. Python also has container data types which can store many values. These container data types are lists, tuples, and dictionaries.\n\n\nKey Terms and Concepts\n\n\ndata type\n\n\nvariable\n\n\nassignment operator\n\n\ninteger\n\n\nint\n\n\nwhole number\n\n\nfloating point number\n\n\nfloat\n\n\nscientific notation\n\n\ncomplex number\n\n\nstring\n\n\nboolean\n\n\nbool\n\n\nboolean arithmetic\n\n\nboolean operators\n\n\nor\n\n\nand\n\n\nnot\n\n\ndata structure\n\n\ndictionary\n\n\ntuple\n\n\nlist\n\n\nindex\n\n\nindexing\n\n\nSummary of Python Functions and Commands\n\n\nBuilt-in Data Types\n\n\n\n\n\n\n\n\nPython Object\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nint\n\n\ninteger\n\n\n\n\n\n\nfloat\n\n\nfloating point number\n\n\n\n\n\n\nbool\n\n\nboolean value: True or False\n\n\n\n\n\n\ncomplex\n\n\ncomplex number, real and imaginary components\n\n\n\n\n\n\nstr\n\n\nstring, sequence of letters, numbers and symbols\n\n\n\n\n\n\nlist\n\n\na Python list\n\n\n\n\n\n\ndict\n\n\na Python dictionary\n\n\n\n\n\n\ntuple\n\n\nan immutable list\n\n\n\n\n\n\n\n\nPython Functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype()\n\n\noutputs a variable or objects data type\n\n\n\n\n\n\nlen()\n\n\nreturn the length of a string\n\n\n\n\n\n\nstr()\n\n\nconverts a \nfloat\n or \nint\n into a \nstr\n (string)\n\n\n\n\n\n\nint()\n\n\nconverts a \nfloat\n or \nstr\n into an \nint\n (integer)\n\n\n\n\n\n\nfloat()\n\n\nconverts an \nint\n or \nstr\n into an \nfloat\n (floating point number)\n\n\n\n\n\n\n\n\nPython List Operators\n\n\n\n\n\n\n\n\nOperator\n\n\nDescription\n\n\nExample\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n[ ]\n\n\nindexing\n\n\nlst[1]\n\n\n4\n\n\n\n\n\n\n:\n\n\nstart\n\n\nlst[:2]\n\n\n[ 2, 4 ]\n\n\n\n\n\n\n:\n\n\nend\n\n\nlst[2:]\n\n\n[ 6, 8 ]\n\n\n\n\n\n\n:\n\n\nthrough\n\n\nlst[0:3]\n\n\n[ 2, 4, 6 ]\n\n\n\n\n\n\n:\n\n\nstart, step, end+1\n\n\nlst[0:5:2]\n\n\n[2, 6]",
            "title": "Summary"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.06-Summary/#summary",
            "text": "In this chapter, we reviewed a couple of different data types built-in to Python. These data types include the numeric data types: integers, floats, and complex numbers. The string data type is composed of letters, numbers, spaces, and punctuation. Python also has container data types which can store many values. These container data types are lists, tuples, and dictionaries.",
            "title": "Summary"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.06-Summary/#key-terms-and-concepts",
            "text": "data type  variable  assignment operator  integer  int  whole number  floating point number  float  scientific notation  complex number  string  boolean  bool  boolean arithmetic  boolean operators  or  and  not  data structure  dictionary  tuple  list  index  indexing",
            "title": "Key Terms and Concepts"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.06-Summary/#summary-of-python-functions-and-commands",
            "text": "",
            "title": "Summary of Python Functions and Commands"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.06-Summary/#built-in-data-types",
            "text": "Python Object  Description      int  integer    float  floating point number    bool  boolean value: True or False    complex  complex number, real and imaginary components    str  string, sequence of letters, numbers and symbols    list  a Python list    dict  a Python dictionary    tuple  an immutable list",
            "title": "Built-in Data Types"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.06-Summary/#python-functions",
            "text": "Function  Description      type()  outputs a variable or objects data type    len()  return the length of a string    str()  converts a  float  or  int  into a  str  (string)    int()  converts a  float  or  str  into an  int  (integer)    float()  converts an  int  or  str  into an  float  (floating point number)",
            "title": "Python Functions"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.06-Summary/#python-list-operators",
            "text": "Operator  Description  Example  Result      [ ]  indexing  lst[1]  4    :  start  lst[:2]  [ 2, 4 ]    :  end  lst[2:]  [ 6, 8 ]    :  through  lst[0:3]  [ 2, 4, 6 ]    :  start, step, end+1  lst[0:5:2]  [2, 6]",
            "title": "Python List Operators"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.07-Review-Questions/",
            "text": "Review Questions\n\n\nDetermine the Data Type\n\n\nQ03.01 Find the data type of \na\n if \na=9\n\n\nQ03.02 Find the data type of \na\n if \na=9.\n\n\nQ03.03 Find the data type of \na\n if \na='9.'\n\n\nQ03.04 Find the data type of \na\n if \na=(9)\n\n\nQ03.05 Find the data type of \na\n if \na=False\n\n\nQ03.06 Find the data type of \na\n if \na=[1,2,3]\n\n\nQ03.07 Find the data type of \na\n if \na=(1,2,3)\n\n\nQ03.08 Find the data type of \na\n if \na={'key'=9}\n\n\nQ03.08 Find the data type of \na\n if \na=1 + 9j\n\n\nNumeric Data Types\n\n\nQ03.10 Set \na=1\n and \nb=2\n. What data type is \na/b\n?\n\n\nQ03.11 Set \na=1\n and \nb=2\n. What data type is \na*b\n?\n\n\nQ03.12 What is \n5.1\n plus \n0 + 3j\n?\n\n\nQ03.13 What floating point number converts to the boolean \nFalse?\n Show this in code and the \nbool()\n function.\n\n\nQ03.14 Create the floating point number \n0.001 \\times 10^{-0.2}\n0.001 \\times 10^{-0.2}\n and assign it to the variable \nb\n.\n\n\nQ03.15 Show that \n3e2\n is the same as \n3E2\n with the comparison operator \n==\n\n\nBooleans\n\n\nQ03.20 Predict the output if the lines \nn=5\n and \n(n<3) and (n<7)\n are run. Then run the the two lines of code.\n\n\nQ03.21 Predict the output if the lines of code below are run. Then run the code.\n\n\n>>> ans='Yes'\n>>> ans=='Yes' or ans=='No'\n\n\n\n\nQ03.22 Pick a number \nn\n to make the following statement \nTrue\n: \n(2<n) or (n==2+n)\nThen run the code to show your number works.\n\n\nQ03.23 Pick a number \nn\n to make the following statement \nFalse\n: \nnot (n<6) and (n<4)\n Then run the code to show your number works.\n\n\nQ03.24 Create the floating point number \n0.001 \\times 10^{-0.2}\n0.001 \\times 10^{-0.2}\n and assign it to the variable \nb\n.\n\n\nQ03.25 Show that \n(n>5) and (n<=10)\n is equivalent to \n5 < n <= 10\n using the two different numbers for \nn\n.\n\n\nQ03.26 Show that \n(n<5) or (n>=10)\n is equivalent to \nnot(5 =< n < 10)\n using the two different numbers for \nn\n.\n\n\nStrings\n\n\nQ03.30 Define a string that contains the word \nProblem\nProblem\n.\n\n\nQ03.31 Define one string as the word \nProblem\nProblem\n and define another string as the word \nSolving\nSolving\n. Combine these two strings to make the statement \nProblem \\ Solving\nProblem \\ Solving\n.\n\n\nQ03.32 (a) Define a string that contains the number \n8\n8\n and a string that contains the number \n5\n5\n. Combine these two strings with the plus operator \n+\n.\n\n\n(b) Define an integer as the number \n8\n8\n and an integer as the number \n5\n5\n and combine these two integers with the plus operator \n+\n\n\n(c) Explain why the output from (a) was different from the output of (b)\n\n\n(d) Multiply the strings \n8\n8\n and \n5\n5\n with the multiplication operator \n*\n.  Compare the output to multiplying the integers \n8\n8\n and \n5\n5\n. Why is the out different?\n\n\nQ03.33 Complete the following index and slicing operations after the string \nword = 'Problem'\n is defined.\n\n\n(a) Pull out the letter \nP\nP\n from \nword\n\n\n(b) Pull out the first three letters \nPro\nPro\n from \nword\n\n\n(c) Pull out the second through the fourth letters \nrob\nrob\n from \nword\n\n\n(d) Pull out every other letter from \nword\n starting with \nP\nP\n\n\n(e) Use indexing and slicing to ouput \nword\n backwards to produce \nmelborP\nmelborP\n.\n\n\nQ03.34 Define the strings below:\n\n\n(a) Define a string \na\n as \ncoffee\n,  define a string \nb\n as \nit's\n and define a string \nc\n as \nhot!\n and string \nd\n as , (a comma).\n\n\n(b) Combine the strings \na\n, \nb\n and \nc\n and \nd\n to produce the string \ncoffee, it's hot\n (notice the comma)\n\n\n(c) Print out the statement \nshe said \"coffee, it's hot\"\n\n\nQ03.35 Create the string \npath\n with the value \nC:\\Users\\Gabby\\Documents\n\n\nQ03.36 Convert the string \nProblem\n to the list \n['P','r','o','b','l','e','m']\n without rewriting the list from scratch.\n\n\nQ03.37 Use the string \nover board\n and slicing to get the words:\n\n\n(a) \nover\n\n\n(b) \nboard\n\n\n(c) \noar\n\n\nQ03.38 Use the string \nrotten tomatoes\n and slicing to get the words:\n\n\n(a) \nto\n\n\n(b) \nno\n\n\n(c) \nten\n\n\n(d) \noat\n\n\nLists\n\n\nQ03.40 Create a list that contains the numbers \n1\n1\n, \n2.9 \\times 10^8\n2.9 \\times 10^8\n, and the word \ngame\ngame\n.\n\n\nQ03.41 Create a list that contains the words \nproblem\nproblem\n, \nsolving\nsolving\n, \nwith\nwith\n, \npython\npython\n.\n\n\nQ03.42 Create a list with one value, the number \n6\n6\n. Convert the list to a boolean with the \nbool()\n function.\n\n\nQ03.43 Create an empty list. Convert the empty list to a boolean with the \nbool()\n function.\n\n\nQ03.44 Create a list with the letters \nC\nC\n, \nD\nD\n, and \nR\nR\n. Pull the letters \nC\nC\n and \nD\nD\n out of your list with indexing.\n\n\nQ03.45 Create a list with the numbers \n1\n1\n to \n10\n10\n (counting by ones). Use slicing to pull out the number \n5\n5\n from the list.\n\n\nQ03.46 Create a list with the numbers \n1\n1\n to \n10\n10\n (counting by ones). Use list slicing to pull out all of the numbers \n5\n5\n or less.\n\n\nQ03.47 Create a list with the numbers \n1\n1\n to \n10\n10\n (counting by ones). Use list slicing to pull out all of the numbers \n5\n5\n and greater.\n\n\nQ03.48 Create a list with the numbers \n1\n1\n to \n10\n10\n (counting by ones). Use slicing to pull out all of the even numbers from the list.\n\n\nQ03.49 Create a list with the numbers \n1\n1\n to \n10\n10\n (counting by ones). Use slicing to pull out every odd number from the list.\n\n\nQ03.50 Create a list with the numbers \n1\n1\n to \n10\n10\n (counting by ones). Use slicing to return the list in reverse order (the returned list starts with \n10\n10\n and ends with \n1\n1\n),\n\n\nDictionaries\n\n\nQ03.60 Create a dictionary called \ncapitals\n that contains the states and state capitals. Include \nWashington\n, capital \nOlympia\n and \nOregon\n, capital \nSalem\n.\n\n\nQ03.61 Create a dictionary called \ncapitals\n that contains the states and state capitals. Include \nWashington\n, capital \nOlympia\n and \nOregon\n, capital \nSalem\n. In the line after the dictionary is created add the state \nNew York\n, capital \nAlbany\n.\n\n\nQ03.62 Create a dictionary \nnumbers = {'one':1, 'two':2, 'three':3}\n. Pull out the number \n'2'\n by calling the key \n'two'\n.\n\n\nQ03.63 Create a dictionary \ncolors = {'red':' #FF0000', 'green':'#008000', 'blue':'#0000FF'}\n. Pull out all the keys and add them to a list called \ncolors_list\n with the \n.keys()\n method.\n\n\nQ03.64 Create a dictionary \ncolors = {'red':' #FF0000', 'green':'#008000', 'blue':'#0000FF'}\n. Pull out all the values and add them to a list called \ncolors_hex\n with the \n.values()\n method.\n\n\nQ03.65 Create a dictionary \ncolors = {'red':' #FF0000', 'green':'#008000', 'blue':'#0000FF'}\n. Pull out all the items from the dictionary and add them to a list called \ncolor_items\n with the \n.items()\n method.\n\n\nQ03.66 Create a dictionary \ngroups = {'solo':1, 'duo':'2'}\n. Add the key \ntrio\ntrio\n and the corresponding value \n3\n3\n.\n\n\nQ03.67 Create a dictionary \ngroups = {'solo':1, 'duo':'2'}\n. Then remove the key \n'duo'\n and the value \n'2'\n so that only \n'solo':1\n remains.\n\n\nQ03.68 Create a dictionary \ncollege = {'name': 'University of Oregon'}\n. Add the following two keys: \nabbreviation\nabbreviation\n, \nmascot\nmascot\n and the corresponding two values: \nUofO\nUofO\n, \nducks\nducks\n.\n\n\nTuples\n\n\nQ03.70 Create a tuple with the numbers \n8\n8\n, \n9\n9\n, and \n10\n10\n. \n\n\nQ03.71 Create a tuple that has a single entry, the number \n10\n10\n.\n\n\nQ03.72 Create a list and a tuple that both contains the values: \none\none\n, \ntwo\ntwo\n and \nthree\nthree\n.   Pull the word \ntwo\ntwo\n out of both the list and the tuple.\n\n\nQ03.73 Create a list and a tuple that both contains the values: \none\none\n, \ntwo\ntwo\n and \nthree\nthree\n. Try to substitute the number \n2\n2\n for the word \ntwo\ntwo\n in both the list and tuple using indexing (square brackets).\n\n\nQ03.74 Code in the following lines:\n\n\nt1 = (9)\nt2 = (9,)\nt3 = ('9')\n\n\n\n\nUse Python's \ntype()\n function to find the object type of each variable.\n\n\nQ03.75 Create a tuple that returns \nTrue\n when converted to a boolean. Use the \nbool()\n function to demonstrate your tuple converts to \nTrue\n.\n\n\nQ03.76 Create a tuple that returns \nFalse\n when converted to a boolean. Use the \nbool()\n function to demonstrate your tuple converts to \nFalse\n.\n\n\nErrors, Explanations, and Solutions\n\n\nQ03.80 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:\n\n\nn = 503\nn[2]\n\n\n\n\nQ03.81 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:\n\n\na = 321\nb = 'go!'\nc = a + b\n\n\n\n\nQ03.82 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:\n\n\nd = {one:1, two:2, three:3}\nd[one]\n\n\n\n\nQ03.83 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:\n\n\nf = false\nnot f\n\n\n\n\nQ03.84 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:\n\n\ncomp = 0.1 - 4.3i\ncomp + 5\n\n\n\n\nQ03.85 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:\n\n\nempty = ''\nbool(empty)\n\n\n\n\nQ03.86 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:\n\n\nlst = [1,3,5]\nlst[3]\n\n\n\n\nQ03.87 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:\n\n\ndict = ['key': 8, 'pair': 9]\ndict['key']\n\n\n\n\nQ03.88 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:\n\n\ns = ['Problem Solving']\ns[8:]",
            "title": "Review Questions"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.07-Review-Questions/#review-questions",
            "text": "",
            "title": "Review Questions"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.07-Review-Questions/#determine-the-data-type",
            "text": "Q03.01 Find the data type of  a  if  a=9  Q03.02 Find the data type of  a  if  a=9.  Q03.03 Find the data type of  a  if  a='9.'  Q03.04 Find the data type of  a  if  a=(9)  Q03.05 Find the data type of  a  if  a=False  Q03.06 Find the data type of  a  if  a=[1,2,3]  Q03.07 Find the data type of  a  if  a=(1,2,3)  Q03.08 Find the data type of  a  if  a={'key'=9}  Q03.08 Find the data type of  a  if  a=1 + 9j",
            "title": "Determine the Data Type"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.07-Review-Questions/#numeric-data-types",
            "text": "Q03.10 Set  a=1  and  b=2 . What data type is  a/b ?  Q03.11 Set  a=1  and  b=2 . What data type is  a*b ?  Q03.12 What is  5.1  plus  0 + 3j ?  Q03.13 What floating point number converts to the boolean  False?  Show this in code and the  bool()  function.  Q03.14 Create the floating point number  0.001 \\times 10^{-0.2} 0.001 \\times 10^{-0.2}  and assign it to the variable  b .  Q03.15 Show that  3e2  is the same as  3E2  with the comparison operator  ==",
            "title": "Numeric Data Types"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.07-Review-Questions/#booleans",
            "text": "Q03.20 Predict the output if the lines  n=5  and  (n<3) and (n<7)  are run. Then run the the two lines of code.  Q03.21 Predict the output if the lines of code below are run. Then run the code.  >>> ans='Yes'\n>>> ans=='Yes' or ans=='No'  Q03.22 Pick a number  n  to make the following statement  True :  (2<n) or (n==2+n) Then run the code to show your number works.  Q03.23 Pick a number  n  to make the following statement  False :  not (n<6) and (n<4)  Then run the code to show your number works.  Q03.24 Create the floating point number  0.001 \\times 10^{-0.2} 0.001 \\times 10^{-0.2}  and assign it to the variable  b .  Q03.25 Show that  (n>5) and (n<=10)  is equivalent to  5 < n <= 10  using the two different numbers for  n .  Q03.26 Show that  (n<5) or (n>=10)  is equivalent to  not(5 =< n < 10)  using the two different numbers for  n .",
            "title": "Booleans"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.07-Review-Questions/#strings",
            "text": "Q03.30 Define a string that contains the word  Problem Problem .  Q03.31 Define one string as the word  Problem Problem  and define another string as the word  Solving Solving . Combine these two strings to make the statement  Problem \\ Solving Problem \\ Solving .  Q03.32 (a) Define a string that contains the number  8 8  and a string that contains the number  5 5 . Combine these two strings with the plus operator  + .  (b) Define an integer as the number  8 8  and an integer as the number  5 5  and combine these two integers with the plus operator  +  (c) Explain why the output from (a) was different from the output of (b)  (d) Multiply the strings  8 8  and  5 5  with the multiplication operator  * .  Compare the output to multiplying the integers  8 8  and  5 5 . Why is the out different?  Q03.33 Complete the following index and slicing operations after the string  word = 'Problem'  is defined.  (a) Pull out the letter  P P  from  word  (b) Pull out the first three letters  Pro Pro  from  word  (c) Pull out the second through the fourth letters  rob rob  from  word  (d) Pull out every other letter from  word  starting with  P P  (e) Use indexing and slicing to ouput  word  backwards to produce  melborP melborP .  Q03.34 Define the strings below:  (a) Define a string  a  as  coffee ,  define a string  b  as  it's  and define a string  c  as  hot!  and string  d  as , (a comma).  (b) Combine the strings  a ,  b  and  c  and  d  to produce the string  coffee, it's hot  (notice the comma)  (c) Print out the statement  she said \"coffee, it's hot\"  Q03.35 Create the string  path  with the value  C:\\Users\\Gabby\\Documents  Q03.36 Convert the string  Problem  to the list  ['P','r','o','b','l','e','m']  without rewriting the list from scratch.  Q03.37 Use the string  over board  and slicing to get the words:  (a)  over  (b)  board  (c)  oar  Q03.38 Use the string  rotten tomatoes  and slicing to get the words:  (a)  to  (b)  no  (c)  ten  (d)  oat",
            "title": "Strings"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.07-Review-Questions/#lists",
            "text": "Q03.40 Create a list that contains the numbers  1 1 ,  2.9 \\times 10^8 2.9 \\times 10^8 , and the word  game game .  Q03.41 Create a list that contains the words  problem problem ,  solving solving ,  with with ,  python python .  Q03.42 Create a list with one value, the number  6 6 . Convert the list to a boolean with the  bool()  function.  Q03.43 Create an empty list. Convert the empty list to a boolean with the  bool()  function.  Q03.44 Create a list with the letters  C C ,  D D , and  R R . Pull the letters  C C  and  D D  out of your list with indexing.  Q03.45 Create a list with the numbers  1 1  to  10 10  (counting by ones). Use slicing to pull out the number  5 5  from the list.  Q03.46 Create a list with the numbers  1 1  to  10 10  (counting by ones). Use list slicing to pull out all of the numbers  5 5  or less.  Q03.47 Create a list with the numbers  1 1  to  10 10  (counting by ones). Use list slicing to pull out all of the numbers  5 5  and greater.  Q03.48 Create a list with the numbers  1 1  to  10 10  (counting by ones). Use slicing to pull out all of the even numbers from the list.  Q03.49 Create a list with the numbers  1 1  to  10 10  (counting by ones). Use slicing to pull out every odd number from the list.  Q03.50 Create a list with the numbers  1 1  to  10 10  (counting by ones). Use slicing to return the list in reverse order (the returned list starts with  10 10  and ends with  1 1 ),",
            "title": "Lists"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.07-Review-Questions/#dictionaries",
            "text": "Q03.60 Create a dictionary called  capitals  that contains the states and state capitals. Include  Washington , capital  Olympia  and  Oregon , capital  Salem .  Q03.61 Create a dictionary called  capitals  that contains the states and state capitals. Include  Washington , capital  Olympia  and  Oregon , capital  Salem . In the line after the dictionary is created add the state  New York , capital  Albany .  Q03.62 Create a dictionary  numbers = {'one':1, 'two':2, 'three':3} . Pull out the number  '2'  by calling the key  'two' .  Q03.63 Create a dictionary  colors = {'red':' #FF0000', 'green':'#008000', 'blue':'#0000FF'} . Pull out all the keys and add them to a list called  colors_list  with the  .keys()  method.  Q03.64 Create a dictionary  colors = {'red':' #FF0000', 'green':'#008000', 'blue':'#0000FF'} . Pull out all the values and add them to a list called  colors_hex  with the  .values()  method.  Q03.65 Create a dictionary  colors = {'red':' #FF0000', 'green':'#008000', 'blue':'#0000FF'} . Pull out all the items from the dictionary and add them to a list called  color_items  with the  .items()  method.  Q03.66 Create a dictionary  groups = {'solo':1, 'duo':'2'} . Add the key  trio trio  and the corresponding value  3 3 .  Q03.67 Create a dictionary  groups = {'solo':1, 'duo':'2'} . Then remove the key  'duo'  and the value  '2'  so that only  'solo':1  remains.  Q03.68 Create a dictionary  college = {'name': 'University of Oregon'} . Add the following two keys:  abbreviation abbreviation ,  mascot mascot  and the corresponding two values:  UofO UofO ,  ducks ducks .",
            "title": "Dictionaries"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.07-Review-Questions/#tuples",
            "text": "Q03.70 Create a tuple with the numbers  8 8 ,  9 9 , and  10 10 .   Q03.71 Create a tuple that has a single entry, the number  10 10 .  Q03.72 Create a list and a tuple that both contains the values:  one one ,  two two  and  three three .   Pull the word  two two  out of both the list and the tuple.  Q03.73 Create a list and a tuple that both contains the values:  one one ,  two two  and  three three . Try to substitute the number  2 2  for the word  two two  in both the list and tuple using indexing (square brackets).  Q03.74 Code in the following lines:  t1 = (9)\nt2 = (9,)\nt3 = ('9')  Use Python's  type()  function to find the object type of each variable.  Q03.75 Create a tuple that returns  True  when converted to a boolean. Use the  bool()  function to demonstrate your tuple converts to  True .  Q03.76 Create a tuple that returns  False  when converted to a boolean. Use the  bool()  function to demonstrate your tuple converts to  False .",
            "title": "Tuples"
        },
        {
            "location": "/03-Data-Types-and-Variables/03.07-Review-Questions/#errors-explanations-and-solutions",
            "text": "Q03.80 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:  n = 503\nn[2]  Q03.81 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:  a = 321\nb = 'go!'\nc = a + b  Q03.82 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:  d = {one:1, two:2, three:3}\nd[one]  Q03.83 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:  f = false\nnot f  Q03.84 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:  comp = 0.1 - 4.3i\ncomp + 5  Q03.85 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:  empty = ''\nbool(empty)  Q03.86 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:  lst = [1,3,5]\nlst[3]  Q03.87 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:  dict = ['key': 8, 'pair': 9]\ndict['key']  Q03.88 Run the following lines of code and explain the error in your own words, then write the lines of code to run without an error:  s = ['Problem Solving']\ns[8:]",
            "title": "Errors, Explanations, and Solutions"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.00-Introduction/",
            "text": "Jupyter Notebooks\n\n\nIntroduction\n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nExplain what a Jupyter notebook is\n\n\n\n\n\n\nOpen a Jupyter notebook\n\n\n\n\n\n\nWrite Python code in a Jupyter notebook\n\n\n\n\n\n\nRun Python code in a Jupyter notebook\n\n\n\n\n\n\nWrite and render markdown text in a Jupyter notebook\n\n\n\n\n\n\nSave and close a Jupyter notebook\n\n\n\n\n\n\nDownload a Jupyter notebook in different file formats",
            "title": "Introduction"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.00-Introduction/#jupyter-notebooks",
            "text": "",
            "title": "Jupyter Notebooks"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.00-Introduction/#introduction",
            "text": "By the end of this chapter you will be able to:    Explain what a Jupyter notebook is    Open a Jupyter notebook    Write Python code in a Jupyter notebook    Run Python code in a Jupyter notebook    Write and render markdown text in a Jupyter notebook    Save and close a Jupyter notebook    Download a Jupyter notebook in different file formats",
            "title": "Introduction"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.01-What-is-a-Jupyter-Notebook/",
            "text": "What is a Jupyter Notebook?\n\n\nA \nJupyter notebook\n is an electronic file type which can contain both programming code and text descriptions. Jupyter notebooks can also contain embedded charts, plots, images, videos, and links. Jupyter notebooks run in a web browser like Google Chrome or Firefox.\nAlthough Jupyter notebooks can contain the code of many different programming languages, many Jupyter notebooks contain Python code. The Python code in a Jupyter notebook is the same type of Python code found in a \n.py\n file. The text description sections of Jupyter notebooks contain explanations and clarifications of the programming code in the \nmarkdown\n format. \nMarkdown\n files have the extension \n.md\n. Markdown sections of a Jupyter notebook can include formatting to make text bold, italic, form tables and lists, show code listings and render images.\nOne way to think of a Jupyter notebook is as a combination of the Python REPL and a Python module \n.py\n file with a markdown \n_.md\n file thrown in between code sections. \n\n\nIn the Python REPL, only one command can be typed at a time, and only one line of output is shown at a time. In a \n.py\n file, the entire file is run at one time, line by line. The output of the entire file is produced all at once. Markdown \n.md\n files contain text in markdown format, but that text is not rendered. In a Jupyter notebook, chunks of code one line or many lines long can be run individually and in any order without running all of the code in the Jupyter notebook. Jupyter notebooks render the markdown sections and display rich text with headings, formatting, and images.\nJupyter notebooks contain three types of cells: code cells, output cells, and markdown cells. Lines of Python code are run in code cells. The output from running the code cells is also shown in output cells. Markdown cells contain text like descriptions of what will happens in subsequent code cells. Charts, plots, command line output, and images can all be shown in Jupyter notebooks as well.",
            "title": "What is a Jupyter Notebook?"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.01-What-is-a-Jupyter-Notebook/#what-is-a-jupyter-notebook",
            "text": "A  Jupyter notebook  is an electronic file type which can contain both programming code and text descriptions. Jupyter notebooks can also contain embedded charts, plots, images, videos, and links. Jupyter notebooks run in a web browser like Google Chrome or Firefox.\nAlthough Jupyter notebooks can contain the code of many different programming languages, many Jupyter notebooks contain Python code. The Python code in a Jupyter notebook is the same type of Python code found in a  .py  file. The text description sections of Jupyter notebooks contain explanations and clarifications of the programming code in the  markdown  format.  Markdown  files have the extension  .md . Markdown sections of a Jupyter notebook can include formatting to make text bold, italic, form tables and lists, show code listings and render images.\nOne way to think of a Jupyter notebook is as a combination of the Python REPL and a Python module  .py  file with a markdown  _.md  file thrown in between code sections.   In the Python REPL, only one command can be typed at a time, and only one line of output is shown at a time. In a  .py  file, the entire file is run at one time, line by line. The output of the entire file is produced all at once. Markdown  .md  files contain text in markdown format, but that text is not rendered. In a Jupyter notebook, chunks of code one line or many lines long can be run individually and in any order without running all of the code in the Jupyter notebook. Jupyter notebooks render the markdown sections and display rich text with headings, formatting, and images.\nJupyter notebooks contain three types of cells: code cells, output cells, and markdown cells. Lines of Python code are run in code cells. The output from running the code cells is also shown in output cells. Markdown cells contain text like descriptions of what will happens in subsequent code cells. Charts, plots, command line output, and images can all be shown in Jupyter notebooks as well.",
            "title": "What is a Jupyter Notebook?"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.02-Why-Jupyter-Notebooks/",
            "text": "Why Jupyter Notebooks?\n\n\nThere is a vast array of editors and IDE's (Integrated Development Environments) which can be used to edit and run Python code. Why should problem solvers learn to use Jupyter Notebooks? \n\n\nBelow is a table of simple text editors and IDE's which can be used to edit and run Python code:\n\n\n\n\n\n\n\n\nPython Text Editors and IDE's\n\n\n\n\n\n\n\n\n\n\n\n\nNotepad\n\n\nsimple text editor - included with Windows\n\n\n\n\n\n\nIdle\n\n\nincluded with Python from Python.org\n\n\n\n\n\n\nSublime Text\n\n\nfull-featured editor with long-time no-cost license\n\n\n\n\n\n\nSpyder\n\n\nIDE included with the Anaconda Distribution of Python\n\n\n\n\n\n\nVisual Studio Code\n\n\nAn multi-language open source IDE\n\n\n\n\n\n\nPyCharm\n\n\nProfessional Developer-friendly Python IDE\n\n\n\n\n\n\n\n\nA Jupyter notebook is neither a simple text editor nor a full-featured IDE. Jupyter notebooks provide a quick and streamlined way for problem-solvers to prototype code and quickly share code.  Jupyter notebooks also provide a way for problem-solvers to share programming solutions with team members, supervisors, and customers.\n\n\n\n\nIn a way, Jupyter notebooks strike a balance between simple text editors, which are fast to start and simple and easy to manipulate, and IDE's which tend to start slower and be feature-rich and complex. Simple text editors typically can only edit code, and cannot run the code. A full IDE can edit code, run the code, debug code, provide syntax highlighting and context help.\nIn the context of problem-solving, Jupyter notebooks can be quite handy. Jupyter notebooks are quick to open and quick to produce output. Data exploration, data cleaning, and plot building are accomplished in Jupyter notebooks easier and quicker than in a text editor or an IDE. \n\n\nIn the context of sharing solutions to problems, Jupyter notebooks are also useful. Markdown cells render text in different sizes, bold and italic. Tables and images, plots and code can all be shown together in the same Jupyter notebook. Notebooks can be exported to a variety of formats including \n.html\n and \n.pdf\n.",
            "title": "Why Jupyter Notebooks?"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.02-Why-Jupyter-Notebooks/#why-jupyter-notebooks",
            "text": "There is a vast array of editors and IDE's (Integrated Development Environments) which can be used to edit and run Python code. Why should problem solvers learn to use Jupyter Notebooks?   Below is a table of simple text editors and IDE's which can be used to edit and run Python code:     Python Text Editors and IDE's       Notepad  simple text editor - included with Windows    Idle  included with Python from Python.org    Sublime Text  full-featured editor with long-time no-cost license    Spyder  IDE included with the Anaconda Distribution of Python    Visual Studio Code  An multi-language open source IDE    PyCharm  Professional Developer-friendly Python IDE     A Jupyter notebook is neither a simple text editor nor a full-featured IDE. Jupyter notebooks provide a quick and streamlined way for problem-solvers to prototype code and quickly share code.  Jupyter notebooks also provide a way for problem-solvers to share programming solutions with team members, supervisors, and customers.   In a way, Jupyter notebooks strike a balance between simple text editors, which are fast to start and simple and easy to manipulate, and IDE's which tend to start slower and be feature-rich and complex. Simple text editors typically can only edit code, and cannot run the code. A full IDE can edit code, run the code, debug code, provide syntax highlighting and context help.\nIn the context of problem-solving, Jupyter notebooks can be quite handy. Jupyter notebooks are quick to open and quick to produce output. Data exploration, data cleaning, and plot building are accomplished in Jupyter notebooks easier and quicker than in a text editor or an IDE.   In the context of sharing solutions to problems, Jupyter notebooks are also useful. Markdown cells render text in different sizes, bold and italic. Tables and images, plots and code can all be shown together in the same Jupyter notebook. Notebooks can be exported to a variety of formats including  .html  and  .pdf .",
            "title": "Why Jupyter Notebooks?"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.03-Installing-Juypter/",
            "text": "Installing Juypter\n\n\nThe simplest way to install \nJupyter notebooks\n is to download and install the Anaconda distribution of Python. The Anaconda distribution of Python comes with Jupyter notebook included and no further installation steps are necessary.\n\n\nBelow are additional methods to install Jupyter notebooks if you are not using the Anaconda distribution of Python.\n\n\nInstalling Jupyter on Windows using the Anaconda Prompt\n\n\nTo install Jupyter on Windows, open the \nAnaconda Prompt\n and type:\n\n\n> conda install jupyter\n\n\n\n\nType \ny\n for yes when prompted. Once Jupyter is installed, type the command below into the \nAnaconda Prompt\n to open the Jupyter notebook file browser and start using Jupyter notebooks.\n\n\n> jupyter notebook\n\n\n\n\nInstalling Jupyter on MacOS\n\n\nTo install Jupyter on MacOS, open the MacOS terminal and type:\n\n\n$ conda install jupyter\n\n\n\n\nType \ny\n for yes when prompted.\n\n\nIf \nconda\n is not installed, the Anaconda distribution of Python can be installed, which will install \nconda\n for use in the MacOS terminal.\n\n\nProblems can crop up on MacOS when using the MacOS provided system version of Python. Python packages may not install on the system version of Python properly. Moreover, packages which do install on the system version of Python may not run correctly. It is therefore recommended that MacOS users install the \nAnaconda\n distribution of Python or use \nhomebrew\n to install a separate non-system version of Python. \n\n\nTo install a non-system version of Python with \nhomebrew\n, key the following into the MacOS terminal. See the \nhomebrew\n documentation at \nhttps://brew.sh\n.\n\n\n$ brew install Python\n\n\n\n\nAfter \nhomebrew\n installs a non-system version of Python, \npip\n can be used to install Jupyter.\n\n\n$ pip install jupyter\n\n\n\n\nInstalling Jupyter on Linux\n\n\nTo install Jupyter on Linux, open a terminal and type:\n\n\n$ conda install jupyter\n\n\n\n\nType \ny\n for yes when prompted.\n\n\nAlternatively, if the Anaconda distribution of Python is not installed, one can use \npip\n.\n\n\n$ pip3 install jupyter",
            "title": "Installing Juypter"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.03-Installing-Juypter/#installing-juypter",
            "text": "The simplest way to install  Jupyter notebooks  is to download and install the Anaconda distribution of Python. The Anaconda distribution of Python comes with Jupyter notebook included and no further installation steps are necessary.  Below are additional methods to install Jupyter notebooks if you are not using the Anaconda distribution of Python.",
            "title": "Installing Juypter"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.03-Installing-Juypter/#installing-jupyter-on-windows-using-the-anaconda-prompt",
            "text": "To install Jupyter on Windows, open the  Anaconda Prompt  and type:  > conda install jupyter  Type  y  for yes when prompted. Once Jupyter is installed, type the command below into the  Anaconda Prompt  to open the Jupyter notebook file browser and start using Jupyter notebooks.  > jupyter notebook",
            "title": "Installing Jupyter on Windows using the Anaconda Prompt"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.03-Installing-Juypter/#installing-jupyter-on-macos",
            "text": "To install Jupyter on MacOS, open the MacOS terminal and type:  $ conda install jupyter  Type  y  for yes when prompted.  If  conda  is not installed, the Anaconda distribution of Python can be installed, which will install  conda  for use in the MacOS terminal.  Problems can crop up on MacOS when using the MacOS provided system version of Python. Python packages may not install on the system version of Python properly. Moreover, packages which do install on the system version of Python may not run correctly. It is therefore recommended that MacOS users install the  Anaconda  distribution of Python or use  homebrew  to install a separate non-system version of Python.   To install a non-system version of Python with  homebrew , key the following into the MacOS terminal. See the  homebrew  documentation at  https://brew.sh .  $ brew install Python  After  homebrew  installs a non-system version of Python,  pip  can be used to install Jupyter.  $ pip install jupyter",
            "title": "Installing Jupyter on MacOS"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.03-Installing-Juypter/#installing-jupyter-on-linux",
            "text": "To install Jupyter on Linux, open a terminal and type:  $ conda install jupyter  Type  y  for yes when prompted.  Alternatively, if the Anaconda distribution of Python is not installed, one can use  pip .  $ pip3 install jupyter",
            "title": "Installing Jupyter on Linux"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.04-Opening-a-Jupyter-Notebook/",
            "text": "Opening a Jupyter Notebook\n\n\nIn this section, you will learn how to open a Jupyter notebook on Windows and MacOS.\n\n\nOne way problem solvers can write and execute Python code is in a Jupyter notebook. Jupyter notebooks contain Python code, the output that code produces and markdown cells usually used to explain what the code means.\n\n\nOn Windows, a Jupyter notebook can be started from the \nAnaconda Prompt\n, the Windows start menu and \nAnaconda Navigator\n.\n\n\n3 ways to open a \nJupyter notebook\n:\n\n\n\n\n\n\nWindows Start Menu\n\n\n\n\n\n\nAnaconda Prompt\n\n\n\n\n\n\nAnaconda Navigator\n\n\n\n\n\n\nOpen a Jupyter notebook with the Windows Start Menu\n\n\nOne simple way to open a Jupyter notebook is to use the Windows Start Menu. Note that the Anaconda distribution of Python must be installed to use the Windows Start Menu to open a Jupyter notebook. Download \nAnaconda\n at the following link: \nAnaconda.com/downloads\n\n\nOpen the Windows start menu and select \n[Anaconda3(64 bit)]\n --> \n[Jupyter Notebook]\n\n\n\n\nThis action opens the \nJupyter file browser\n in a web browser tab. \n\n\nIn the upper right select \n[New]\n --> \n[Python 3]\n\n\n\n\nA new \nnotebook\n will open as a new tab in your web browser.\n\n\n\n\nTry typing this in the first cell in the notebook to the right of the \nIn [ ]:\n prompt:\n\n\nimport this\n\n\n\n\nThen click the run button in the middle of the menu at the top of the notebook.\n\n\n\n\nOpen a Jupyter Notebook with the Anaconda Prompt\n\n\nAnother method to open a Jupyter notebook is to use the \nAnaconda Prompt\n.\n\n\nGo to the Windows start menu and select \n[Anaconda Prompt]\n under \n[Anaconda3]\n.\n\n\n\n\nIf you don't see the \nAnaconda Prompt\n in the Windows Start Menu, then you need to install the Anaconda distribution of Python. Download \nAnaconda\n at the following link: \nAnaconda.com/downloads\n\n\nThe \nAnaconda Prompt\n window should look something like the image below.\n\n\n\n\nAt the \nAnaconda Prompt\n type:\n\n\n> jupyter notebook\n\n\n\n\nThis command starts the \nJupyter notebook\n server. The output in the \nAnaconda Prompt\n will look something like the output shown below:\n\n\n\nCopy/paste this URL into your browser when you connect ...\n\n    to login with a token:\n\n        http://localhost:8888/?token=6bdef677d3503fbb2 ...\n\n[I 16:14:12.661 NotebookApp] Accepting one-time-token ...\n\n\n\n\n\nA web browser should open, and you should be able to see the \nJupyter file browser\n. If a web browser doesn't open automatically, you can copy the web address from the \nAnaconda Prompt\n and paste it into a web browser's address bar.\n\n\n\n\nIn the upper right select \n[New]\n --> \n[Python 3]\n\n\nYou will see a new tab open in your web browser. This web browser page is a \nJupyter notebook\n.\n\n\n\n\nOpen a Jupyter Notebook with Anaconda Navigator\n\n\nOne additional way to open a Jupyter notebook is to use \nAnaconda Navigator\n. Anaconda Navigator comes with the Anaconda distribution of Python. Open \nAnaconda Navigator\n using the Windows start menu and select \n[Anaconda3(64-bit)]\n --> \n[Anaconda Navigator]\n.\n\n\n\n\nAn \nAnaconda Navigator\n window will open. In the middle of the page, in the \nJupyter notebook\n tile, click \n[Launch]\n\n\n\n\nA \nJupyter file browser\n will open in a web browser tab. \n\n\nIn the upper right select \n[New]\n --> \n[Python 3]\n\n\n\n\nA new \nnotebook\n will open as a new tab in your web browser.",
            "title": "Opening a Jupyter Notebook"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.04-Opening-a-Jupyter-Notebook/#opening-a-jupyter-notebook",
            "text": "In this section, you will learn how to open a Jupyter notebook on Windows and MacOS.  One way problem solvers can write and execute Python code is in a Jupyter notebook. Jupyter notebooks contain Python code, the output that code produces and markdown cells usually used to explain what the code means.  On Windows, a Jupyter notebook can be started from the  Anaconda Prompt , the Windows start menu and  Anaconda Navigator .",
            "title": "Opening a Jupyter Notebook"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.04-Opening-a-Jupyter-Notebook/#3-ways-to-open-a-jupyter-notebook",
            "text": "Windows Start Menu    Anaconda Prompt    Anaconda Navigator",
            "title": "3 ways to open a Jupyter notebook:"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.04-Opening-a-Jupyter-Notebook/#open-a-jupyter-notebook-with-the-windows-start-menu",
            "text": "One simple way to open a Jupyter notebook is to use the Windows Start Menu. Note that the Anaconda distribution of Python must be installed to use the Windows Start Menu to open a Jupyter notebook. Download  Anaconda  at the following link:  Anaconda.com/downloads  Open the Windows start menu and select  [Anaconda3(64 bit)]  -->  [Jupyter Notebook]   This action opens the  Jupyter file browser  in a web browser tab.   In the upper right select  [New]  -->  [Python 3]   A new  notebook  will open as a new tab in your web browser.   Try typing this in the first cell in the notebook to the right of the  In [ ]:  prompt:  import this  Then click the run button in the middle of the menu at the top of the notebook.",
            "title": "Open a Jupyter notebook with the Windows Start Menu"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.04-Opening-a-Jupyter-Notebook/#open-a-jupyter-notebook-with-the-anaconda-prompt",
            "text": "Another method to open a Jupyter notebook is to use the  Anaconda Prompt .  Go to the Windows start menu and select  [Anaconda Prompt]  under  [Anaconda3] .   If you don't see the  Anaconda Prompt  in the Windows Start Menu, then you need to install the Anaconda distribution of Python. Download  Anaconda  at the following link:  Anaconda.com/downloads  The  Anaconda Prompt  window should look something like the image below.   At the  Anaconda Prompt  type:  > jupyter notebook  This command starts the  Jupyter notebook  server. The output in the  Anaconda Prompt  will look something like the output shown below:  \nCopy/paste this URL into your browser when you connect ...\n\n    to login with a token:\n\n        http://localhost:8888/?token=6bdef677d3503fbb2 ...\n\n[I 16:14:12.661 NotebookApp] Accepting one-time-token ...  A web browser should open, and you should be able to see the  Jupyter file browser . If a web browser doesn't open automatically, you can copy the web address from the  Anaconda Prompt  and paste it into a web browser's address bar.   In the upper right select  [New]  -->  [Python 3]  You will see a new tab open in your web browser. This web browser page is a  Jupyter notebook .",
            "title": "Open a Jupyter Notebook with the Anaconda Prompt"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.04-Opening-a-Jupyter-Notebook/#open-a-jupyter-notebook-with-anaconda-navigator",
            "text": "One additional way to open a Jupyter notebook is to use  Anaconda Navigator . Anaconda Navigator comes with the Anaconda distribution of Python. Open  Anaconda Navigator  using the Windows start menu and select  [Anaconda3(64-bit)]  -->  [Anaconda Navigator] .   An  Anaconda Navigator  window will open. In the middle of the page, in the  Jupyter notebook  tile, click  [Launch]   A  Jupyter file browser  will open in a web browser tab.   In the upper right select  [New]  -->  [Python 3]   A new  notebook  will open as a new tab in your web browser.",
            "title": "Open a Jupyter Notebook with Anaconda Navigator"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/",
            "text": "The Jupyter Notebook Interface\n\n\nWhen a new Jupyter notebook opens, you will see the Jupyter notebook interface. Across the top of the notebook you see the Jupyter icon and the Notebook name. You can click on the notebook name field and change the name of the notebook. Note that the file extension \n.ipynb\n is not printed in the file name field, but if you look in the Home tab, you will see that the notebook is saved with the \n.ipynb\n extension.\n\n\nMenus and Buttons\n\n\nA Jupyter notebook is comprised of a bunch of \ncells\n which are arrayed one after another in boxes below the menu items and buttons. There are three main types of cells: code cells, output cells, and markdown cells.\n\n\nCode Cells\n\n\nIn code cells, you can write Python code, then execute the Python code and see the resulting output. An example of a code cell is shown below. \n\n\n\n\nYou can tell you are typing in a code cell because \nIn [ ]:\n is shown to the left of the cell and the cell-type drop-down menu shows \nCode\n.\n\n\nTo run the Python code in a code cell push the [Run] button or type [Shift]+[Enter]. Hitting [Enter] when the cursor is inside a code cell brings the cursor down to a new line.\n\n\n\n\nOutput Cells\n\n\nAfter a code cell is run, an output cell can be produced below the code cell. The output cell contains the output from the code cell above it. Not all code produces output, so not all code cells produce output cells. The results in output cells can't be edited. If a code cell produces plots, charts or images, these outputs are shown in output cells. \n\n\n\n\nYou can clear all the output cells and re-run code cells by selecting \n[Kernal]\n --> \n[Restart Kernal and Clear Output]\n.\n\n\n\n\nMarkdown Cells\n\n\nMarkdown cells don't contain Python code. Markdown cells contain text written in Markdown format.  Text in markdown cells can be formatted to show \nbold\n or \nitalic\n text. Tables, images, and lists can also be included in markdown cells.\n\n\n\n\nMarkdown cells are used for documentation and explaining your code. The text in a markdown cell is not executed. Markdown cells can be formatted with a few special characters.\n\n\nMarkdown cells are run like code cells. The difference is that when markdown cells are run, the text is formatted (when code cells run, code is executed). Markdown cells are run by clicking the [Run] button or by pressing \n[Shift]\n + \n[Enter]\n\n\nText in markdown cells can be formatted using \nmarkdown syntax\n. An example of markdown syntax is putting an underscore before and after a word to cause the word to be formatted in \nitalics\n.\n\n\nHeadings\n\n\nHeadings are created in markdown cells using the hash symbol \n#\n. One \n#\n is the largest heading. Four hashes \n####\n is the smallest heading.\n\n\n# H1 Heading\n\n\n\n\n## H2 Heading\n\n\n\n\n### H3 Heading\n\n\n\n\n#### H4 Heading\n\n\n\n\nCode Blocks\n\n\nCode blocks can be inserted in Jupyter notebook markdown cells. For inline code blocks use the ` left quote character, the character to the left of the number \n[1]``` and above ```[Tab]\n on most keyboards.\n\n\nThis is inline code:  ` ` ` Inline code block ` ` ` within a paragraph\n\n\nFor a separated code block use three ` left quote characters on one line, followed by the code block on separate lines. Terminate the separate code block with a line of three ` left quote characters.\n\n\n```\n\n\nSeparated code block\n\n\n```\n\n\nBold and italics\n\n\nBold\n and \nitalic font\n is displayed by surrounding text with a double asterisk for \n**bold**\n and a single underscore for \n_italics_\n\n\n**bold**\n produces \nbold\n\n\n_italics_\n produces \nitalics\n\n\n**_bold and italic_**\n produces \nbold and italic\n\n\nTables\n\n\nTables are displayed using the pipe \n|\n character, which is [Shift]+[\\] on most keyboards. Columns are separated by pipes \n|\n and rows are separated by lines. After the header row, a row of pipes and dashes \n---\n are needed to define the table.\n\n\n| header1 | header 2 | header 3 |\n| --- | --- | --- |\n| col 1 | col 2 | col 3 |\n| col 1 | col 2 | col 3 |\n\n\n\n\nproduces:\n\n\n\n\n\n\n\n\nheader1\n\n\nheader 2\n\n\nheader 3\n\n\n\n\n\n\n\n\n\n\ncol 1\n\n\ncol 2\n\n\ncol 3\n\n\n\n\n\n\ncol 1\n\n\ncol 2\n\n\ncol 3\n\n\n\n\n\n\n\n\nBullet Points and Lists\n\n\nBullet points are produced using the asterisk character \n*\n\n\n * item 1\n * item 2\n * item 3\n\n\n\n\nproduces\n\n\n\n\nitem 1\n\n\nitem 2\n\n\n\n\nNumbered lists are produced using sequential numbers followed by a dot. Indent sub-items with two spaces.\n\n\n1. First item\n2. Second item\n3. Third item\n  1. sub item\n  2. sub item\n    1. sub-sub item\n    2. sub-sub item\n\n\n\n\nproduces\n\n\n\n\nFirst item\n\n\nSecond item\n\n\nThird item\n\n\nsub item\n\n\nsub item\n\n\nsub-sub item\n\n\nsub-sub item\n\n\n\n\n\n\n\n\nHorizontal Rule\n\n\nA horizontal rule is specified with three asterisks \n***\n on a single line.\n\n\n***\n\n\n\n\nproduces\n\n\n\n\nLinks\n\n\nHyperlinks are specified using a set of square brackets \n[ ]\n followed by a pair of parenthesis \n( )\n The text inside the square brackets will be the link, the link address goes in the parenthesis.\n\n\n[Python.org](https://python.org/)\n\n\n\n\nproduces\n\n\nPython.org\n\n\nImages\n\n\nImages are embedded in Jupyter Notebook markdown using the exclamation point and square brackets \n![ ]\n, followed by the image file path in parenthesis \n( )\n. If the image can not be displayed, the text in square brackets will be shown. The image can be in the same directory as the notebook, or a relative path can be specified. In this case, the image \nengineering.png\n is stored in the \nimages\n directory, which is a subdirectory of the directory the notebook is saved in.\n\n\n![Engineering Image](images/engineering.png)\n\n\n\n\nproduces\n\n\n\n\nLaTeX Math\n\n\nLaTeX Math equations and symbols are rendered by markdown cells. A more extensive list of LaTeX commands can be found in the appendix.\n\n\n$$ \\int_{a}^{b} \\frac{1}{x^2} dx $$\n\n\n\n\nproduces\n\n\n\n\n \\int_{a}^{b} \\frac{1}{x^2} dx \n\n\n \\int_{a}^{b} \\frac{1}{x^2} dx \n\n\n\n\nhtml\n\n\nBecause Jupyter notebooks are rendered by web browsers, just about any HTML tag can be included in the markdown portion of a notebook. An example of an HTML tag is the \n<sup>\n \n</sup>\n tags that surround superscript text.\n\n\nx<sup>2</sup>\n\n\n\n\nproduces\n\n\nx\n2\n\n\nText can be colored using html \n<font>\n \n</font>\n tags\n\n\n<font color=red>Red Text</font>\n\n\n\n\nproduces\n\n\nRed Text\n\n\nwarning boxes\n\n\nbootstrap style warning boxes can be included in Jupyter notebook markdown using \n<div>\n tags\n\n\n<div class=\"alert alert-danger\" role=\"alert\">\n  <strong>Warning!</strong> Python lists start at 0\n</div>\n\n\n\n\nproduces\n\n\n\n  \nWarning!\n Python lists start at 0\n\n\n\n\nCreating a new cell\n\n\nYou can create a new cell in a Jupyter Notebook by clicking the [+] button in the upper menu. Clicking the [+] button produces a new code cell below the currently active cell.\n\n\n\n\nYou can also create a new cell using \nInsert\n --> \nInsert Cell Above\n or \nInsert Cell Below\n. You can choose to insert a cell above or below the currently active cell.\n\n\nChanging the cell type\n\n\nThe type of cell: code cell or markdown cell, is changed by clicking on a cell and selecting the cell type from the drop-down menu. Typing \n[Esc]\n + \n[m]\n changes the cell type to a markdown cell. Typing \n[Esc]\n + \n[y]\n changes the cell type to a code cell.\n\n\n\n\nSaving a Jupyter Notebook\n\n\nJupyter notebooks can be saved using the save icon in the upper menu or by pressing [Ctrl] + [s].\n\n\n\n\nJupyter notebooks can also be saved as a copy, similar to the Save As command common in many programs. To save a copy of a Jupyter notebook use \nFile\n --> \nMake a Copy...\n\n\n\n\nRenaming a Jupyter Notebook\n\n\nJupyter notebooks are renamed by clicking on the notebook name above the upper menu and typing a new name into the dialog box.\n\n\n\n\n\n\nDownloading a Jupyter Notebook\n\n\nJupyter notebooks can be downloaded and saved using \nFile --> Download As --> Notebook (.ipynb)\n. Selecting this menu option will download the notebook as a \n.ipynb\n file. \n\n\n\n\nNote that when a \n.ipynb\n file is viewed in a text editor like notepad, the notebook is unformatted and looks like a confusing jumble of text. The notebook needs to be opened in a Jupyter notebook file browser in order for the code in the notebook to run and the markdown text to render.\n\n\n\n\nSaving Jupyter Notebooks in Other Formats\n\n\nJupyter notebooks can be saved in other formats besides the native \n.ipynb\n format. These formats can be accessed using the \n[File] --> [Download As]\n menu.\n\n\n\n\nThe available file download types are:\n\n\n\n\nNotebook (.ipynb) - The native jupyter notebook format\n\n\nPython (.py) - The native Python code file type.\n\n\nHTML (.html) - A web page\n\n\nMarkdown (.md) - Markdown format\n\n\nreST (.rst) - Restructured text format\n\n\nLaTeX (.tex) - LaTeX Article format\n\n\nPDF via LaTeX - a pdf exported from LeTeX, requires a converter\n\n\n\n\nWhen a Notebook is saved as a \n.py\n file, all text in markdown cells is converted to comments, and any code cells stay intact as Python code.",
            "title": "The Jupyter Notebook Interface"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#the-jupyter-notebook-interface",
            "text": "When a new Jupyter notebook opens, you will see the Jupyter notebook interface. Across the top of the notebook you see the Jupyter icon and the Notebook name. You can click on the notebook name field and change the name of the notebook. Note that the file extension  .ipynb  is not printed in the file name field, but if you look in the Home tab, you will see that the notebook is saved with the  .ipynb  extension.",
            "title": "The Jupyter Notebook Interface"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#menus-and-buttons",
            "text": "A Jupyter notebook is comprised of a bunch of  cells  which are arrayed one after another in boxes below the menu items and buttons. There are three main types of cells: code cells, output cells, and markdown cells.",
            "title": "Menus and Buttons"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#code-cells",
            "text": "In code cells, you can write Python code, then execute the Python code and see the resulting output. An example of a code cell is shown below.    You can tell you are typing in a code cell because  In [ ]:  is shown to the left of the cell and the cell-type drop-down menu shows  Code .  To run the Python code in a code cell push the [Run] button or type [Shift]+[Enter]. Hitting [Enter] when the cursor is inside a code cell brings the cursor down to a new line.",
            "title": "Code Cells"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#output-cells",
            "text": "After a code cell is run, an output cell can be produced below the code cell. The output cell contains the output from the code cell above it. Not all code produces output, so not all code cells produce output cells. The results in output cells can't be edited. If a code cell produces plots, charts or images, these outputs are shown in output cells.    You can clear all the output cells and re-run code cells by selecting  [Kernal]  -->  [Restart Kernal and Clear Output] .",
            "title": "Output Cells"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#markdown-cells",
            "text": "Markdown cells don't contain Python code. Markdown cells contain text written in Markdown format.  Text in markdown cells can be formatted to show  bold  or  italic  text. Tables, images, and lists can also be included in markdown cells.   Markdown cells are used for documentation and explaining your code. The text in a markdown cell is not executed. Markdown cells can be formatted with a few special characters.  Markdown cells are run like code cells. The difference is that when markdown cells are run, the text is formatted (when code cells run, code is executed). Markdown cells are run by clicking the [Run] button or by pressing  [Shift]  +  [Enter]  Text in markdown cells can be formatted using  markdown syntax . An example of markdown syntax is putting an underscore before and after a word to cause the word to be formatted in  italics .",
            "title": "Markdown Cells"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#headings",
            "text": "Headings are created in markdown cells using the hash symbol  # . One  #  is the largest heading. Four hashes  ####  is the smallest heading.  # H1 Heading  ## H2 Heading  ### H3 Heading  #### H4 Heading",
            "title": "Headings"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#code-blocks",
            "text": "Code blocks can be inserted in Jupyter notebook markdown cells. For inline code blocks use the ` left quote character, the character to the left of the number  [1]``` and above ```[Tab]  on most keyboards.  This is inline code:  ` ` ` Inline code block ` ` ` within a paragraph  For a separated code block use three ` left quote characters on one line, followed by the code block on separate lines. Terminate the separate code block with a line of three ` left quote characters.  ```  Separated code block  ```",
            "title": "Code Blocks"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#bold-and-italics",
            "text": "Bold  and  italic font  is displayed by surrounding text with a double asterisk for  **bold**  and a single underscore for  _italics_  **bold**  produces  bold  _italics_  produces  italics  **_bold and italic_**  produces  bold and italic",
            "title": "Bold and italics"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#tables",
            "text": "Tables are displayed using the pipe  |  character, which is [Shift]+[\\] on most keyboards. Columns are separated by pipes  |  and rows are separated by lines. After the header row, a row of pipes and dashes  ---  are needed to define the table.  | header1 | header 2 | header 3 |\n| --- | --- | --- |\n| col 1 | col 2 | col 3 |\n| col 1 | col 2 | col 3 |  produces:     header1  header 2  header 3      col 1  col 2  col 3    col 1  col 2  col 3",
            "title": "Tables"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#bullet-points-and-lists",
            "text": "Bullet points are produced using the asterisk character  *   * item 1\n * item 2\n * item 3  produces   item 1  item 2   Numbered lists are produced using sequential numbers followed by a dot. Indent sub-items with two spaces.  1. First item\n2. Second item\n3. Third item\n  1. sub item\n  2. sub item\n    1. sub-sub item\n    2. sub-sub item  produces   First item  Second item  Third item  sub item  sub item  sub-sub item  sub-sub item",
            "title": "Bullet Points and Lists"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#horizontal-rule",
            "text": "A horizontal rule is specified with three asterisks  ***  on a single line.  ***  produces",
            "title": "Horizontal Rule"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#links",
            "text": "Hyperlinks are specified using a set of square brackets  [ ]  followed by a pair of parenthesis  ( )  The text inside the square brackets will be the link, the link address goes in the parenthesis.  [Python.org](https://python.org/)  produces  Python.org",
            "title": "Links"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#images",
            "text": "Images are embedded in Jupyter Notebook markdown using the exclamation point and square brackets  ![ ] , followed by the image file path in parenthesis  ( ) . If the image can not be displayed, the text in square brackets will be shown. The image can be in the same directory as the notebook, or a relative path can be specified. In this case, the image  engineering.png  is stored in the  images  directory, which is a subdirectory of the directory the notebook is saved in.  ![Engineering Image](images/engineering.png)  produces",
            "title": "Images"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#latex-math",
            "text": "LaTeX Math equations and symbols are rendered by markdown cells. A more extensive list of LaTeX commands can be found in the appendix.  $$ \\int_{a}^{b} \\frac{1}{x^2} dx $$  produces    \\int_{a}^{b} \\frac{1}{x^2} dx    \\int_{a}^{b} \\frac{1}{x^2} dx",
            "title": "LaTeX Math"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#html",
            "text": "Because Jupyter notebooks are rendered by web browsers, just about any HTML tag can be included in the markdown portion of a notebook. An example of an HTML tag is the  <sup>   </sup>  tags that surround superscript text.  x<sup>2</sup>  produces  x 2  Text can be colored using html  <font>   </font>  tags  <font color=red>Red Text</font>  produces  Red Text",
            "title": "html"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#warning-boxes",
            "text": "bootstrap style warning boxes can be included in Jupyter notebook markdown using  <div>  tags  <div class=\"alert alert-danger\" role=\"alert\">\n  <strong>Warning!</strong> Python lists start at 0\n</div>  produces  \n   Warning!  Python lists start at 0",
            "title": "warning boxes"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#creating-a-new-cell",
            "text": "You can create a new cell in a Jupyter Notebook by clicking the [+] button in the upper menu. Clicking the [+] button produces a new code cell below the currently active cell.   You can also create a new cell using  Insert  -->  Insert Cell Above  or  Insert Cell Below . You can choose to insert a cell above or below the currently active cell.",
            "title": "Creating a new cell"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#changing-the-cell-type",
            "text": "The type of cell: code cell or markdown cell, is changed by clicking on a cell and selecting the cell type from the drop-down menu. Typing  [Esc]  +  [m]  changes the cell type to a markdown cell. Typing  [Esc]  +  [y]  changes the cell type to a code cell.",
            "title": "Changing the cell type"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#saving-a-jupyter-notebook",
            "text": "Jupyter notebooks can be saved using the save icon in the upper menu or by pressing [Ctrl] + [s].   Jupyter notebooks can also be saved as a copy, similar to the Save As command common in many programs. To save a copy of a Jupyter notebook use  File  -->  Make a Copy...",
            "title": "Saving a Jupyter Notebook"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#renaming-a-jupyter-notebook",
            "text": "Jupyter notebooks are renamed by clicking on the notebook name above the upper menu and typing a new name into the dialog box.",
            "title": "Renaming a Jupyter Notebook"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#downloading-a-jupyter-notebook",
            "text": "Jupyter notebooks can be downloaded and saved using  File --> Download As --> Notebook (.ipynb) . Selecting this menu option will download the notebook as a  .ipynb  file.    Note that when a  .ipynb  file is viewed in a text editor like notepad, the notebook is unformatted and looks like a confusing jumble of text. The notebook needs to be opened in a Jupyter notebook file browser in order for the code in the notebook to run and the markdown text to render.",
            "title": "Downloading a Jupyter Notebook"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.05-The-Jupyter-Notebook-Interface/#saving-jupyter-notebooks-in-other-formats",
            "text": "Jupyter notebooks can be saved in other formats besides the native  .ipynb  format. These formats can be accessed using the  [File] --> [Download As]  menu.   The available file download types are:   Notebook (.ipynb) - The native jupyter notebook format  Python (.py) - The native Python code file type.  HTML (.html) - A web page  Markdown (.md) - Markdown format  reST (.rst) - Restructured text format  LaTeX (.tex) - LaTeX Article format  PDF via LaTeX - a pdf exported from LeTeX, requires a converter   When a Notebook is saved as a  .py  file, all text in markdown cells is converted to comments, and any code cells stay intact as Python code.",
            "title": "Saving Jupyter Notebooks in Other Formats"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.06-Magic-Cells/",
            "text": "Magic Cells\n\n\nJupyter notebook code cells can contain special commands which are not valid Python code but affect the behavior of the notebook.\n\n\n%matplotlib inline\n\n\n%matplotlib inline\n\n\nOne of the most popular magic commands is:\n\n\n%matplotlib inline\n\n\n\n\nEntering the \n%matplotlib inline\n command at the top of a Jupyter notebook renders Matplotlib plots in cells of the notebook. Without \n%matplotlib inline\n, plots may jump out as external windows. A typical start to a Jupyter notebook using \nMatplotlib\n might start as:\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\n\n\n%load\n\n\nThe \n%load\n command loads a Python module, webpage or file into a Jupyter notebook. If there is a file called \nhello.py\n in the same directory as the notebook with some Python code written in it, we can load that same code into a Jupyter notebook code cell with the \n%load\n command. \n\n\nWithin a Jupyter notebook code cell type the command:\n\n\n%load hello.py\n\n\n\n\nThe result is the code from the file \nhello.py\n is copied into the current notebook.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\n# %load hello.py\n\n\n# hello.py\n\n\n\nprint\n(\n'This code was run from a seperate Python file'\n)\n\n\nprint\n(\n'Hello from the file hello.py'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis code was run from a seperate Python file\nHello from the file hello.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n%run\n\n\nIf the \n%run\n magic command followed by the name of a valid Python file,  the Python file runs as a script. Suppose the file \nhello.py\n is created in the same directory as the running Jupyter notebook. The directory structure will look something like this:\n\n\n| folder\n---| notebook.ipynb\n---| hello.py\n\n\n\n\nIn the file \nhello.py\n is the code:\n\n\n# hello.py\n\nprint('This code was run from a separate Python file')\nprint('Hello from the file hello.py')\n\n\n\n\nWithin our Jupyter notebook, if we \n%run\n this file, we get the output of the \nhello.py\n script in a Jupyter notebook output cell.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\n%\nrun\n hello.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis code was run from a separate Python file\nHello from the file hello.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOther useful magic commands\n\n\nBelow is a table of other useful Jupyter notebook magic commands\n\n\n\n\n\n\n\n\nmagic command\n\n\nresult\n\n\n\n\n\n\n\n\n\n\n%pwd\n\n\nprint the current working directory\n\n\n\n\n\n\n%cd\n\n\nchange the current working directory\n\n\n\n\n\n\n%ls\n\n\nlist the contents of the current directory\n\n\n\n\n\n\n%history\n\n\nthe history of the \nIn [ ]:\n commands\n\n\n\n\n\n\n\n\nYou can list all of the available magic commands by typing and running \n%lsmagic\n in a Jupyter notebook code cell:\n\n\n%lsmagic\n\n\n\n\nThe output shows all the available line magic commands that begin with the percent sign \n%\n.\n\n\nAvailable line magics:\n%alias  %alias_magic  %autocall  %automagic  %autosave ...\n%dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui ...\ndir  %more  %mv  %notebook  %page  %pastebin  %pdb  %pdef ...\n...\n\nAvailable cell magics:\n%%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html ...\n%%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg ...",
            "title": "Magic Cells"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.06-Magic-Cells/#magic-cells",
            "text": "Jupyter notebook code cells can contain special commands which are not valid Python code but affect the behavior of the notebook.",
            "title": "Magic Cells"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.06-Magic-Cells/#matplotlib-inline",
            "text": "",
            "title": "%matplotlib inline"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.06-Magic-Cells/#matplotlib-inline_1",
            "text": "One of the most popular magic commands is:  %matplotlib inline  Entering the  %matplotlib inline  command at the top of a Jupyter notebook renders Matplotlib plots in cells of the notebook. Without  %matplotlib inline , plots may jump out as external windows. A typical start to a Jupyter notebook using  Matplotlib  might start as:  import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline",
            "title": "%matplotlib inline"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.06-Magic-Cells/#load",
            "text": "The  %load  command loads a Python module, webpage or file into a Jupyter notebook. If there is a file called  hello.py  in the same directory as the notebook with some Python code written in it, we can load that same code into a Jupyter notebook code cell with the  %load  command.   Within a Jupyter notebook code cell type the command:  %load hello.py  The result is the code from the file  hello.py  is copied into the current notebook.    In\u00a0[1]:  \n      # %load hello.py  # hello.py  print ( 'This code was run from a seperate Python file' )  print ( 'Hello from the file hello.py' )           This code was run from a seperate Python file\nHello from the file hello.py",
            "title": "%load"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.06-Magic-Cells/#run",
            "text": "If the  %run  magic command followed by the name of a valid Python file,  the Python file runs as a script. Suppose the file  hello.py  is created in the same directory as the running Jupyter notebook. The directory structure will look something like this:  | folder\n---| notebook.ipynb\n---| hello.py  In the file  hello.py  is the code:  # hello.py\n\nprint('This code was run from a separate Python file')\nprint('Hello from the file hello.py')  Within our Jupyter notebook, if we  %run  this file, we get the output of the  hello.py  script in a Jupyter notebook output cell.    In\u00a0[2]:  \n      % run  hello.py          This code was run from a separate Python file\nHello from the file hello.py",
            "title": "%run"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.06-Magic-Cells/#other-useful-magic-commands",
            "text": "Below is a table of other useful Jupyter notebook magic commands     magic command  result      %pwd  print the current working directory    %cd  change the current working directory    %ls  list the contents of the current directory    %history  the history of the  In [ ]:  commands     You can list all of the available magic commands by typing and running  %lsmagic  in a Jupyter notebook code cell:  %lsmagic  The output shows all the available line magic commands that begin with the percent sign  % .  Available line magics:\n%alias  %alias_magic  %autocall  %automagic  %autosave ...\n%dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui ...\ndir  %more  %mv  %notebook  %page  %pastebin  %pdb  %pdef ...\n...\n\nAvailable cell magics:\n%%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html ...\n%%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg ...",
            "title": "Other useful magic commands"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.07-Getting-Help-in-a-Jupyter-Notebook/",
            "text": "Getting Help in a Jupyter Notebook\n\n\nThere are a couple of different ways to get help when using a Jupyter notebook.\n\n\nGet help using \ndir\n\n\nTyping \ndir()\n and passing in a function, method, variable or object shows the possible object, method and function calls available to that object. For example, we can investigate the different functions in the \nglob\n module, part of Python's Standard Library, by importing \nglob\n, then calling \ndir(glob)\n.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nglob\n\n\ndir\n(\nglob\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[1]:\n\n\n\n\n\n\n\n\n['__all__',\n '__builtins__',\n '__cached__',\n '__doc__',\n '__file__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n '_glob0',\n '_glob1',\n '_glob2',\n '_iglob',\n '_ishidden',\n '_isrecursive',\n '_iterdir',\n '_rlistdir',\n 'escape',\n 'fnmatch',\n 'glob',\n 'glob0',\n 'glob1',\n 'has_magic',\n 'iglob',\n 'magic_check',\n 'magic_check_bytes',\n 'os',\n 're']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGet help using Tab\n\n\nAfter typing the name of a variable, object or function following the \n.\n character hit the \n[Tab]\n key. Typing \n[Tab]\n brings up a list of available options. Scroll through the list or type a letter to filter the list to certain starting letters. Use [Enter] to select the option you want.\n\n\nTab completion can also be used during module import. Hit tab after typing the module name to see which functions and classes are available in that module.\n\n\nfrom math import <tab>\n\n\n\n\nGet help using the \nhelp()\n function\n\n\nAfter importing a module, you can use the \nhelp()\n function to see documentation about the command if it is available.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nimport\n \nmath\n\n\nhelp\n(\nmath\n.\nsin\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHelp on built-in function sin in module math:\n\nsin(...)\n    sin(x)\n\n    Return the sine of x (measured in radians).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfter importing a module, you can view help on the imported module by typing the module name followed by a question mark \n?\n\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nimport\n \nstatistics\n\nstatistics.mean\n?\n\n\n\n\n\n\n\n\n\n\n\n\n\nSignature: statistics.mean(data)\nDocstring:\nReturn the sample arithmetic mean of data.\n\n>>> mean([1, 2, 3, 4, 4])\n2.8\n\n>>> from fractions import Fraction as F\n>>> mean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])\nFraction(13, 21)\n\n>>> from decimal import Decimal as D\n>>> mean([D(\"0.5\"), D(\"0.75\"), D(\"0.625\"), D(\"0.375\")])\nDecimal('0.5625')\n\nIf ``data`` is empty, StatisticsError will be raised.\nFile:      ~/anaconda3/envs/book/lib/python3.6/statistics.py\nType:      function\n\n\n\n\nYou can view the source code where a particular function is defined using a double question mark \n??\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nimport\n \nstatistics\n\nstatistics.mean\n??\n\n\n\n\n\n\n\n\n\n\n\n\n\nSignature: statistics.mean(data)\nSource:   \ndef mean(data):\n    \"\"\"Return the sample arithmetic mean of data.\n\n    >>> mean([1, 2, 3, 4, 4])\n    2.8\n\n    >>> from fractions import Fraction as F\n    >>> mean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])\n    Fraction(13, 21)\n\n    >>> from decimal import Decimal as D\n    >>> mean([D(\"0.5\"), D(\"0.75\"), D(\"0.625\"), D(\"0.375\")])\n    Decimal('0.5625')\n\n    If ``data`` is empty, StatisticsError will be raised.\n    \"\"\"\n    if iter(data) is data:\n        data = list(data)\n\n\n\n\nHelp online\n\n\nHelp is also available online at in the offical Jupyter documentation:\n\n\n\n\nhttp://jupyter.readthedocs.io/en/latest/\n\n\n\n\nYou can always try to find help by typing something into Google. The site Stack Overflow is devoted to programming questions and answers. The highest rated answers on Stack Overflow are at the top of each question page.",
            "title": "Getting Help in a Jupyter Notebook"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.07-Getting-Help-in-a-Jupyter-Notebook/#getting-help-in-a-jupyter-notebook",
            "text": "There are a couple of different ways to get help when using a Jupyter notebook.",
            "title": "Getting Help in a Jupyter Notebook"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.07-Getting-Help-in-a-Jupyter-Notebook/#get-help-using-dir",
            "text": "Typing  dir()  and passing in a function, method, variable or object shows the possible object, method and function calls available to that object. For example, we can investigate the different functions in the  glob  module, part of Python's Standard Library, by importing  glob , then calling  dir(glob) .   In\u00a0[1]:  \n      import   glob  dir ( glob )         Out[1]:   ['__all__',\n '__builtins__',\n '__cached__',\n '__doc__',\n '__file__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n '_glob0',\n '_glob1',\n '_glob2',\n '_iglob',\n '_ishidden',\n '_isrecursive',\n '_iterdir',\n '_rlistdir',\n 'escape',\n 'fnmatch',\n 'glob',\n 'glob0',\n 'glob1',\n 'has_magic',\n 'iglob',\n 'magic_check',\n 'magic_check_bytes',\n 'os',\n 're']",
            "title": "Get help using dir"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.07-Getting-Help-in-a-Jupyter-Notebook/#get-help-using-tab",
            "text": "After typing the name of a variable, object or function following the  .  character hit the  [Tab]  key. Typing  [Tab]  brings up a list of available options. Scroll through the list or type a letter to filter the list to certain starting letters. Use [Enter] to select the option you want.  Tab completion can also be used during module import. Hit tab after typing the module name to see which functions and classes are available in that module.  from math import <tab>",
            "title": "Get help using Tab"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.07-Getting-Help-in-a-Jupyter-Notebook/#get-help-using-the-help-function",
            "text": "After importing a module, you can use the  help()  function to see documentation about the command if it is available.   In\u00a0[2]:  \n      import   math  help ( math . sin )           Help on built-in function sin in module math:\n\nsin(...)\n    sin(x)\n\n    Return the sine of x (measured in radians).      \nAfter importing a module, you can view help on the imported module by typing the module name followed by a question mark  ?    In\u00a0[3]:  \n      import   statistics \nstatistics.mean ?       Signature: statistics.mean(data)\nDocstring:\nReturn the sample arithmetic mean of data.\n\n>>> mean([1, 2, 3, 4, 4])\n2.8\n\n>>> from fractions import Fraction as F\n>>> mean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])\nFraction(13, 21)\n\n>>> from decimal import Decimal as D\n>>> mean([D(\"0.5\"), D(\"0.75\"), D(\"0.625\"), D(\"0.375\")])\nDecimal('0.5625')\n\nIf ``data`` is empty, StatisticsError will be raised.\nFile:      ~/anaconda3/envs/book/lib/python3.6/statistics.py\nType:      function  You can view the source code where a particular function is defined using a double question mark  ??    In\u00a0[4]:  \n      import   statistics \nstatistics.mean ??       Signature: statistics.mean(data)\nSource:   \ndef mean(data):\n    \"\"\"Return the sample arithmetic mean of data.\n\n    >>> mean([1, 2, 3, 4, 4])\n    2.8\n\n    >>> from fractions import Fraction as F\n    >>> mean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])\n    Fraction(13, 21)\n\n    >>> from decimal import Decimal as D\n    >>> mean([D(\"0.5\"), D(\"0.75\"), D(\"0.625\"), D(\"0.375\")])\n    Decimal('0.5625')\n\n    If ``data`` is empty, StatisticsError will be raised.\n    \"\"\"\n    if iter(data) is data:\n        data = list(data)",
            "title": "Get help using the help() function"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.07-Getting-Help-in-a-Jupyter-Notebook/#help-online",
            "text": "Help is also available online at in the offical Jupyter documentation:   http://jupyter.readthedocs.io/en/latest/   You can always try to find help by typing something into Google. The site Stack Overflow is devoted to programming questions and answers. The highest rated answers on Stack Overflow are at the top of each question page.",
            "title": "Help online"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.08-Summary/",
            "text": "Summary\n\n\nIn this chapter, you learned about Jupyter notebooks. You learned what a Jupyter notebook is and why Jupyter notebooks are useful for problem solvers. This chapter showed how to install Jupyter notebooks on Windows, MacOS, and Linux. Some specific operations with Jupiter notebooks were introduced:\n\n\n\n\nhow to open a Jupyter Notebook\n\n\nhow to rename a Jupyter Notebook\n\n\nhow to write Python code in a Jupyter notebook code cells\n\n\nhow to run Python code in a Jupyter notebook code cell\n\n\nhow to write text in Jupyter notebook markdown cells\n\n\nhow to use markdown syntax to produce formatted text, headings, lists, and tables\n\n\nhow to save a Jupyter notebook\n\n\nhow to download a Jupyter notebook as different file types\n\n\n\n\nYou also learned about special \"magic\" commands that can be used in a Jupyter notebook. The final section of the chapter detailed a couple of ways to get help when working with Jupyter notebooks.\n\n\nKey Terms and Concepts\n\n\nJupyter\n\n\nnotebook\n\n\nJupyter notebook\n\n\nkernel\n\n\niPython\n\n\nIDE\n\n\ntext editor\n\n\nmarkdown\n\n\nexecute\n\n\nAnaconda Prompt\n\n\nfile browser\n\n\ncode cell\n\n\nmarkdown cell\n\n\ncode block\n\n\ninline code block\n\n\npipe character\n\n\nhyperlink\n\n\nLaTeX\n\n\nHTML tag\n\n\n.ipynb-file\n\n\n.py-file\n\n\n.md-file\n\n\nmagic commands\n\n\nPython Commands and Functions\n\n\nJupyter Notebook Magic Commands\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n%matplotlib inline\n\n\nDisplay plots in output cells\n\n\n\n\n\n\n%run file.py\n\n\nRuns file.py and displays output\n\n\n\n\n\n\n%pwd\n\n\nPrints the working directory file path\n\n\n\n\n\n\n%ls\n\n\nList contents of the current working directory\n\n\n\n\n\n\n%precision\n\n\nsets float point precision for pretty printing\n\n\n\n\n\n\n%whos\n\n\nlists variables and types in the running kernel session\n\n\n\n\n\n\nfunction?\n\n\nDisplay help on a function\n\n\n\n\n\n\nfunction??\n\n\nDisplay source code of a function",
            "title": "Summary"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.08-Summary/#summary",
            "text": "In this chapter, you learned about Jupyter notebooks. You learned what a Jupyter notebook is and why Jupyter notebooks are useful for problem solvers. This chapter showed how to install Jupyter notebooks on Windows, MacOS, and Linux. Some specific operations with Jupiter notebooks were introduced:   how to open a Jupyter Notebook  how to rename a Jupyter Notebook  how to write Python code in a Jupyter notebook code cells  how to run Python code in a Jupyter notebook code cell  how to write text in Jupyter notebook markdown cells  how to use markdown syntax to produce formatted text, headings, lists, and tables  how to save a Jupyter notebook  how to download a Jupyter notebook as different file types   You also learned about special \"magic\" commands that can be used in a Jupyter notebook. The final section of the chapter detailed a couple of ways to get help when working with Jupyter notebooks.",
            "title": "Summary"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.08-Summary/#key-terms-and-concepts",
            "text": "Jupyter  notebook  Jupyter notebook  kernel  iPython  IDE  text editor  markdown  execute  Anaconda Prompt  file browser  code cell  markdown cell  code block  inline code block  pipe character  hyperlink  LaTeX  HTML tag  .ipynb-file  .py-file  .md-file  magic commands",
            "title": "Key Terms and Concepts"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.08-Summary/#python-commands-and-functions",
            "text": "",
            "title": "Python Commands and Functions"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.08-Summary/#jupyter-notebook-magic-commands",
            "text": "Command  Description      %matplotlib inline  Display plots in output cells    %run file.py  Runs file.py and displays output    %pwd  Prints the working directory file path    %ls  List contents of the current working directory    %precision  sets float point precision for pretty printing    %whos  lists variables and types in the running kernel session    function?  Display help on a function    function??  Display source code of a function",
            "title": "Jupyter Notebook Magic Commands"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.10-Review-Questions/",
            "text": "Review Questions\n\n\nCode cells and markdown cells\n\n\nQ04.01 Run the following code in two different Jupyter notebook cells. Run one cell as a code cell. Run the other cell as a Markdown cell. Why is the output different?\n\n\n# Problem Solving with Python\n\n\n\n\nQ04.02 Run the following code in two different Jupyter notebook cells. Run one cell as a code cell. Run the other cell as a Markdown cell. Why is the output different?\n\n\nprint('Problem Solving with Python')\n\n\n\n\nMarkdown cells\n\n\nQ04.10 Recreate the following headings in one Jupyter notebook markdown cell:\n\n\n# BIG heading\n\n## Big heading\n\n### SMALL heading\n\n#### small heading\n\n\n\n\nQ04.11 Recreate the following table in one Jupyter notebook markdown cell:\n\n\n\n\n\n\n\n\nPython Package\n\n\nUse\n\n\n\n\n\n\n\n\n\n\nJupyter\n\n\njupyter notebooks\n\n\n\n\n\n\nNumPy\n\n\narrays\n\n\n\n\n\n\nMatplotlib\n\n\nplots\n\n\n\n\n\n\nPySerial\n\n\nserial communication\n\n\n\n\n\n\n\n\nQ04.12 Recreate the following code block in one Jupyter notebook markdown cell:\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\n\n\nQ04.12 Recreate the following bullet points in one Jupyter notebook markdown cell:\n\n\n\n\nmarkdown cell : markdown\n\n\ncode cell: Python code\n\n\nraw NBConvert: LaTeX\n\n\n\n\nQ04.13 Recreate the following list in one Jupyter notebook markdown cell:\n\n\n\n\nOpen Jupyter notebook\n\n\nWrite code\n\n\nRestart Kernel & run all\n\n\nDownload notebook\n\n\n\n\nQ04.14 Recreate two horizontal rules in a Jupyter notebook markdown cell. In between the horizontal rules write the text \nIn between the lines\n like below:\n\n\n\n\nIn between the lines\n\n\n\n\nQ04.15 Inside a Jupyter notebook markdown cell, make the word \nRed\n the color red, make the word \nGreen\n, the color green, make the word \nBlue\n the color blue.\n\n\nQ04.16 Create a warning box on the inside of a Jupyter notebook markdown cell that says: \n\n\nWarning!\n Python counting starts at 0 and ends at n-1 \n\n\nLaTeX Math\n\n\nQ04.20 Write the Pythagorean Theorem in a Jupyter notebook markdown cell using LaTeX math.\n\n\n\n\n a^2 + b^2 = c^2 \n\n\n a^2 + b^2 = c^2 \n\n\n\n\nQ04.20 Write the formula for the area of a circle in a Jupyter notebook markdown cell using LaTeX math.\n\n\n\n\n A = \\pi r^2 \n\n\n A = \\pi r^2 \n\n\n\n\nQ04.20 Write the formula below in a Jupyter notebook Markdown cell using LaTeX math.\n\n\n\n\n \\int_{0}^{1} \\frac{1}{y^3} dy \n\n\n \\int_{0}^{1} \\frac{1}{y^3} dy \n\n\n\n\nCode cells\n\n\nQ04.31 Run the following in a Jupyter notebook code cell:\n\n\nimport this\n\n\n\n\nQ04.32 Run the following in a Jupyter notebook code cell:\n\n\nimport sys\nprint(sys.version)\n\n\n\n\nQ04.33 Run the following in a Jupyter notebook code cell:\n\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.plot([1,3,6,10])\nplt.show()\n\n\n\n\nQ04.34 Run the following in a Jupyter notebook code cell. Move the slider back and forth:\n\n\nfrom ipywidgets import interact\nimport ipywidgets as widgets\n\ndef func(x):\n    return x\n\ninteract(func, x=10);\n\n\n\n\nCell Magic\n\n\nQ04.50 Create a file called \nhello.py\n in the same directory as your Jupyter notebook. Inside the file \nhello.py\n write the code below:\n\n\n# hello.py\n\nprint(\"hello from the file\")\n\n\n\n\nUse the Jupyter notebook magic command \n%load\n to load the code from \nhello.py\n into your Jupyter notebook.\n\n\nQ04.51 Create a file called \nhello.py\n in the same directory as your Jupyter notebook. Inside the file \nhello.py\n write the code below:\n\n\n# hello.py\n\nprint(\"hello from the file\")\n\n\n\n\nUse the Jupyter notebook magic command \n%run\n to run the code from \nhello.py\n into your Jupyter notebook.\n\n\nQ04.52 Run the code below in a Jupyter notebook code cell:\n\n\nimport os\n\nprint(os.getcwd())\n\n%pwd\n\n\n\n\nWhy is the output of these two commands similar?\n\n\nGetting Help\n\n\nQ04.60 Use Python's \ndir()\n function in a Jupyter notebook code cell to find all the functions available in Python's \nmath\n module. Remember to \nimport math\n at the start of the code cell.\n\n\nQ04.61 In a Jupyter notebook code cell, \nimport math\n and run \nmath.sqrt?\n. Copy the contents of the help you receive in a Jupyter notebook markdown cell.\n\n\nQ04.61 In a Jupyter notebook code cell, \nimport statistics\n and run \nstatistics.mode?\n. Copy the examples from the help you receive in a Jupyter notebook code cell. Run the code cell.",
            "title": "Review Questions"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.10-Review-Questions/#review-questions",
            "text": "",
            "title": "Review Questions"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.10-Review-Questions/#code-cells-and-markdown-cells",
            "text": "Q04.01 Run the following code in two different Jupyter notebook cells. Run one cell as a code cell. Run the other cell as a Markdown cell. Why is the output different?  # Problem Solving with Python  Q04.02 Run the following code in two different Jupyter notebook cells. Run one cell as a code cell. Run the other cell as a Markdown cell. Why is the output different?  print('Problem Solving with Python')",
            "title": "Code cells and markdown cells"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.10-Review-Questions/#markdown-cells",
            "text": "Q04.10 Recreate the following headings in one Jupyter notebook markdown cell:  # BIG heading\n\n## Big heading\n\n### SMALL heading\n\n#### small heading  Q04.11 Recreate the following table in one Jupyter notebook markdown cell:     Python Package  Use      Jupyter  jupyter notebooks    NumPy  arrays    Matplotlib  plots    PySerial  serial communication     Q04.12 Recreate the following code block in one Jupyter notebook markdown cell:  import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline  Q04.12 Recreate the following bullet points in one Jupyter notebook markdown cell:   markdown cell : markdown  code cell: Python code  raw NBConvert: LaTeX   Q04.13 Recreate the following list in one Jupyter notebook markdown cell:   Open Jupyter notebook  Write code  Restart Kernel & run all  Download notebook   Q04.14 Recreate two horizontal rules in a Jupyter notebook markdown cell. In between the horizontal rules write the text  In between the lines  like below:   In between the lines   Q04.15 Inside a Jupyter notebook markdown cell, make the word  Red  the color red, make the word  Green , the color green, make the word  Blue  the color blue.  Q04.16 Create a warning box on the inside of a Jupyter notebook markdown cell that says:   Warning!  Python counting starts at 0 and ends at n-1",
            "title": "Markdown cells"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.10-Review-Questions/#latex-math",
            "text": "Q04.20 Write the Pythagorean Theorem in a Jupyter notebook markdown cell using LaTeX math.    a^2 + b^2 = c^2    a^2 + b^2 = c^2    Q04.20 Write the formula for the area of a circle in a Jupyter notebook markdown cell using LaTeX math.    A = \\pi r^2    A = \\pi r^2    Q04.20 Write the formula below in a Jupyter notebook Markdown cell using LaTeX math.    \\int_{0}^{1} \\frac{1}{y^3} dy    \\int_{0}^{1} \\frac{1}{y^3} dy",
            "title": "LaTeX Math"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.10-Review-Questions/#code-cells",
            "text": "Q04.31 Run the following in a Jupyter notebook code cell:  import this  Q04.32 Run the following in a Jupyter notebook code cell:  import sys\nprint(sys.version)  Q04.33 Run the following in a Jupyter notebook code cell:  import matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.plot([1,3,6,10])\nplt.show()  Q04.34 Run the following in a Jupyter notebook code cell. Move the slider back and forth:  from ipywidgets import interact\nimport ipywidgets as widgets\n\ndef func(x):\n    return x\n\ninteract(func, x=10);",
            "title": "Code cells"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.10-Review-Questions/#cell-magic",
            "text": "Q04.50 Create a file called  hello.py  in the same directory as your Jupyter notebook. Inside the file  hello.py  write the code below:  # hello.py\n\nprint(\"hello from the file\")  Use the Jupyter notebook magic command  %load  to load the code from  hello.py  into your Jupyter notebook.  Q04.51 Create a file called  hello.py  in the same directory as your Jupyter notebook. Inside the file  hello.py  write the code below:  # hello.py\n\nprint(\"hello from the file\")  Use the Jupyter notebook magic command  %run  to run the code from  hello.py  into your Jupyter notebook.  Q04.52 Run the code below in a Jupyter notebook code cell:  import os\n\nprint(os.getcwd())\n\n%pwd  Why is the output of these two commands similar?",
            "title": "Cell Magic"
        },
        {
            "location": "/04-Jupyter-Notebooks/04.10-Review-Questions/#getting-help",
            "text": "Q04.60 Use Python's  dir()  function in a Jupyter notebook code cell to find all the functions available in Python's  math  module. Remember to  import math  at the start of the code cell.  Q04.61 In a Jupyter notebook code cell,  import math  and run  math.sqrt? . Copy the contents of the help you receive in a Jupyter notebook markdown cell.  Q04.61 In a Jupyter notebook code cell,  import statistics  and run  statistics.mode? . Copy the examples from the help you receive in a Jupyter notebook code cell. Run the code cell.",
            "title": "Getting Help"
        },
        {
            "location": "/05-Functions-and-Modules/05.00-Introduction/",
            "text": "Functions and Modules\n\n\nIntroduction\n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nCall functions in Python scripts\n\n\n\n\n\n\nImport functions into Python scripts\n\n\n\n\n\n\nCreate user-defined functions \n\n\n\n\n\n\nCreate Python functions with default arguments\n\n\n\n\n\n\nUtilize functions with positional and keyword arguments\n\n\n\n\n\n\nWrite reusable code for other problem solvers to use",
            "title": "Introduction"
        },
        {
            "location": "/05-Functions-and-Modules/05.00-Introduction/#functions-and-modules",
            "text": "",
            "title": "Functions and Modules"
        },
        {
            "location": "/05-Functions-and-Modules/05.00-Introduction/#introduction",
            "text": "By the end of this chapter you will be able to:    Call functions in Python scripts    Import functions into Python scripts    Create user-defined functions     Create Python functions with default arguments    Utilize functions with positional and keyword arguments    Write reusable code for other problem solvers to use",
            "title": "Introduction"
        },
        {
            "location": "/05-Functions-and-Modules/05.01-Why-functions/",
            "text": "Why Functions?\n\n\nFunctions are an essential part of most programming languages. Functions are reusable pieces of code that can be called using the function's name. Functions can be called anywhere in a Python program, including calling functions within other functions. \n\n\nFunctions provide a couple of benefits:\n\n\n\n\n\n\nFunctions allow the same piece of code to run multiple times\n\n\n\n\n\n\nFunctions break long programs up into smaller components\n\n\n\n\n\n\nFunctions can be shared and used by other programmers\n\n\n\n\n\n\nEvery function has a \nname\n. The function name is used when the function is \ncalled\n in a program. Calling a function means running a function.\n\n\nFunctions can receive input from the program. The input provided to a function is called \ninput arguments\n or just \narguments\n. Arguments are the code passed to a function as input. \n\n\nFunctions can produce output. We say a function \nreturns\n output to the program. The output of a function can be assigned to a variable for use in a program. \n\n\nBelow is an example calling Python's \npow()\n a function:\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nout\n \n=\n \npow\n(\n3\n,\n2\n)\n\n\n\n\n\n\n\n\n\n\n\nIn the function call above, the function name is \npow\n. \npow\n is the power function. The \npow\n function raises a number to a power. The input arguments are the numbers \n3\n and \n2\n. The function output is assigned to the variable \nout\n.  In this example, the function returns the value \n9\n (3 raised to the 2 power, \n3^2 = 9\n3^2 = 9\n).",
            "title": "Why Functions?"
        },
        {
            "location": "/05-Functions-and-Modules/05.01-Why-functions/#why-functions",
            "text": "Functions are an essential part of most programming languages. Functions are reusable pieces of code that can be called using the function's name. Functions can be called anywhere in a Python program, including calling functions within other functions.   Functions provide a couple of benefits:    Functions allow the same piece of code to run multiple times    Functions break long programs up into smaller components    Functions can be shared and used by other programmers    Every function has a  name . The function name is used when the function is  called  in a program. Calling a function means running a function.  Functions can receive input from the program. The input provided to a function is called  input arguments  or just  arguments . Arguments are the code passed to a function as input.   Functions can produce output. We say a function  returns  output to the program. The output of a function can be assigned to a variable for use in a program.   Below is an example calling Python's  pow()  a function:   In\u00a0[2]:  \n      out   =   pow ( 3 , 2 )      \nIn the function call above, the function name is  pow .  pow  is the power function. The  pow  function raises a number to a power. The input arguments are the numbers  3  and  2 . The function output is assigned to the variable  out .  In this example, the function returns the value  9  (3 raised to the 2 power,  3^2 = 9 3^2 = 9 ).",
            "title": "Why Functions?"
        },
        {
            "location": "/05-Functions-and-Modules/05.02-First-function/",
            "text": "First Function\n\n\nDefining Functions in Python\n\n\nFunction definitions in Python typically contain at least two lines. The first line defines the function name and arguments.\n\n\ndef function_name(arguments):\n    <code>\n    return output\n\n\n\n\nThe first line of code above contains a couple of parts:\n\n\ndef\n\n\n\n\nThe keyword \ndef\n needs to be the start of the line that declares the function. Def stands for \ndefinition\n and indicates to the Python interpreter that a function definition will follow.\n\n\nfunction_name\n\n\n\n\nEach function needs a name. The function name should start with a letter and is typically all lowercase (in Python names that start with Uppercase are usually used to define \nClasses\n). Function names need to start with a letter and can only contain letters, numbers and the underscore character. Just about any name will do, but it is best to avoid using any Python keywords such as \ndef\n, \nclass\n, \nif\n, \nelse\n, \nfor\n. A complete list of reserved Python keywords is in the index.  \n\n\n(argument):\n\n\n\n\nFunction names are followed by a set of parenthesis \n( )\n. Many functions have code, called \narguments\n in between the parenthesis. The name used for the function argument(s) should be used in the body of the function. After the function name, parenthesis, and arguments comes a \n:\n colon. In Python, a colon is required to end the first line of all functions.\n\n\n\n  \nA colon :\n is required at the end of the first line of every function. If the \n:\n is not present the code will not run.\n\n\n\n\n<code>\n\n\n\n\nThe body of the function contains the code that will run when the function is called. Any variables declared by the function arguments can be used in the body of the function. Any variables used in the body of the function are \nlocal variables\n.  Local variables cannot be called or accessed by other scripts. \n\n\nreturn\n\n\n\n\nThe \nreturn\n keyword is often the last line of a function. \nreturn\n indicates that whatever expression that follows will be the output of the function. The \nreturn\n keyword is not a function or a method, and parenthesis are not used after \nreturn\n, just a space.\n\n\noutput\n\n\n\n\nWhatever expression is included after \nreturn\n will be \nreturned\n by the function. The output expression after \nreturn\n can be a single variable, value or be a complex expression that includes multiple variables.\n\n\nYour First User-defined Function\n\n\nWhen you write your own functions, called \nuser-defined functions\n, you need to consider at least four things:\n\n\n\n\nWhat will be the function name?\n\n\nWhat, if any, input arguments will the function accept?\n\n\nWhat will the function do? What is the purpose of the chunk of code which runs when the function is called?\n\n\nWhat, if any, output will the function return?\n\n\n\n\nLet's write a simple function which adds two to any number. We will call our function \nplustwo\n. Our function has one input argument, a number. The function will return that number plus \n2\n. \n\n\nLet's apply this description to our four criteria:\n\n\n\n\nFunction name: \nplustwo\n\n\nInput arguments: a number\n\n\nWhat does the function do: add 2 to any number\n\n\nOutput: a number (2 + the input number)\n\n\n\n\nOur \nplustwo()\n function will operate as shown below:\n\n\nplustwo(3)\n5\n\n\n\n\nThe code section below defines our \nplustwo()\n function. \n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\ndef\n \nplustwo\n(\nn\n):\n\n    \nout\n \n=\n \nn\n \n+\n \n2\n\n    \nreturn\n \nout\n\n\n\n\n\n\n\n\n\n\n\nThe code section above includes the keyword \ndef\n, a space and then the function name \nplustwo\n. The input argument, \nn\n, is enclosed in parenthesis \n(  )\n after the function name. After the set of parenthesis is a colon \n:\n. The body of the function includes the code \nout = n + 2\n. The last line of the function includes the keyword \nreturn\n followed by a space and the variable \nout\n.\n\n\nLet's run our \nplustwo()\n function and see the output.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nplustwo\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe output of the \nplustwo()\n function can be assigned to variable.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nans\n \n=\n \nplustwo\n(\n10\n)\n\n\nans\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[3]:\n\n\n\n\n\n\n\n\n12",
            "title": "First Function"
        },
        {
            "location": "/05-Functions-and-Modules/05.02-First-function/#first-function",
            "text": "",
            "title": "First Function"
        },
        {
            "location": "/05-Functions-and-Modules/05.02-First-function/#defining-functions-in-python",
            "text": "Function definitions in Python typically contain at least two lines. The first line defines the function name and arguments.  def function_name(arguments):\n    <code>\n    return output  The first line of code above contains a couple of parts:  def  The keyword  def  needs to be the start of the line that declares the function. Def stands for  definition  and indicates to the Python interpreter that a function definition will follow.  function_name  Each function needs a name. The function name should start with a letter and is typically all lowercase (in Python names that start with Uppercase are usually used to define  Classes ). Function names need to start with a letter and can only contain letters, numbers and the underscore character. Just about any name will do, but it is best to avoid using any Python keywords such as  def ,  class ,  if ,  else ,  for . A complete list of reserved Python keywords is in the index.    (argument):  Function names are followed by a set of parenthesis  ( ) . Many functions have code, called  arguments  in between the parenthesis. The name used for the function argument(s) should be used in the body of the function. After the function name, parenthesis, and arguments comes a  :  colon. In Python, a colon is required to end the first line of all functions.  \n   A colon :  is required at the end of the first line of every function. If the  :  is not present the code will not run.  <code>  The body of the function contains the code that will run when the function is called. Any variables declared by the function arguments can be used in the body of the function. Any variables used in the body of the function are  local variables .  Local variables cannot be called or accessed by other scripts.   return  The  return  keyword is often the last line of a function.  return  indicates that whatever expression that follows will be the output of the function. The  return  keyword is not a function or a method, and parenthesis are not used after  return , just a space.  output  Whatever expression is included after  return  will be  returned  by the function. The output expression after  return  can be a single variable, value or be a complex expression that includes multiple variables.",
            "title": "Defining Functions in Python"
        },
        {
            "location": "/05-Functions-and-Modules/05.02-First-function/#your-first-user-defined-function",
            "text": "When you write your own functions, called  user-defined functions , you need to consider at least four things:   What will be the function name?  What, if any, input arguments will the function accept?  What will the function do? What is the purpose of the chunk of code which runs when the function is called?  What, if any, output will the function return?   Let's write a simple function which adds two to any number. We will call our function  plustwo . Our function has one input argument, a number. The function will return that number plus  2 .   Let's apply this description to our four criteria:   Function name:  plustwo  Input arguments: a number  What does the function do: add 2 to any number  Output: a number (2 + the input number)   Our  plustwo()  function will operate as shown below:  plustwo(3)\n5  The code section below defines our  plustwo()  function.    In\u00a0[1]:  \n      def   plustwo ( n ): \n     out   =   n   +   2 \n     return   out      \nThe code section above includes the keyword  def , a space and then the function name  plustwo . The input argument,  n , is enclosed in parenthesis  (  )  after the function name. After the set of parenthesis is a colon  : . The body of the function includes the code  out = n + 2 . The last line of the function includes the keyword  return  followed by a space and the variable  out .  Let's run our  plustwo()  function and see the output.   In\u00a0[2]:  \n      plustwo ( 3 )         Out[2]:   5      \nThe output of the  plustwo()  function can be assigned to variable.   In\u00a0[3]:  \n      ans   =   plustwo ( 10 )  ans         Out[3]:   12",
            "title": "Your First User-defined Function"
        },
        {
            "location": "/05-Functions-and-Modules/05.03-Functions-with-multiple-arguments/",
            "text": "Functions with Multiple Arguments\n\n\nFunctions can be written to accept multiple input arguments. When multiple arguments are specified, the arguments are listed within the parenthesis after the function name and separated by a comma:\n\n\ndef function_name(argument1, argument2):\n    <code>\n    return output\n\n\n\n\nA function that calculates the area of a triangle given the base and height of the triangle would accept two arguments \nbase\n and \nheight\n.  The formula for the area \nA\nA\n of a triangle given base \nb\nb\n and height \nh\nh\n is below.\n\n\n\n\n A = \\frac{1}{2} b \\times h \n\n\n A = \\frac{1}{2} b \\times h \n\n\n\n\nLet's name our function \ntriarea\n and accept \nbase\n and \nheight\n as input arguments. The \ntriarea\n function will return a number, the area of a triangle.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\ndef\n \ntriarea\n(\nbase\n,\n \nheight\n):\n\n    \narea\n \n=\n \n0.5\n \n \nbase\n \n \nheight\n\n    \nreturn\n \narea\n\n\n\n\n\n\n\n\n\n\n\nWe can test our \ntriarea()\n function with a couple of sets of input arguments.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\ntriarea\n(\n10\n,\n5\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\n25.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nA\n \n=\n \ntriarea\n(\n1\n,\n4\n)\n\n\nA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[3]:\n\n\n\n\n\n\n\n\n2.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote that if only one input argument is supplied to the \ntriarea()\n function, an error is returned:\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\ntriarea\n(\n2\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n\nTypeError\n                              Traceback (most recent call last)\n\n<ipython-input-4-ddd55ccdd949>\n in \n<module>\n\n\n----> 1\n \ntriarea\n(\n2\n)\n\n\n\nTypeError\n: triarea() missing 1 required positional argument: 'height'",
            "title": "Functions with Multiple Arguments"
        },
        {
            "location": "/05-Functions-and-Modules/05.03-Functions-with-multiple-arguments/#functions-with-multiple-arguments",
            "text": "Functions can be written to accept multiple input arguments. When multiple arguments are specified, the arguments are listed within the parenthesis after the function name and separated by a comma:  def function_name(argument1, argument2):\n    <code>\n    return output  A function that calculates the area of a triangle given the base and height of the triangle would accept two arguments  base  and  height .  The formula for the area  A A  of a triangle given base  b b  and height  h h  is below.    A = \\frac{1}{2} b \\times h    A = \\frac{1}{2} b \\times h    Let's name our function  triarea  and accept  base  and  height  as input arguments. The  triarea  function will return a number, the area of a triangle.   In\u00a0[1]:  \n      def   triarea ( base ,   height ): \n     area   =   0.5     base     height \n     return   area      \nWe can test our  triarea()  function with a couple of sets of input arguments.   In\u00a0[2]:  \n      triarea ( 10 , 5 )         Out[2]:   25.0         In\u00a0[3]:  \n      A   =   triarea ( 1 , 4 )  A         Out[3]:   2.0      \nNote that if only one input argument is supplied to the  triarea()  function, an error is returned:   In\u00a0[4]:  \n      triarea ( 2 )            ------------------------------------------------------------------------  TypeError                               Traceback (most recent call last) <ipython-input-4-ddd55ccdd949>  in  <module>  ----> 1   triarea ( 2 )  TypeError : triarea() missing 1 required positional argument: 'height'",
            "title": "Functions with Multiple Arguments"
        },
        {
            "location": "/05-Functions-and-Modules/05.04-Functions-with-default-arguments/",
            "text": "Functions with Default Arguments\n\n\nFunctions can be specified with default arguments. If values for these arguemnts are not supplied when the fuction is called, the default values are used. The general format to define a function with default arguments is below:\n\n\ndef function_name(arugment1=default_value, arguemnt2=default_value):\n    <code>\n    return output\n\n\n\n\nAn example a function with default arguments is a function that calculates the distance an object falls based on time. The general formula for fall distance \nd\nd\n based on fall time \nt\nt\n can be modeled as:\n\n\n\n\n d = \\frac{1}{2}gt^2 \n\n\n d = \\frac{1}{2}gt^2 \n\n\n\n\nWhere \ng\ng\n is the acceleration due to gravity. On earth the value of \ng = 9.81 m/s^2\ng = 9.81 m/s^2\n. But on the moon, \ng = 1.625 m/s^2\ng = 1.625 m/s^2\n.  Our \nfalldist()\n function will include the default value for earth's gravity and give programmers the option of specifying a different value for \ng\ng\n if they choose.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\ndef\n \nfalldist\n(\nt\n,\n \ng\n=\n9.81\n):\n\n    \nd\n \n=\n \n0.5\n \n \ng\n \n \nt\n**\n2\n\n    \nreturn\n \nd\n\n\n\n\n\n\n\n\n\n\n\nOn earth, the distance a ball that falls for three seconds is calculated by \nfalldist(3)\n. In the function call \nfalldist(3)\n, no value is specified for \ng\n, so the default value \n9.81\n is used.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nfalldist\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\n44.145\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn earth, we see the ball falls \n44.145\n meters in 3 seconds.\n\n\nHowever, on the moon gravity is much weaker than on earth. The acceleration of falling objects on the moon is \ng = 1.625 m/s^2\ng = 1.625 m/s^2\n. To calculate how far a ball falls on the moon in three seconds, two arguments need to be supplied to the \nfalldist()\n function: \n3\n and \n1.625\n. If a second argument is provided to the \nfalldist()\n function, in this case \n1.625\n, it overrides the default value assigned in the first line of the function.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nfalldist\n(\n3\n,\n \n1.625\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[4]:\n\n\n\n\n\n\n\n\n7.3125",
            "title": "Functions with Default Arguments"
        },
        {
            "location": "/05-Functions-and-Modules/05.04-Functions-with-default-arguments/#functions-with-default-arguments",
            "text": "Functions can be specified with default arguments. If values for these arguemnts are not supplied when the fuction is called, the default values are used. The general format to define a function with default arguments is below:  def function_name(arugment1=default_value, arguemnt2=default_value):\n    <code>\n    return output  An example a function with default arguments is a function that calculates the distance an object falls based on time. The general formula for fall distance  d d  based on fall time  t t  can be modeled as:    d = \\frac{1}{2}gt^2    d = \\frac{1}{2}gt^2    Where  g g  is the acceleration due to gravity. On earth the value of  g = 9.81 m/s^2 g = 9.81 m/s^2 . But on the moon,  g = 1.625 m/s^2 g = 1.625 m/s^2 .  Our  falldist()  function will include the default value for earth's gravity and give programmers the option of specifying a different value for  g g  if they choose.   In\u00a0[1]:  \n      def   falldist ( t ,   g = 9.81 ): \n     d   =   0.5     g     t ** 2 \n     return   d      \nOn earth, the distance a ball that falls for three seconds is calculated by  falldist(3) . In the function call  falldist(3) , no value is specified for  g , so the default value  9.81  is used.   In\u00a0[2]:  \n      falldist ( 3 )         Out[2]:   44.145      \nOn earth, we see the ball falls  44.145  meters in 3 seconds.  However, on the moon gravity is much weaker than on earth. The acceleration of falling objects on the moon is  g = 1.625 m/s^2 g = 1.625 m/s^2 . To calculate how far a ball falls on the moon in three seconds, two arguments need to be supplied to the  falldist()  function:  3  and  1.625 . If a second argument is provided to the  falldist()  function, in this case  1.625 , it overrides the default value assigned in the first line of the function.   In\u00a0[4]:  \n      falldist ( 3 ,   1.625 )         Out[4]:   7.3125",
            "title": "Functions with Default Arguments"
        },
        {
            "location": "/05-Functions-and-Modules/05.05-Calling-Functions-from-Other-Files/",
            "text": "Calling Functions from Other Files\n\n\nUser-defined functions can be called from other files. A function can be called and run in a different file than the file where the function is definition. If a new file called \nmyfunctions.py\n is created and contains two function definitions, \nplustwo()\n and \nfalldist()\n, the functions \nplustwo()\n and \nfalldist()\n can be used by a separate script as long as the file and function names are imported in the separate script first. It is essential that the file which contains the function definitions ends in the \n.py\n extension. Without a \n.py\n extension, the file where the functions are defined can not be imported.\nInside the file \nmyfuctions.py\n, two functions are defined using the code below.\n\n\n# myfunctions.py\n\ndef plustwo(n):\n    out = n + 2\n    return out\n\n\ndef falldist(t,g=9.81):\n    d = 0.5 * g * t**2\n    return d\n\n\n\n\nThis file, \nmyfunctions.py\n can be imported into another script (another \n.py\n file), or Jupyter Notebook.\n\n\nRemember the file that contains the function definitions and the file calling the functions must be in the same directory.\n\n\nTo use the functions written in one file inside another file include the import line, \nfrom filename import function_name\n. Note that although the file name must contain a \n.py\n extension, \n.py\n is not used as part of the filename during import.\n\n\nThe general syntax to import and call a function from a separate file is below:\n\n\nfrom function_file import function_name\n\nfunction_name(arguments)\n\n\n\n\nAn example using this syntax with the \nmyfunctions.py\n file and the functions \nplustwo()\n and \nfalldist()\n is below:\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nfrom\n \nmyfunctions\n \nimport\n \nplustwo\n\n\nplustwo\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[1]:\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultiple functions can be imported from the same file by separating the imported functions with commas. The general syntax to import and call multiple functions from the same file is below:\n\n\nfrom function_file import function_name1, function_name2\n\nfunction_name1(arguments)\nfunction_name2(arguments)\n\n\n\n\nAn example using this syntax with the \nmyfunctions.py\n file and the functions \nplustwo()\n and \nfalldist()\n is below:\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nfrom\n \nmyfunctions\n \nimport\n \nfalldist\n,\n \nplustwo\n\n\nout1\n \n=\n \nfalldist\n(\n3\n)\n\n\nout2\n \n=\n \nplustwo\n(\n3\n)\n\n\nprint\n(\nout1\n,\n \nout2\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n44.145 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother way to import and use the functions from \nmyfunctions.py\n into another script or Jupyter notebook is to import the entire \nmyfunctions.py\n file with \nimport myfunctions\n, then call the functions with the syntax below. \n\n\nimport function_file\n\nfunction_file.function_name()\n\n\n\n\nAn example using this syntax with the \nmyfunctions.py\n file is below.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nimport\n \nmyfunctions\n\n\nmyfunctions\n.\nplustwo\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[3]:\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nimport\n \nmyfunctions\n\n\nmyfunctions\n.\nfalldist\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[4]:\n\n\n\n\n\n\n\n\n44.145",
            "title": "Calling Functions from Other Files"
        },
        {
            "location": "/05-Functions-and-Modules/05.05-Calling-Functions-from-Other-Files/#calling-functions-from-other-files",
            "text": "User-defined functions can be called from other files. A function can be called and run in a different file than the file where the function is definition. If a new file called  myfunctions.py  is created and contains two function definitions,  plustwo()  and  falldist() , the functions  plustwo()  and  falldist()  can be used by a separate script as long as the file and function names are imported in the separate script first. It is essential that the file which contains the function definitions ends in the  .py  extension. Without a  .py  extension, the file where the functions are defined can not be imported.\nInside the file  myfuctions.py , two functions are defined using the code below.  # myfunctions.py\n\ndef plustwo(n):\n    out = n + 2\n    return out\n\n\ndef falldist(t,g=9.81):\n    d = 0.5 * g * t**2\n    return d  This file,  myfunctions.py  can be imported into another script (another  .py  file), or Jupyter Notebook.  Remember the file that contains the function definitions and the file calling the functions must be in the same directory.  To use the functions written in one file inside another file include the import line,  from filename import function_name . Note that although the file name must contain a  .py  extension,  .py  is not used as part of the filename during import.  The general syntax to import and call a function from a separate file is below:  from function_file import function_name\n\nfunction_name(arguments)  An example using this syntax with the  myfunctions.py  file and the functions  plustwo()  and  falldist()  is below:   In\u00a0[1]:  \n      from   myfunctions   import   plustwo  plustwo ( 3 )         Out[1]:   5      \nMultiple functions can be imported from the same file by separating the imported functions with commas. The general syntax to import and call multiple functions from the same file is below:  from function_file import function_name1, function_name2\n\nfunction_name1(arguments)\nfunction_name2(arguments)  An example using this syntax with the  myfunctions.py  file and the functions  plustwo()  and  falldist()  is below:   In\u00a0[2]:  \n      from   myfunctions   import   falldist ,   plustwo  out1   =   falldist ( 3 )  out2   =   plustwo ( 3 )  print ( out1 ,   out2 )           44.145 5      \nAnother way to import and use the functions from  myfunctions.py  into another script or Jupyter notebook is to import the entire  myfunctions.py  file with  import myfunctions , then call the functions with the syntax below.   import function_file\n\nfunction_file.function_name()  An example using this syntax with the  myfunctions.py  file is below.   In\u00a0[3]:  \n      import   myfunctions  myfunctions . plustwo ( 3 )         Out[3]:   5         In\u00a0[4]:  \n      import   myfunctions  myfunctions . falldist ( 3 )         Out[4]:   44.145",
            "title": "Calling Functions from Other Files"
        },
        {
            "location": "/05-Functions-and-Modules/05.06-Docstrings-in-Functions/",
            "text": "Docstrings in Functions\n\n\nIt is good programming practice to document your code. Reusable chunks of code are particularly relevant to document as other programmers may use the code, and you may use the code again at a different time. \n\n\nPython has a couple of different ways for programmers to add documentation. One way is to use simple comments. Comments are lines of code that do not get run by the Python interpreter. Comments are meant to be viewed by humans. In Python, comment lines start with the pound symbol \n#\n. Any line that starts with a \n#\n symbol will not be run by the Python Interpreter.\n\n\nAnother way to document code is to use \ndocstrings\n. Docstrings are comments which are surrounded with triple quotation marks and usually contain multiple lines of explanation. A function containing a docstring takes the form:\n\n\ndef function_name(arguments):\n    \"\"\"\"\n    Docstring text\n\n\n\n    \"\"\"\n    <code>\n\n    return output\n\n\n\n\n\nDoc strings are what you see when the \nhelp()\n function is called. As an example, running the \nhelp()\n function on the built-in function \nsum\n brings up:\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nhelp\n(\nsum\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHelp on built-in function sum in module builtins:\n\nsum(iterable, start=0, /)\n    Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n\n    When the iterable is empty, return the start value.\n    This function is intended specifically for use with numeric values and may\n    reject non-numeric types.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can produce the same type of output when a user types types \nhelp()\n by adding docstrings to a function.\nLet's create a new function that converts grams (g) to kilograms (kg). Let's call our function \ng2kg\n. The first thing to do is make sure that the name \ng2kg\n is not assigned to another function and is not a keyword by Python. We can check quick using Python's built-in \ntype()\n function. We know that \nsum()\n is a Python function, how about \ng2kg()\n?\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nprint\n(\ntype\n(\nsum\n))\n\n\nprint\n(\ntype\n(\ng2kg\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<class 'builtin_function_or_method'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---------------------------------------------------------------------------\n\n\nNameError\n                                 Traceback (most recent call last)\n\n<ipython-input-2-487fcfc6eb43>\n in \n<module>\n()\n\n\n      1\n print\n(\ntype\n(\nsum\n)\n)\n\n\n----> 2\n \nprint\n(\ntype\n(\ng2kg\n)\n)\n\n\n\nNameError\n: name 'g2kg' is not defined\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSince \ng2kg\n is not already defined in Python, we can use \ng2kg\n as the name of a new user-defined function. Remember the \nparenthesis\n, \ncolon\n, and \nreturn\n statement.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\ndef\n \ng2kg\n(\ng\n):\n\n    \nkg\n \n=\n \ng\n/\n1000\n\n\n<span class=\"k\">return</span> <span class=\"n\">kg</span>\n\n\n\n\n\n\n\n\n\n\n\n\nNow let's try and use our function. How many kilograms is 1300 grams? We expect the output to be \n1.3\n kilograms.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\ng2kg\n(\n1300\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[4]:\n\n\n\n\n\n\n\n\n1.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf we call \nhelp()\n on our \ng2kg()\n function, nothing is returned. \nhelp(g2kg)\n does not return any output because our new \ng2kg()\n function does not contain a docstring yet.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nhelp\n(\ng2kg\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHelp on function g2kg in module __main__:\n\ng2kg(g)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf we insert a docstring into the function definition, \nhelp(g2kg)\n will return whatever text we included in the docstring.\n\n\nThe standard components of docstrings included in function definitions include:\n\n\n\n\na summary of the function\n\n\nthe function inputs\n\n\nthe function outputs\n\n\nan example of the function running including the result\n\n\n\n\nThe docstring is included right below the \ndef\n line and is enclosed in triple quotes \n\"\"\"  \"\"\"\n. The triple quotes are typically included on their own lines. The syntax to add a docstring in a function definition is below.\n\n\n def function_name(arguments):\n     \"\"\"\n\n     <docstring text>\n\n     \"\"\"\n\n     <code>\n\n     return output\n\n\n\n\nLet's include a docstring with our \ng2kg()\n function definition.\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\ndef\n \ng2kg\n(\ng\n):\n\n    \n\"\"\"\n\n\n    \n\n\n    Function g2kg converts between g and kg\n\n\n    \n\n\n    input: number of grams, int or float\n\n\n    output: number of kilograms, float\n\n\n    \n\n\n    Example:\n\n\n    \n\n\n        >>> g2kg(1300)\n\n\n            \n\n\n            1.3\n\n\n        \n\n\n    \"\"\"\n\n    \nkg\n \n=\n \ng\n/\n1000\n\n\n<span class=\"k\">return</span> <span class=\"n\">kg</span>\n\n\n\n\n\n\n\n\n\n\n\n\nNow let's ask for \nhelp()\n on our \ng2kg()\n function and see the docstring we wrote in the \ng2kg()\n function definition printed back to us.\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nhelp\n(\ng2kg\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHelp on function g2kg in module __main__:\n\ng2kg(g)\n    Function g2kg converts between g and kg\n\n    input: number of grams, int or float\n    output: number of kilograms, float\n\n    Example:\n\n        >>> g2kg(1300)\n\n            1.3",
            "title": "Docstrings in Functions"
        },
        {
            "location": "/05-Functions-and-Modules/05.06-Docstrings-in-Functions/#docstrings-in-functions",
            "text": "It is good programming practice to document your code. Reusable chunks of code are particularly relevant to document as other programmers may use the code, and you may use the code again at a different time.   Python has a couple of different ways for programmers to add documentation. One way is to use simple comments. Comments are lines of code that do not get run by the Python interpreter. Comments are meant to be viewed by humans. In Python, comment lines start with the pound symbol  # . Any line that starts with a  #  symbol will not be run by the Python Interpreter.  Another way to document code is to use  docstrings . Docstrings are comments which are surrounded with triple quotation marks and usually contain multiple lines of explanation. A function containing a docstring takes the form:  def function_name(arguments):\n    \"\"\"\"\n    Docstring text\n\n\n\n    \"\"\"\n    <code>\n\n    return output  Doc strings are what you see when the  help()  function is called. As an example, running the  help()  function on the built-in function  sum  brings up:   In\u00a0[1]:  \n      help ( sum )           Help on built-in function sum in module builtins:\n\nsum(iterable, start=0, /)\n    Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n\n    When the iterable is empty, return the start value.\n    This function is intended specifically for use with numeric values and may\n    reject non-numeric types.      \nWe can produce the same type of output when a user types types  help()  by adding docstrings to a function.\nLet's create a new function that converts grams (g) to kilograms (kg). Let's call our function  g2kg . The first thing to do is make sure that the name  g2kg  is not assigned to another function and is not a keyword by Python. We can check quick using Python's built-in  type()  function. We know that  sum()  is a Python function, how about  g2kg() ?    In\u00a0[2]:  \n      print ( type ( sum ))  print ( type ( g2kg ))           <class 'builtin_function_or_method'>        ---------------------------------------------------------------------------  NameError                                  Traceback (most recent call last) <ipython-input-2-487fcfc6eb43>  in  <module> ()        1  print ( type ( sum ) )  ----> 2   print ( type ( g2kg ) )  NameError : name 'g2kg' is not defined       Since  g2kg  is not already defined in Python, we can use  g2kg  as the name of a new user-defined function. Remember the  parenthesis ,  colon , and  return  statement.   In\u00a0[3]:  \n      def   g2kg ( g ): \n     kg   =   g / 1000  <span class=\"k\">return</span> <span class=\"n\">kg</span>      \nNow let's try and use our function. How many kilograms is 1300 grams? We expect the output to be  1.3  kilograms.   In\u00a0[4]:  \n      g2kg ( 1300 )         Out[4]:   1.3      \nIf we call  help()  on our  g2kg()  function, nothing is returned.  help(g2kg)  does not return any output because our new  g2kg()  function does not contain a docstring yet.   In\u00a0[5]:  \n      help ( g2kg )           Help on function g2kg in module __main__:\n\ng2kg(g)      \nIf we insert a docstring into the function definition,  help(g2kg)  will return whatever text we included in the docstring.  The standard components of docstrings included in function definitions include:   a summary of the function  the function inputs  the function outputs  an example of the function running including the result   The docstring is included right below the  def  line and is enclosed in triple quotes  \"\"\"  \"\"\" . The triple quotes are typically included on their own lines. The syntax to add a docstring in a function definition is below.   def function_name(arguments):\n     \"\"\"\n\n     <docstring text>\n\n     \"\"\"\n\n     <code>\n\n     return output  Let's include a docstring with our  g2kg()  function definition.   In\u00a0[6]:  \n      def   g2kg ( g ): \n     \"\"\"            Function g2kg converts between g and kg            input: number of grams, int or float      output: number of kilograms, float            Example:                >>> g2kg(1300)                            1.3                \"\"\" \n     kg   =   g / 1000  <span class=\"k\">return</span> <span class=\"n\">kg</span>      \nNow let's ask for  help()  on our  g2kg()  function and see the docstring we wrote in the  g2kg()  function definition printed back to us.   In\u00a0[7]:  \n      help ( g2kg )           Help on function g2kg in module __main__:\n\ng2kg(g)\n    Function g2kg converts between g and kg\n\n    input: number of grams, int or float\n    output: number of kilograms, float\n\n    Example:\n\n        >>> g2kg(1300)\n\n            1.3",
            "title": "Docstrings in Functions"
        },
        {
            "location": "/05-Functions-and-Modules/05.07-Positional-and-Keyword-Arguments/",
            "text": "Positional and Keyword Arguments\n\n\nPython functions can contain two types of arguments: \npositional arguments\n and \nkeyword arguments\n. Positional arguments are included in the correct order. Keyword arguments are included with a keyword and equals sign.\n\n\nPositional Arguments\n\n\nAn \nargument\n is a variable, value or object passed to a function or method. \nPositional arguments\n are arguments that need to be included when a function is called in the proper position or order. \n\n\nThe first positional argument always needs to be listed first. The second positional argument needs to be listed second and the third positional argument listed third, etc. \n\n\nAn example of positional arguments can be seen in Python's \ncomplex()\n function. This function returns a complex number with a real term and an imaginary term. The order that numbers are passed to the complex function determines which number is the real term and which number is the imaginary term.\n\n\nIf the complex number \n3 + 5j\n is created, the two positional arguments are the numbers \n3\n and \n5\n. As positional arguments, \n3\n must be listed first, and \n5\n must be listed second. \n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\ncomplex\n(\n3\n,\n \n5\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[1]:\n\n\n\n\n\n\n\n\n(3+5j)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn the other hand, if the complex number \n5 + 3j\n needs to be created, the \n5\n needs to be listed first and the \n3\n listed second. Writing the same arguments in a different order produces a different result.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\ncomplex\n(\n5\n,\n \n3\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\n(5+3j)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPositional Arguments Specified by an Iterable\n\n\nPositional arguments can also be passed to functions using an iterable object. Examples of iterable objects in Python include lists and tuples. The general syntax to use is:\n\n\nfunction(*iterable)\n\n\n\n\nWhere \nfunction\n is the name of the function and \niterable\n is the name of the iterable preceded by the ampersand \n*\n character. \n\n\nAn example of using a list to pass positional arguments to the \ncomplex()\n function is below. Note the ampersand \n*\n character is included before the \nterm_list\n argument.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nterm_list\n \n=\n \n[\n3\n,\n \n5\n]\n\n\ncomplex\n(\n*\nterm_list\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[3]:\n\n\n\n\n\n\n\n\n(3+5j)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeyword Arguments\n\n\nA \nkeyword argument\n is an argument passed to a function or method which is preceded by a \nkeyword\n and an equals sign.  The general form is:\n\n\nfunction(keyword=value)\n\n\n\n\nWhere \nfunction\n is the function name, \nkeyword\n is the keyword argument and value is the value or object passed as that keyword. Python's complex function can also accept two keyword arguments. The two keyword arguments are \nreal=\n and \nimag=\n. To create the complex number \n3 + 5j\n the \n3\n and \n5\n can be passed to the function as the values assigned to the keyword arguments \nreal=\n and \nimag=\n.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\ncomplex\n(\nreal\n=\n3\n,\n \nimag\n=\n5\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[4]:\n\n\n\n\n\n\n\n\n(3+5j)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeyword arguments are passed to functions after any required positional arguments. But the order of one keyword argument compared to another keyword argument does not matter. Note how both sections of code below produce the same output.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\ncomplex\n(\nreal\n=\n3\n,\n \nimag\n=\n5\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[5]:\n\n\n\n\n\n\n\n\n(3+5j)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\ncomplex\n(\nimag\n=\n5\n,\n \nreal\n=\n3\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[6]:\n\n\n\n\n\n\n\n\n(3+5j)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeyword Arguments specified by a dictionary\n\n\nKeyword arguments can also be passed to functions using a Python dictionary. The dictionary must contain the keywords as keys in the dictionary and the values as values in the dictionary. The general form is:\n\n\nkeyword_dict = {'keyword1': value1, 'keyword2': value2}\nfunction(**keyword_dict)\n\n\n\n\nWhere \nfunction\n is the name of the function and \nkeyword_dict\n is the name of the dictionary containing keywords and values preceded by the double ampersand \n**\n character. Note that the keywords assigned as keys in a dictionary must be surrounded by quotes \n' '\n. An example of using a dictionary to pass keyword arguments to the \ncomplex()\n function is below:\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nkeyword_dict\n \n=\n \n{\n'real'\n:\n \n3\n,\n \n'imag'\n:\n \n5\n}\n\n\ncomplex\n(\n**\nkeyword_dict\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[7]:\n\n\n\n\n\n\n\n\n(3+5j)",
            "title": "Positional and Keyword Arguments"
        },
        {
            "location": "/05-Functions-and-Modules/05.07-Positional-and-Keyword-Arguments/#positional-and-keyword-arguments",
            "text": "Python functions can contain two types of arguments:  positional arguments  and  keyword arguments . Positional arguments are included in the correct order. Keyword arguments are included with a keyword and equals sign.",
            "title": "Positional and Keyword Arguments"
        },
        {
            "location": "/05-Functions-and-Modules/05.07-Positional-and-Keyword-Arguments/#positional-arguments",
            "text": "An  argument  is a variable, value or object passed to a function or method.  Positional arguments  are arguments that need to be included when a function is called in the proper position or order.   The first positional argument always needs to be listed first. The second positional argument needs to be listed second and the third positional argument listed third, etc.   An example of positional arguments can be seen in Python's  complex()  function. This function returns a complex number with a real term and an imaginary term. The order that numbers are passed to the complex function determines which number is the real term and which number is the imaginary term.  If the complex number  3 + 5j  is created, the two positional arguments are the numbers  3  and  5 . As positional arguments,  3  must be listed first, and  5  must be listed second.    In\u00a0[1]:  \n      complex ( 3 ,   5 )         Out[1]:   (3+5j)      \nOn the other hand, if the complex number  5 + 3j  needs to be created, the  5  needs to be listed first and the  3  listed second. Writing the same arguments in a different order produces a different result.   In\u00a0[2]:  \n      complex ( 5 ,   3 )         Out[2]:   (5+3j)",
            "title": "Positional Arguments"
        },
        {
            "location": "/05-Functions-and-Modules/05.07-Positional-and-Keyword-Arguments/#positional-arguments-specified-by-an-iterable",
            "text": "Positional arguments can also be passed to functions using an iterable object. Examples of iterable objects in Python include lists and tuples. The general syntax to use is:  function(*iterable)  Where  function  is the name of the function and  iterable  is the name of the iterable preceded by the ampersand  *  character.   An example of using a list to pass positional arguments to the  complex()  function is below. Note the ampersand  *  character is included before the  term_list  argument.   In\u00a0[3]:  \n      term_list   =   [ 3 ,   5 ]  complex ( * term_list )         Out[3]:   (3+5j)",
            "title": "Positional Arguments Specified by an Iterable"
        },
        {
            "location": "/05-Functions-and-Modules/05.07-Positional-and-Keyword-Arguments/#keyword-arguments",
            "text": "A  keyword argument  is an argument passed to a function or method which is preceded by a  keyword  and an equals sign.  The general form is:  function(keyword=value)  Where  function  is the function name,  keyword  is the keyword argument and value is the value or object passed as that keyword. Python's complex function can also accept two keyword arguments. The two keyword arguments are  real=  and  imag= . To create the complex number  3 + 5j  the  3  and  5  can be passed to the function as the values assigned to the keyword arguments  real=  and  imag= .   In\u00a0[4]:  \n      complex ( real = 3 ,   imag = 5 )         Out[4]:   (3+5j)      \nKeyword arguments are passed to functions after any required positional arguments. But the order of one keyword argument compared to another keyword argument does not matter. Note how both sections of code below produce the same output.   In\u00a0[5]:  \n      complex ( real = 3 ,   imag = 5 )         Out[5]:   (3+5j)         In\u00a0[6]:  \n      complex ( imag = 5 ,   real = 3 )         Out[6]:   (3+5j)",
            "title": "Keyword Arguments"
        },
        {
            "location": "/05-Functions-and-Modules/05.07-Positional-and-Keyword-Arguments/#keyword-arguments-specified-by-a-dictionary",
            "text": "Keyword arguments can also be passed to functions using a Python dictionary. The dictionary must contain the keywords as keys in the dictionary and the values as values in the dictionary. The general form is:  keyword_dict = {'keyword1': value1, 'keyword2': value2}\nfunction(**keyword_dict)  Where  function  is the name of the function and  keyword_dict  is the name of the dictionary containing keywords and values preceded by the double ampersand  **  character. Note that the keywords assigned as keys in a dictionary must be surrounded by quotes  ' ' . An example of using a dictionary to pass keyword arguments to the  complex()  function is below:   In\u00a0[7]:  \n      keyword_dict   =   { 'real' :   3 ,   'imag' :   5 }  complex ( ** keyword_dict )         Out[7]:   (3+5j)",
            "title": "Keyword Arguments specified by a dictionary"
        },
        {
            "location": "/05-Functions-and-Modules/05.08-Summary/",
            "text": "Summary\n\n\nThis chapter introduced user-defined functions. Functions are useful because functions are reusable pieces of code. All functions have names. Some functions take input arguments and produce output. Functions in Python are defined with the keyword \ndef\n.  You learned how to create functions with default arguments. You also learned the difference between positional arguments and keyword arguments. Positional arguments must be included in the proper order. Keyword arguments must include the keyword name and an equals sign.  You learned how to call functions which are contained in a different file than the file that calls the function.  One section of the chapter reviewed how docstrings work in Python functions and the results of calling Python's \nhelp()\n on a function that contains a docstring.\n\n\nKey Terms and Concepts\n\n\nfunction\n\n\nfunction definition\n\n\narguments\n\n\ndefault arguments\n\n\npositional arguments\n\n\nkeyword arguments\n\n\nkeyword\n\n\noutput\n\n\ndocstring\n\n\nreturn\n\n\n.py-file\n\n\nimport\n\n\nsyntax\n\n\ncomments\n\n\ndocumentation\n\n\niterable\n\n\nPython Commands\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndef\n\n\ndefine a function\n\n\n\n\n\n\nreturn\n\n\ndefine the expression or value a function outputs\n\n\n\n\n\n\nimport\n\n\nimport a module or .py file\n\n\n\n\n\n\nfrom\n\n\nimport a function or class from a module or .py file\n\n\n\n\n\n\nas\n\n\nname an alias for a function, method or class\n\n\n\n\n\n\n\"\"\"   \"\"\"\n\n\ndefine a doc string",
            "title": "Summary"
        },
        {
            "location": "/05-Functions-and-Modules/05.08-Summary/#summary",
            "text": "This chapter introduced user-defined functions. Functions are useful because functions are reusable pieces of code. All functions have names. Some functions take input arguments and produce output. Functions in Python are defined with the keyword  def .  You learned how to create functions with default arguments. You also learned the difference between positional arguments and keyword arguments. Positional arguments must be included in the proper order. Keyword arguments must include the keyword name and an equals sign.  You learned how to call functions which are contained in a different file than the file that calls the function.  One section of the chapter reviewed how docstrings work in Python functions and the results of calling Python's  help()  on a function that contains a docstring.",
            "title": "Summary"
        },
        {
            "location": "/05-Functions-and-Modules/05.08-Summary/#key-terms-and-concepts",
            "text": "function  function definition  arguments  default arguments  positional arguments  keyword arguments  keyword  output  docstring  return  .py-file  import  syntax  comments  documentation  iterable",
            "title": "Key Terms and Concepts"
        },
        {
            "location": "/05-Functions-and-Modules/05.08-Summary/#python-commands",
            "text": "Command  Description      def  define a function    return  define the expression or value a function outputs    import  import a module or .py file    from  import a function or class from a module or .py file    as  name an alias for a function, method or class    \"\"\"   \"\"\"  define a doc string",
            "title": "Python Commands"
        },
        {
            "location": "/05-Functions-and-Modules/05.09-Review-Questions/",
            "text": "Review Questions\n\n\nUser-defined functions\n\n\nQ05.01 Write a function called \nft_to_in()\n which converts feet to inches. Note the conversion factor is 1 foot = 12 inches. Convert 6 feet into inches using your function.\n\n\nQ05.02 Write a function called \nm_to_ft()\n which converts meters to feet. Note the conversion factor is 1 meter =  3.28084 feet. Convert 5,000 meters into feet using your function.\n\n\nQ05.03 Use the functions in questions Q05.01 and Q05.02 to convert 2 meters into inches.\n\n\nQ05.04 Write a function that calculates the area of a circle based on a circle's radius. The formula for the area of a circle is \nA = \\pi r^2\nA = \\pi r^2\n where \nA\nA\n is area and \nr\nr\n is radius. Use your function to calculate the area of circle with a radius of 5.\n\n\nQ05.05 Write a function that converts degrees Celcius (\nC\nC\n) to degrees Fahrenheit (\nF\nF\n). The formula to convert between the two temperature scales is \nF = \\frac{9}{5} C + 32\nF = \\frac{9}{5} C + 32\n\n\nQ05.06 Write a function that converts Kelvin temperature (\nK\nK\n) to degrees Celcius (\nC\nC\n). The formula to convert between the two temperature scales is \nC = K - 273.15\nC = K - 273.15\n.\n\n\nQ05.07 Use the functions in questions Q05.05 and Q05.06 to convert to convert the temperature at Standard Temperature and Pressure (STP) of \n273.15 K\n273.15 K\n into degrees Fahrenheit.\n\n\nQ05.08 Use the functions in questions Q05.05 and Q05.06 to convert to convert the temperature at absolute zero, \n0 K\n0 K\n into degrees Celcius and degrees Fahrenheit.\n\n\nQ05.09 Write a function called \nhp_to_kw()\n which converts horse power (\nhp\nhp\n) into kilowatts (\nkW\nkW\n). Note the conversion factor is \n1 hp =  0.7457 kW\n1 hp =  0.7457 kW\n. Convert the horsepower of the average horse, \n14.9 hp\n14.9 hp\n, into kilowatts (\nkW\nkW\n).\n\n\nFunctions with multiple arguments\n\n\nQ05.20 Write a function called \ncyl_v()\n that calculates the volume \nV\nV\n of a cylinder based on cylinder height \nh\nh\n and cylinder radius \nr\nr\n. The formula for the volume of a cylinder is below:\n\n\n\n\n V = \\pi r^2 h \n\n\n V = \\pi r^2 h \n\n\n\n\nUse your function \ncyl_v()\n to calculate the volume of a cylinder with height = 2.7 and radius = 0.73.\n\n\nQ05.21 The universal gas law states that the pressure \nP\nP\n,  and temperature \nT\nT\n of volume \nV\nV\n of gas with number of particles \nn\nn\n is related by the equation below, where \nR\nR\n is the universal gas constant.\n\n\n\n\n PV = nRT \n\n\n PV = nRT \n\n\n\n\nWrite a function called \ngas_v()\n to calculate the volume \nV\nV\n of a gas based on pressure \nP\nP\n, temperature \nT\nT\n, number of particles \nn\nn\n and universal gas constant \nR\nR\n. Use your function to find the volume of gas with the following parameters:\n\n\n\n\n T = 273.15\n\n\n T = 273.15\n\n\n\n\n\n\n n = 6.02 \\times 10^{23} \n\n\n n = 6.02 \\times 10^{23} \n\n\n\n\n\n\n R = 8.314 \n\n\n R = 8.314 \n\n\n\n\n\n\n P = 101,325 \n\n\n P = 101,325 \n\n\n\n\nQ05.22 Most professional bakers weight their ingredients, while many home bakers use measurements like cups and tablespoons to measure out ingredients. Create a function that takes two arguments: ingredient and cups. The function will output the number of grams of the specified ingredient. For example, a skeleton outline of your function might look like:\n\n\ndef bake_conv(ingredient, cups)\n    <code>\n    return grams\n\n\n\n\nYour function needs to accept the following ingredients: \n'flour'\n and \n'sugar'\n. The conversion factor for flour is 1 cup flour = 128 grams flour. The conversion factor for sugar is 1 cup sugar = 200 grams sugar.\n\n\nQ05.23 The gravitational force between two celestial bodies (planets, moons, stars etc) is calculated according to:\n\n\n\n\n F_g = \\frac{GMm}{r^2} \n\n\n F_g = \\frac{GMm}{r^2} \n\n\n\n\nwhere \nF_g\nF_g\n is the gravitational force, \nM\nM\n is the mass of one of the celestial bodies, \nm\nm\n is the mass of the other the celestial bodies, \nr\nr\n is the distance between the two celestial bodies and \nG\nG\n is the universal gravitational constant. \nG=6.667408 \\times 10^{-11} m^3 kg^{-1}s^{-2}\nG=6.667408 \\times 10^{-11} m^3 kg^{-1}s^{-2}\n. \n\n\n(a) Write a function called \ngrav_force()\n that accepts the mass of two celestial bodies and outputs the gravitational force produced.\n\n\n\n\n\n\n\n\nCelestial Body\n\n\nMass\n\n\nDistance from sun\n\n\n\n\n\n\n\n\n\n\nSun\n\n\n1.989\\times10^{30} kg\n1.989\\times10^{30} kg\n\n\n0\n0\n\n\n\n\n\n\nEarth\n\n\n5.98\\times10^{24} kg\n5.98\\times10^{24} kg\n\n\n149.6 \\times 10^9 m\n149.6 \\times 10^9 m\n\n\n\n\n\n\nMars\n\n\n6.42\\times10^{23} kg\n6.42\\times10^{23} kg\n\n\n228 \\times 10^9 m\n228 \\times 10^9 m\n\n\n\n\n\n\n\n\n(b) Use your function \ngrav_force()\n and the table above to calculate the gravitational force between the earth and the sun.\n\n\n(c) Use your function \ngrav_force()\n and the table above to calculate the gravitational force between the mars and the sun.\n\n\nFunctions with default arguments\n\n\nQ05.30 (a) Rewrite the function in problem Q05.20 called \ngas_v()\n with the default values \nn = 6.02 \\times 10^{23}\nn = 6.02 \\times 10^{23}\n, \nR = 8.314\nR = 8.314\n and \nP = 101,325\nP = 101,325\n.\n\n\n(a) Use your modified function \ngas_v()\n to calculate the volume of a gas at \nT = 500 K\nT = 500 K\n using the default arguments.\n\n\n(b) Use your modified function \ngas_v()\n to calculate the volume of a gas at \nT = 500K\nT = 500K\n, under half the pressure \np = 101,325/2\np = 101,325/2\n.\n\n\nQ05.32 In engineering mechanics, the tensile stress \n\\sigma\n\\sigma\n applied to a solid cylinder is equal to the tensile force on the cylinder \nF\nF\n divided by the cylinder's cross sectional area \nA\nA\n according to the formula below:\n\n\n\n\n \\sigma = \\frac{F}{A} \n\n\n \\sigma = \\frac{F}{A} \n\n\n\n\nThe standard diameter \nd\nd\n of a cylinder pulled in tension in a tensile test using the ASTM D8 standard is \nd=0.506\nd=0.506\n inches. \n\n\n\n\n A = \\pi(d/2)^2 \n\n\n A = \\pi(d/2)^2 \n\n\n\n\nUse the formula for stress \n\\sigma\n\\sigma\n and area \nA\nA\n above to write a function called \nstress()\n that calculates stress \n\\sigma\n\\sigma\n based on force \nF\nF\n and diameter \nd\nd\n. Use \nd=0.506\nd=0.506\n as the default diameter, but allow the user to specify a different diameter if they want.\n\n\nUse your \nstress()\n function to calculate the tensile stress \n\\sigma\n\\sigma\n in a cylinder with the default diameter and a tensile force \nF = 12,000\nF = 12,000\n.\n\n\nQ05.31 One way to calculate how much an investment will be worth is to use the Future Value formula:\n\n\n\n\n FV = I_0(1 + r)^n \n\n\n FV = I_0(1 + r)^n \n\n\n\n\nWhere \nFV\nFV\n is the future value, \nI_0\nI_0\n is the initial investment, \nr\nr\n is the yearly rate of return, and \nn\nn\n is the number of years you plan to invest. \n\n\n(a) Write a function called \nfuture_value()\n which accepts an initial investment \nI_0\nI_0\n and a number of years \nn\nn\n and calculates the future value \nFV\nFV\n. Include \nr=0.05\nr=0.05\n as the default yearly rate of return.\n\n\n(b) Use your \nfuture_value()\n function to calculate the future value of an initial investment of 2000 dollars over 30 years with the default yearly rate of return\n\n\n(c) Use your \nfuture_value()\n function to calculate the future value of the same initial investment of 2000 dollars over 30 years, but a rate of return of 8% (\n0.08\n).\n\n\n(d) Use your \nfuture_value()\n function to determine when 2000 dollars is invested over 30 years, how much more do you make if the rate of return is 10% (\n0.10\n) instead of 5% (\n0.05\n).\n\n\nNested Functions\n\n\nQ05.32 In mechanical engineering, there are a couple different units of \nstress\n. Units of stress include: Pascals (\nPa\nPa\n), Mega Pascals (\nMPa\nMPa\n), pounds per square inch (psi) and kilopounds per square inch (\nksi\nksi\n). \n\n\n(a) Write a function called \npa_to_mpa\n to convert between Pascals (\nPa\nPa\n) and Mega Pascals (\nMPa\nMPa\n). The conversion factor is \n1 MPa = 10^6 Pa\n1 MPa = 10^6 Pa\n\n\n(b) Write a function called \nmpa_to_ksi\n to convert between Mega Pascals (\nMPa\nMPa\n) and kilopounds per square inch (\nksi\nksi\n). The conversion factor is \n1 ksi = 6.89476 MPa\n1 ksi = 6.89476 MPa\n\n\n(c) Write a function called \nksi_to_psi\n to convert between kilopounds per square inch (\nksi\nksi\n) and pounds per square inch (\npsi\npsi\n). The conversion factor is \n1000 psi = 1 ksi\n1000 psi = 1 ksi\n\n\n(d) Combine the three functions \npa_to_mpa\n, \nmpa_to_ksi\n, \nksi_to_psi\n into a single function \npa_to_psi\n. Do this with calling the other functions as part of the \npa_to_psi\n function, not by rewriting the same code you wrote in parts (a), (b), and (c).\n\n\n(e) Convert 2,500 \nPa\nPa\n into \npsi\npsi\n using your \npa_to_psi\n function.\n\n\nFunctions in other files\n\n\nQ05.40 Create a separate \n.py\n file called \ngreetings.py\n. Inside of \ngreetings.py\n include the code:\n\n\ndef hi():\n    print(\"Hi!\")\n\n\n\n\nImport your newly created \ngreatings.py\n file and run the function \nhi()\n.\n\n\nQ05.41 Create a separate \n.py\n file called \ngreetings.py\n. Inside of \ngreetings.py\n include the code:\n\n\ndef hello(name):\n    print(\"Hello \" + name)\n\n\n\n\nImport your newly created \ngreatings.py\n file and run the function \nhello()\n with your name as an input argument.\n\n\nQ05.42 Create a separate file \n.py\n file called \nareas.py\n. Inside of \nareas.py\n include the code:\n\n\ndef triangle(base,height):\n    area = 0.5*base*height\n    print(\"Triangle Area:\", area)\n\n\ndef rectangle(length, width):\n    area = length* width\n    print(\"Rectangle Area:\", area)\n\n\n\n\nImport your newly created \nareas.py\n file and run the functions \ntriangle()\n and \nrectangle()\n with the same two input arguments: \n2\n and \n3\n.\n\n\nErrors, Explanations, and Solutions\n\n\nFor the sections of code below, run the lines of code. Then explain the error in your own words. Below your error explanation, rewrite and run an improved section of code that fixes the error.\n\n\nQ05.80 Run the code below and explain the error. Write the code and run it error free.\n\n\ndef add_me(num)\n    return num + 2\n\nadd_me(1)\n\n\n\n\nQ05.81 Run the code below and explain the error. Re-write the code and run it error free.\n\n\ndef add_you[num]:\n    return num + 2\n\nadd_you(2)\n\n\n\n\nQ05.82 Run the code below and explain the error. Re-write the code and run it error free.\n\n\ndef my_func():\n    print('yup')\n\nmy_func('yup')\n\n\n\n\nQ05.83 Run the code below and explain the error. Rewrite the code and run it error free.\n\n\n\ndef nothing():\n\nnothing()\n\n\n\n\nQ05.84 Run the code below and explain the error. Rewrite the code and run it error free.\n\n\n\ndef plus(2+2):\n    return 4 \n\nnothing()\n\n\n\n\nQ05.85 Run the code below and explain the error. Rewrite the code and run it error free.\n\n\n\ndef first_a(a):\n    return a[0]\n\nfirst_a(1)",
            "title": "Review Questions"
        },
        {
            "location": "/05-Functions-and-Modules/05.09-Review-Questions/#review-questions",
            "text": "",
            "title": "Review Questions"
        },
        {
            "location": "/05-Functions-and-Modules/05.09-Review-Questions/#user-defined-functions",
            "text": "Q05.01 Write a function called  ft_to_in()  which converts feet to inches. Note the conversion factor is 1 foot = 12 inches. Convert 6 feet into inches using your function.  Q05.02 Write a function called  m_to_ft()  which converts meters to feet. Note the conversion factor is 1 meter =  3.28084 feet. Convert 5,000 meters into feet using your function.  Q05.03 Use the functions in questions Q05.01 and Q05.02 to convert 2 meters into inches.  Q05.04 Write a function that calculates the area of a circle based on a circle's radius. The formula for the area of a circle is  A = \\pi r^2 A = \\pi r^2  where  A A  is area and  r r  is radius. Use your function to calculate the area of circle with a radius of 5.  Q05.05 Write a function that converts degrees Celcius ( C C ) to degrees Fahrenheit ( F F ). The formula to convert between the two temperature scales is  F = \\frac{9}{5} C + 32 F = \\frac{9}{5} C + 32  Q05.06 Write a function that converts Kelvin temperature ( K K ) to degrees Celcius ( C C ). The formula to convert between the two temperature scales is  C = K - 273.15 C = K - 273.15 .  Q05.07 Use the functions in questions Q05.05 and Q05.06 to convert to convert the temperature at Standard Temperature and Pressure (STP) of  273.15 K 273.15 K  into degrees Fahrenheit.  Q05.08 Use the functions in questions Q05.05 and Q05.06 to convert to convert the temperature at absolute zero,  0 K 0 K  into degrees Celcius and degrees Fahrenheit.  Q05.09 Write a function called  hp_to_kw()  which converts horse power ( hp hp ) into kilowatts ( kW kW ). Note the conversion factor is  1 hp =  0.7457 kW 1 hp =  0.7457 kW . Convert the horsepower of the average horse,  14.9 hp 14.9 hp , into kilowatts ( kW kW ).",
            "title": "User-defined functions"
        },
        {
            "location": "/05-Functions-and-Modules/05.09-Review-Questions/#functions-with-multiple-arguments",
            "text": "Q05.20 Write a function called  cyl_v()  that calculates the volume  V V  of a cylinder based on cylinder height  h h  and cylinder radius  r r . The formula for the volume of a cylinder is below:    V = \\pi r^2 h    V = \\pi r^2 h    Use your function  cyl_v()  to calculate the volume of a cylinder with height = 2.7 and radius = 0.73.  Q05.21 The universal gas law states that the pressure  P P ,  and temperature  T T  of volume  V V  of gas with number of particles  n n  is related by the equation below, where  R R  is the universal gas constant.    PV = nRT    PV = nRT    Write a function called  gas_v()  to calculate the volume  V V  of a gas based on pressure  P P , temperature  T T , number of particles  n n  and universal gas constant  R R . Use your function to find the volume of gas with the following parameters:    T = 273.15   T = 273.15     n = 6.02 \\times 10^{23}    n = 6.02 \\times 10^{23}      R = 8.314    R = 8.314      P = 101,325    P = 101,325    Q05.22 Most professional bakers weight their ingredients, while many home bakers use measurements like cups and tablespoons to measure out ingredients. Create a function that takes two arguments: ingredient and cups. The function will output the number of grams of the specified ingredient. For example, a skeleton outline of your function might look like:  def bake_conv(ingredient, cups)\n    <code>\n    return grams  Your function needs to accept the following ingredients:  'flour'  and  'sugar' . The conversion factor for flour is 1 cup flour = 128 grams flour. The conversion factor for sugar is 1 cup sugar = 200 grams sugar.  Q05.23 The gravitational force between two celestial bodies (planets, moons, stars etc) is calculated according to:    F_g = \\frac{GMm}{r^2}    F_g = \\frac{GMm}{r^2}    where  F_g F_g  is the gravitational force,  M M  is the mass of one of the celestial bodies,  m m  is the mass of the other the celestial bodies,  r r  is the distance between the two celestial bodies and  G G  is the universal gravitational constant.  G=6.667408 \\times 10^{-11} m^3 kg^{-1}s^{-2} G=6.667408 \\times 10^{-11} m^3 kg^{-1}s^{-2} .   (a) Write a function called  grav_force()  that accepts the mass of two celestial bodies and outputs the gravitational force produced.     Celestial Body  Mass  Distance from sun      Sun  1.989\\times10^{30} kg 1.989\\times10^{30} kg  0 0    Earth  5.98\\times10^{24} kg 5.98\\times10^{24} kg  149.6 \\times 10^9 m 149.6 \\times 10^9 m    Mars  6.42\\times10^{23} kg 6.42\\times10^{23} kg  228 \\times 10^9 m 228 \\times 10^9 m     (b) Use your function  grav_force()  and the table above to calculate the gravitational force between the earth and the sun.  (c) Use your function  grav_force()  and the table above to calculate the gravitational force between the mars and the sun.",
            "title": "Functions with multiple arguments"
        },
        {
            "location": "/05-Functions-and-Modules/05.09-Review-Questions/#functions-with-default-arguments",
            "text": "Q05.30 (a) Rewrite the function in problem Q05.20 called  gas_v()  with the default values  n = 6.02 \\times 10^{23} n = 6.02 \\times 10^{23} ,  R = 8.314 R = 8.314  and  P = 101,325 P = 101,325 .  (a) Use your modified function  gas_v()  to calculate the volume of a gas at  T = 500 K T = 500 K  using the default arguments.  (b) Use your modified function  gas_v()  to calculate the volume of a gas at  T = 500K T = 500K , under half the pressure  p = 101,325/2 p = 101,325/2 .  Q05.32 In engineering mechanics, the tensile stress  \\sigma \\sigma  applied to a solid cylinder is equal to the tensile force on the cylinder  F F  divided by the cylinder's cross sectional area  A A  according to the formula below:    \\sigma = \\frac{F}{A}    \\sigma = \\frac{F}{A}    The standard diameter  d d  of a cylinder pulled in tension in a tensile test using the ASTM D8 standard is  d=0.506 d=0.506  inches.     A = \\pi(d/2)^2    A = \\pi(d/2)^2    Use the formula for stress  \\sigma \\sigma  and area  A A  above to write a function called  stress()  that calculates stress  \\sigma \\sigma  based on force  F F  and diameter  d d . Use  d=0.506 d=0.506  as the default diameter, but allow the user to specify a different diameter if they want.  Use your  stress()  function to calculate the tensile stress  \\sigma \\sigma  in a cylinder with the default diameter and a tensile force  F = 12,000 F = 12,000 .  Q05.31 One way to calculate how much an investment will be worth is to use the Future Value formula:    FV = I_0(1 + r)^n    FV = I_0(1 + r)^n    Where  FV FV  is the future value,  I_0 I_0  is the initial investment,  r r  is the yearly rate of return, and  n n  is the number of years you plan to invest.   (a) Write a function called  future_value()  which accepts an initial investment  I_0 I_0  and a number of years  n n  and calculates the future value  FV FV . Include  r=0.05 r=0.05  as the default yearly rate of return.  (b) Use your  future_value()  function to calculate the future value of an initial investment of 2000 dollars over 30 years with the default yearly rate of return  (c) Use your  future_value()  function to calculate the future value of the same initial investment of 2000 dollars over 30 years, but a rate of return of 8% ( 0.08 ).  (d) Use your  future_value()  function to determine when 2000 dollars is invested over 30 years, how much more do you make if the rate of return is 10% ( 0.10 ) instead of 5% ( 0.05 ).",
            "title": "Functions with default arguments"
        },
        {
            "location": "/05-Functions-and-Modules/05.09-Review-Questions/#nested-functions",
            "text": "Q05.32 In mechanical engineering, there are a couple different units of  stress . Units of stress include: Pascals ( Pa Pa ), Mega Pascals ( MPa MPa ), pounds per square inch (psi) and kilopounds per square inch ( ksi ksi ).   (a) Write a function called  pa_to_mpa  to convert between Pascals ( Pa Pa ) and Mega Pascals ( MPa MPa ). The conversion factor is  1 MPa = 10^6 Pa 1 MPa = 10^6 Pa  (b) Write a function called  mpa_to_ksi  to convert between Mega Pascals ( MPa MPa ) and kilopounds per square inch ( ksi ksi ). The conversion factor is  1 ksi = 6.89476 MPa 1 ksi = 6.89476 MPa  (c) Write a function called  ksi_to_psi  to convert between kilopounds per square inch ( ksi ksi ) and pounds per square inch ( psi psi ). The conversion factor is  1000 psi = 1 ksi 1000 psi = 1 ksi  (d) Combine the three functions  pa_to_mpa ,  mpa_to_ksi ,  ksi_to_psi  into a single function  pa_to_psi . Do this with calling the other functions as part of the  pa_to_psi  function, not by rewriting the same code you wrote in parts (a), (b), and (c).  (e) Convert 2,500  Pa Pa  into  psi psi  using your  pa_to_psi  function.",
            "title": "Nested Functions"
        },
        {
            "location": "/05-Functions-and-Modules/05.09-Review-Questions/#functions-in-other-files",
            "text": "Q05.40 Create a separate  .py  file called  greetings.py . Inside of  greetings.py  include the code:  def hi():\n    print(\"Hi!\")  Import your newly created  greatings.py  file and run the function  hi() .  Q05.41 Create a separate  .py  file called  greetings.py . Inside of  greetings.py  include the code:  def hello(name):\n    print(\"Hello \" + name)  Import your newly created  greatings.py  file and run the function  hello()  with your name as an input argument.  Q05.42 Create a separate file  .py  file called  areas.py . Inside of  areas.py  include the code:  def triangle(base,height):\n    area = 0.5*base*height\n    print(\"Triangle Area:\", area)\n\n\ndef rectangle(length, width):\n    area = length* width\n    print(\"Rectangle Area:\", area)  Import your newly created  areas.py  file and run the functions  triangle()  and  rectangle()  with the same two input arguments:  2  and  3 .",
            "title": "Functions in other files"
        },
        {
            "location": "/05-Functions-and-Modules/05.09-Review-Questions/#errors-explanations-and-solutions",
            "text": "For the sections of code below, run the lines of code. Then explain the error in your own words. Below your error explanation, rewrite and run an improved section of code that fixes the error.  Q05.80 Run the code below and explain the error. Write the code and run it error free.  def add_me(num)\n    return num + 2\n\nadd_me(1)  Q05.81 Run the code below and explain the error. Re-write the code and run it error free.  def add_you[num]:\n    return num + 2\n\nadd_you(2)  Q05.82 Run the code below and explain the error. Re-write the code and run it error free.  def my_func():\n    print('yup')\n\nmy_func('yup')  Q05.83 Run the code below and explain the error. Rewrite the code and run it error free.  \ndef nothing():\n\nnothing()  Q05.84 Run the code below and explain the error. Rewrite the code and run it error free.  \ndef plus(2+2):\n    return 4 \n\nnothing()  Q05.85 Run the code below and explain the error. Rewrite the code and run it error free.  \ndef first_a(a):\n    return a[0]\n\nfirst_a(1)",
            "title": "Errors, Explanations, and Solutions"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.00-Introduction/",
            "text": "Plotting with Matplotlib\n\n\nIntroduction\n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nImport Matplotlib into a Python script or Jupyter notebook\n\n\n\n\n\n\nConstruct line plots with Matplotlib\n\n\n\n\n\n\nUse Matplotlib's object-oriented interface\n\n\n\n\n\n\nConstruct bar charts with Matplotlib\n\n\n\n\n\n\nAdd error bars to bar charts and line plots\n\n\n\n\n\n\nPlot histograms\n\n\n\n\n\n\nPlot contours\n\n\n\n\n\n\nConstruct 3D mesh grid plots",
            "title": "Introduction"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.00-Introduction/#plotting-with-matplotlib",
            "text": "",
            "title": "Plotting with Matplotlib"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.00-Introduction/#introduction",
            "text": "By the end of this chapter you will be able to:    Import Matplotlib into a Python script or Jupyter notebook    Construct line plots with Matplotlib    Use Matplotlib's object-oriented interface    Construct bar charts with Matplotlib    Add error bars to bar charts and line plots    Plot histograms    Plot contours    Construct 3D mesh grid plots",
            "title": "Introduction"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.01-What-is-Matplotlib/",
            "text": "What is Matplotlib?\n\n\nMatplotlib is a popular Python package used to build plots. Matplotlib started as a project in the early 2000's partly to use Python to visualize the electronic signals in the brain of epilepsy patients. Matplotlib's creator, John D. Hunter, was a neurobiologist. He was looking for a way to replicate MATLAB's plotting capability with Python. In addition to starting matplotlib, Dr. Hunter was part of the founding group that created Numfocus. The Numfocus group oversees some major Python projects including Matplotlib, NumPy, Pandas, and Jupyter.\n\n\nWhy use Matplotlib?\n\n\nMatplotlib is useful for creating static 2D plots, the kind of plots included in scientific publications and presentations. Almost any plot created in Microsoft Excel can be created with Matplotlib. Matplotlib can also be used to make 3D plots and animations.",
            "title": "What is Matplotlib?"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.01-What-is-Matplotlib/#what-is-matplotlib",
            "text": "Matplotlib is a popular Python package used to build plots. Matplotlib started as a project in the early 2000's partly to use Python to visualize the electronic signals in the brain of epilepsy patients. Matplotlib's creator, John D. Hunter, was a neurobiologist. He was looking for a way to replicate MATLAB's plotting capability with Python. In addition to starting matplotlib, Dr. Hunter was part of the founding group that created Numfocus. The Numfocus group oversees some major Python projects including Matplotlib, NumPy, Pandas, and Jupyter.",
            "title": "What is Matplotlib?"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.01-What-is-Matplotlib/#why-use-matplotlib",
            "text": "Matplotlib is useful for creating static 2D plots, the kind of plots included in scientific publications and presentations. Almost any plot created in Microsoft Excel can be created with Matplotlib. Matplotlib can also be used to make 3D plots and animations.",
            "title": "Why use Matplotlib?"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.02-Installing Matplotlib/",
            "text": "Installing Matplotlib\n\n\nBefore Matplotlib's plotting functions can be used, Matplotlib needs to be installed. Depending on which distribution of Python is installed on your computer, the installation methods are slightly different.\n\n\nInstall Matplotlib with the Anaconda distribution of Python\n\n\nThe simplest way to install Matplotlib is to download and install the Anaconda distribution of Python. The Anaconda distribution of Python comes with Matplotlib included and no further installation steps are necessary.\n\n\nBelow are additional methods to install Matplotlib if you are not using the Anaconda distribution of Python.\n\n\nInstall Matplotlib with the Anaconda Prompt\n\n\nMatplotlib can be installed using with the \nAnaconda Prompt\n. If the \nAnaconda Prompt\n is available on your machine, it can usually be seen in the Windows Start Menu. To install Matplotlib, open the \nAnaconda Prompt\n and type:\n\n\n> conda install matplotlib\n\n\n\n\nType \ny\n for yes when prompted.\n\n\nInstall Matplotlib with \npip\n\n\nMatplotlib can also be installed using the Python package manager, \npip\n. To install Matplotlib with \npip\n, open a terminal window and type:\n\n\n$ pip install matplotlib\n\n\n\n\nThis command installs Matplotlib in the current working Python environment.\n\n\nVerify the installation\n\n\nTo verify that Matplotlib is installed, try to invoke Matplotlib's version at the Python REPL using the \n.__version__\n an attribute common to most Python packages.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\n>>>\n \nimport\n \nmatplotlib\n\n\n>>>\n \nmatplotlib\n.\nversion\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[1]:\n\n\n\n\n\n\n\n\n'3.0.2'",
            "title": "Installing Matplotlib"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.02-Installing Matplotlib/#installing-matplotlib",
            "text": "Before Matplotlib's plotting functions can be used, Matplotlib needs to be installed. Depending on which distribution of Python is installed on your computer, the installation methods are slightly different.",
            "title": "Installing Matplotlib"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.02-Installing Matplotlib/#install-matplotlib-with-the-anaconda-distribution-of-python",
            "text": "The simplest way to install Matplotlib is to download and install the Anaconda distribution of Python. The Anaconda distribution of Python comes with Matplotlib included and no further installation steps are necessary.  Below are additional methods to install Matplotlib if you are not using the Anaconda distribution of Python.",
            "title": "Install Matplotlib with the Anaconda distribution of Python"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.02-Installing Matplotlib/#install-matplotlib-with-the-anaconda-prompt",
            "text": "Matplotlib can be installed using with the  Anaconda Prompt . If the  Anaconda Prompt  is available on your machine, it can usually be seen in the Windows Start Menu. To install Matplotlib, open the  Anaconda Prompt  and type:  > conda install matplotlib  Type  y  for yes when prompted.",
            "title": "Install Matplotlib with the Anaconda Prompt"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.02-Installing Matplotlib/#install-matplotlib-with-pip",
            "text": "Matplotlib can also be installed using the Python package manager,  pip . To install Matplotlib with  pip , open a terminal window and type:  $ pip install matplotlib  This command installs Matplotlib in the current working Python environment.",
            "title": "Install Matplotlib with pip"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.02-Installing Matplotlib/#verify-the-installation",
            "text": "To verify that Matplotlib is installed, try to invoke Matplotlib's version at the Python REPL using the  .__version__  an attribute common to most Python packages.   In\u00a0[1]:  \n      >>>   import   matplotlib  >>>   matplotlib . version         Out[1]:   '3.0.2'",
            "title": "Verify the installation"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/",
            "text": "Line Plots\n\n\nLine plots can be created in Python with Matplotlib's \npyplot\n library.\nTo build a line plot, first import Matplotlib.  It is a standard convention to import Matplotlib's \npyplot\n library as \nplt\n. The \nplt\n alias will be familiar to other Python programmers.\n\n\nIf using a Jupyter notebook include the line \n%matplotlib inline\n after the imports. \n%matplotlib inline\n is a Jupyter notebook magic command which causes Matplotlib plots to display directly inside Jupyter notebook output cells. \n\n\nTo build our first plot, we will use NumPy, a numerical computing library for Python. NumPy is typically imported with the alias \nnp\n.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n# include if using a Jupyter notebook\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\nNumPy's \nnp.arange()\n function creates an array of numbers with the parameters \nnp.arange(start,stop,step)\n. NumPy's \nnp.sin()\n and \nnp.pi\n functions do what you expect.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n \n4\n \n*\n \nnp\n.\npi\n,\n \n0.1\n)\n\n\ny\n \n=\n \nnp\n.\nsin\n(\nx\n)\n\n\n\n\n\n\n\n\n\n\n\nTo create a line plot, pass an array or list of numbers as an \nargument\n to Matplotlib's \nplt.plot()\n function. The command \nplt.show()\n is needed at the end to show the plot. Make sure to include the double parenthesis \n()\n in \nplt.show()\n.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nplt\n.\nplot\n(\nx\n,\n \ny\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures of a Matplotlib plot\n\n\nA variety of features on a Matplotlib plot can be specified. The following is a list of commonly defined features:\n\n\nLine Color, Line Width, Line Style, Line Opacity and Marker Options\n\n\nThe color, width, and style of line in a plot can be specified. Line color, line width, and line style are included as extra arguments in the \nplt.plot()\n function call.on call.\n\n\nplt.plot(<x-data>,<y-data>,\n            linewideth=<float or int>,\n            linestyle='<linestyle abbreviation>',\n            color='<color abbreviation>',\n            marker='<marker abbreviation>')\n\n\n\n\nAn example \nplt.plot()\n function call including line color, line width, and line style options is:\n\n\nplt.plot(x, y,\n         linewidth=2.0,\n         linestyle='+',\n         color='b',\n         alpha=0.5,\n         marker='o')\n\n\n\n\nBelow is a list of linewidths (many other widths are also available).\n\n\n\n\n\n\n\n\nlinewidth=<float or int>\n\n\nLine Width\n\n\n\n\n\n\n\n\n\n\n0.5\n\n\n0.5 pixels wide\n\n\n\n\n\n\n1\n\n\n1 pixel wide\n\n\n\n\n\n\n1.5\n\n\n1.5 pixels wide\n\n\n\n\n\n\n2\n\n\n2 pixels wide\n\n\n\n\n\n\n3\n\n\n3 pixels wide\n\n\n\n\n\n\n\n\nBelow is a list of line styles.\n\n\n\n\n\n\n\n\nlinestyle='<style abbreviation>'\n\n\nLine Style\n\n\n\n\n\n\n\n\n\n\n'-'\n or \n'solid'\n\n\nsolid line (default)\n\n\n\n\n\n\n'--'\n or \n'dashed'\n\n\ndashed line\n\n\n\n\n\n\n'-.'\n or \n'dashdot'\n\n\ndash-dot line\n\n\n\n\n\n\n':'\n or \n'dotted'\n\n\ndotted line\n\n\n\n\n\n\n'None'\n or \n' '\n or \n''\n\n\nno line\n\n\n\n\n\n\n\n\nBelow is a list of color abbreviations. Note \n'b'\n is used for blue and \n'k'\n is used for black.\n\n\n\n\n\n\n\n\ncolor ='<color abbreviation>'\n\n\nColor Name\n\n\n\n\n\n\n\n\n\n\n'b'\n\n\nBlue\n\n\n\n\n\n\n'c'\n\n\nCyan\n\n\n\n\n\n\n'g'\n\n\nGreen\n\n\n\n\n\n\n'k'\n\n\nBlack\n\n\n\n\n\n\n'm'\n\n\nmagenta\n\n\n\n\n\n\n'r'\n\n\nRed\n\n\n\n\n\n\n'w'\n\n\nWhite\n\n\n\n\n\n\n'y'\n\n\nYellow\n\n\n\n\n\n\n\n\nColors can also be specified in hexadecimal form surrounded by quotation marks like \n'#FF69B4'\n or in RGBA (red, green, blue, opacity) color surrounded by parenthesis like \n(255,182,193,0.5)\n.\n\n\n\n\n\n\n\n\ncolor ='<color abbreviation>'\n\n\nColor Format\n\n\n\n\n\n\n\n\n\n\n'#FF69B4'\n\n\nhexadecimal\n\n\n\n\n\n\n(255,182,193,0.5)\n\n\nRGBA\n\n\n\n\n\n\n\n\nBelow is a list of alpha (opacity) values (any alpha value between 0.0 and 1.0 is possible).\n\n\n\n\n\n\n\n\nalpha = <float or int>\n\n\nOpacity\n\n\n\n\n\n\n\n\n\n\n0\n\n\ntransparent\n\n\n\n\n\n\n0.5\n\n\nHalf transparent\n\n\n\n\n\n\n1.0\n\n\nOpaque\n\n\n\n\n\n\n\n\nBelow is a list of maker styles.\n\n\n\n\n\n\n\n\nmarker='<marker abbreviation>'\n\n\nMarker Style\n\n\n\n\n\n\n\n\n\n\n'.'\n\n\npoint\n\n\n\n\n\n\n','\n\n\none pixel\n\n\n\n\n\n\n'o'\n\n\ncircle\n\n\n\n\n\n\n'v'\n\n\ntriangle_down\n\n\n\n\n\n\n'^'\n\n\ntriangle_up\n\n\n\n\n\n\n'8'\n\n\noctagon\n\n\n\n\n\n\n's'\n\n\nsquare\n\n\n\n\n\n\n'p'\n\n\npentagon\n\n\n\n\n\n\n'*'\n\n\nstar\n\n\n\n\n\n\n'h'\n\n\nhexagon 1\n\n\n\n\n\n\n'H'\n\n\nhexagon 2\n\n\n\n\n\n\n'+'\n\n\nplus\n\n\n\n\n\n\n'P'\n\n\nfilled plus\n\n\n\n\n\n\n'x'\n\n\nx\n\n\n\n\n\n\n'X'\n\n\nfilled x\n\n\n\n\n\n\n'D'\n\n\ndiamond\n\n\n\n\n\n\n'd'\n\n\nthin diamond\n\n\n\n\n\n\n\n\nIn addition to \nmarker='<marker style>'\n, the color of the marker edge, the color of the marker face and the size of the marker can be specified with:\n\n\nplt.plot( .... \n         markeredgecolor='<color abbreviation>',\n         markerfacecolor='<color abbreviation>',\n         markersize=<float or int>\n         ....)\n\n\n\n\nTitle\n\n\nThe plot title will be shown above the plot. The \nplt.title()\n command accepts a string as an argument.\n\n\nplt.title('My Title')\n\n\n\n\nx-axis label\n\n\nThe x-axis label is shown below the x-axis. The \nplt.xlabel()\n command accepts a string as an argument.\n\n\nplt.xlabel('My x-axis label')\n\n\n\n\ny-axis label\n\n\nThe y-axis label is shown to the left of the y-axis. The \nplt.ylabel()\n command accepts a string as an argument.\n\n\nplt.ylabel('My y-axis label')\n\n\n\n\nLegend\n\n\nYou can use the \nplt.legend()\n command to insert a legend on a plot. The legend will appear within the plot area, in the upper right corner by default. The \nplt.legend()\n command accepts a list of strings and optionally accepts a \nloc=\n argument to position the legend in a different location\n\n\nplt.legend(['entry1','entry2'], loc = 0)\n\n\n\n\nThe following are the location codes for the legend location. These numbers need to be placed after \nloc=\n in the \nplt.legend()\n call.\n\n\n\n\n\n\n\n\nLegend Location\n\n\nloc = <number>\n\n\n\n\n\n\n\n\n\n\n'best'\n\n\n0\n\n\n\n\n\n\n'upper right'\n\n\n1\n\n\n\n\n\n\n'upper left'\n\n\n2\n\n\n\n\n\n\n'lower left'\n\n\n3\n\n\n\n\n\n\n'lower right'\n\n\n4\n\n\n\n\n\n\n'right'\n\n\n5\n\n\n\n\n\n\n'center left'\n\n\n6\n\n\n\n\n\n\n'center right'\n\n\n7\n\n\n\n\n\n\n'lower center'\n\n\n8\n\n\n\n\n\n\n'upper center'\n\n\n9\n\n\n\n\n\n\n'center'\n\n\n10\n\n\n\n\n\n\n#### Grid\n\n\n\n\n\n\n\n\n\n\nA grid can be shown on the plot using the \nplt.grid()\n command. By defaut, the grid is turned off. To turn on the grid use:\n\n\nplt.grid(True)\n\n\n\n\nThe only valid options are \nplt.grid(True)\n and \nplt.grid(False)\n. Note that \nTrue\n and \nFalse\n are capitalized and are not enclosed in quotations.\n\n\nTick Labels\n\n\nTick labels can be specified on the plot using \nplt.xticks()\n and \nplt.yticks()\n. To add tick labels use:\n\n\nplt.xticks([locations list],[labels list])\nplt.yticks([locations list],[labels list])\n\n\n\n\nThe \n[locations list]\n can be a Python list or NumPy array of tick locations . The \n[labels list]\n is a Python list or NumPy array of strings.\n\n\nBuild a plot in five steps\n\n\nLine plots with the specified features above are constructed  in Python according to this general outline:\n\n\n\n\nImports\n\n\nDefine data\n\n\nPlot Data including options\n\n\nAdd plot details\n\n\nShow the plot\n\n\n\n\nDetails of each step is explained below.\n\n\n1. Imports\n\n\nImport \nmatplot.pyplot as plt\n, as well as any other modules needed to work with the data such as NumPy or Pandas. If using a Jupyter notebook include the line \n%matplotlib inline\n in the import section.\n\n\n2. Define data\n\n\nThe plot needs to contain data. Data is defined after the imports. Typically, data for plots is contained in Python lists, NumPy arrays or Pandas dataframes.\n\n\n3. Plot data including options\n\n\nUse \nplt.plot()\n to plot the data you defined. Note the \nplt.plot()\n line needs to be called before any other plot details are specified. Otherwise, the details have no plot to apply to.\n\n\nBesides data, the \nplt.plot()\n function can include keyword arguments such as:\n\n\n\n\nlinewideth= <float or int>\n\n\nlinestyle='<linestyle abbreviation>'\n\n\ncolor='<color abbreviation>'\n\n\nalpha= <float or int>\n\n\nmarker='<marker abbreviation>'\n\n\nmarkeredgecolor='<color abbreviation>'\n\n\nmarkerfacecolor='<color abbreviation>'\n\n\nmarkersize=<float or int>\n\n\n\n\n4. Add plot details\n\n\nAdd details such as a title, axis labels, legend, grid, and tick labels. Plot details to add include:\n\n\n\n\nplt.title('<title string>')\n\n\nplt.xlabel('<x-axis label string>')\n\n\nplt.ylabel('<y-axis label string>')\n\n\nplt.legend(['list','of','strings'])\n\n\nptl.grid(<True or False>)\n\n\nplt.xticks([locations list or array], [labels list])\n\n\nplt.yticks([locations list or array], [labels list])\n\n\n\n\n5. Show the plot\n\n\nUse the \nplt.show()\n command to show the plot. \nplt.show()\n causes the plot to display in a Jupyter notebook or pop out as a new window if the plot is constructed in a separate \n.py\n file. Note that \nplt.show()\n needs to be called after all of the plot specifications.\nThe next code section follows this outline. The resulting plot is shown below.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\n# Imports\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# include if using a Jupyter notebook. Remove if using a .py-file.\n\n\n%\nmatplotlib\n inline\n\n\n# Define data\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n \n4\n \n*\n \nnp\n.\npi\n,\n \n0.2\n)\n\n\ny\n \n=\n \nnp\n.\nsin\n(\nx\n)\n\n\n# Plot data including options\n\n\nplt\n.\nplot\n(\nx\n,\n \ny\n,\n\n    \nlinewidth\n=\n0.5\n,\n\n    \nlinestyle\n=\n'--'\n,\n\n    \ncolor\n=\n'r'\n,\n\n    \nmarker\n=\n'o'\n,\n\n    \nmarkersize\n=\n10\n,\n\n    \nmarkerfacecolor\n=\n(\n1\n,\n \n0\n,\n \n0\n,\n \n0.1\n))\n\n\n# Add plot details\n\n\nplt\n.\ntitle\n(\n'Plot of sin(x) vs x from 0 to 4 pi'\n)\n\n\nplt\n.\nxlabel\n(\n'x (0 to 4 pi)'\n)\n\n\nplt\n.\nylabel\n(\n'sin(x)'\n)\n\n\nplt\n.\nlegend\n([\n'sin(x)'\n])\n\n\nplt\n.\nxticks\n(\n\n    \nnp\n.\narange\n(\n0\n,\n \n4\n*\nnp\n.\npi\n,\n \nnp\n.\npi\n/\n2\n),\n\n    \n[\n'0'\n,\n'\n\\pi\n\\pi\n/2'\n,\n'\n\\pi\n\\pi\n'\n,\n'\n3\\pi/2\n3\\pi/2\n'\n,\n'2\n\\pi\n\\pi\n'\n,\n'5\n\\pi\n\\pi\n/2'\n,\n'3\n\\pi\n\\pi\n'\n,\n'7\n\\pi\n\\pi\n/2'\n])\n\n\nplt\n.\ngrid\n(\nTrue\n)\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()",
            "title": "Line Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#line-plots",
            "text": "Line plots can be created in Python with Matplotlib's  pyplot  library.\nTo build a line plot, first import Matplotlib.  It is a standard convention to import Matplotlib's  pyplot  library as  plt . The  plt  alias will be familiar to other Python programmers.  If using a Jupyter notebook include the line  %matplotlib inline  after the imports.  %matplotlib inline  is a Jupyter notebook magic command which causes Matplotlib plots to display directly inside Jupyter notebook output cells.   To build our first plot, we will use NumPy, a numerical computing library for Python. NumPy is typically imported with the alias  np .   In\u00a0[1]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  # include if using a Jupyter notebook  % matplotlib  inline     \nNumPy's  np.arange()  function creates an array of numbers with the parameters  np.arange(start,stop,step) . NumPy's  np.sin()  and  np.pi  functions do what you expect.   In\u00a0[2]:  \n      x   =   np . arange ( 0 ,   4   *   np . pi ,   0.1 )  y   =   np . sin ( x )      \nTo create a line plot, pass an array or list of numbers as an  argument  to Matplotlib's  plt.plot()  function. The command  plt.show()  is needed at the end to show the plot. Make sure to include the double parenthesis  ()  in  plt.show() .   In\u00a0[3]:  \n      plt . plot ( x ,   y )  plt . show ()",
            "title": "Line Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#features-of-a-matplotlib-plot",
            "text": "A variety of features on a Matplotlib plot can be specified. The following is a list of commonly defined features:",
            "title": "Features of a Matplotlib plot"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#line-color-line-width-line-style-line-opacity-and-marker-options",
            "text": "The color, width, and style of line in a plot can be specified. Line color, line width, and line style are included as extra arguments in the  plt.plot()  function call.on call.  plt.plot(<x-data>,<y-data>,\n            linewideth=<float or int>,\n            linestyle='<linestyle abbreviation>',\n            color='<color abbreviation>',\n            marker='<marker abbreviation>')  An example  plt.plot()  function call including line color, line width, and line style options is:  plt.plot(x, y,\n         linewidth=2.0,\n         linestyle='+',\n         color='b',\n         alpha=0.5,\n         marker='o')  Below is a list of linewidths (many other widths are also available).     linewidth=<float or int>  Line Width      0.5  0.5 pixels wide    1  1 pixel wide    1.5  1.5 pixels wide    2  2 pixels wide    3  3 pixels wide     Below is a list of line styles.     linestyle='<style abbreviation>'  Line Style      '-'  or  'solid'  solid line (default)    '--'  or  'dashed'  dashed line    '-.'  or  'dashdot'  dash-dot line    ':'  or  'dotted'  dotted line    'None'  or  ' '  or  ''  no line     Below is a list of color abbreviations. Note  'b'  is used for blue and  'k'  is used for black.     color ='<color abbreviation>'  Color Name      'b'  Blue    'c'  Cyan    'g'  Green    'k'  Black    'm'  magenta    'r'  Red    'w'  White    'y'  Yellow     Colors can also be specified in hexadecimal form surrounded by quotation marks like  '#FF69B4'  or in RGBA (red, green, blue, opacity) color surrounded by parenthesis like  (255,182,193,0.5) .     color ='<color abbreviation>'  Color Format      '#FF69B4'  hexadecimal    (255,182,193,0.5)  RGBA     Below is a list of alpha (opacity) values (any alpha value between 0.0 and 1.0 is possible).     alpha = <float or int>  Opacity      0  transparent    0.5  Half transparent    1.0  Opaque     Below is a list of maker styles.     marker='<marker abbreviation>'  Marker Style      '.'  point    ','  one pixel    'o'  circle    'v'  triangle_down    '^'  triangle_up    '8'  octagon    's'  square    'p'  pentagon    '*'  star    'h'  hexagon 1    'H'  hexagon 2    '+'  plus    'P'  filled plus    'x'  x    'X'  filled x    'D'  diamond    'd'  thin diamond     In addition to  marker='<marker style>' , the color of the marker edge, the color of the marker face and the size of the marker can be specified with:  plt.plot( .... \n         markeredgecolor='<color abbreviation>',\n         markerfacecolor='<color abbreviation>',\n         markersize=<float or int>\n         ....)",
            "title": "Line Color, Line Width, Line Style, Line Opacity and Marker Options"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#title",
            "text": "The plot title will be shown above the plot. The  plt.title()  command accepts a string as an argument.  plt.title('My Title')",
            "title": "Title"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#x-axis-label",
            "text": "The x-axis label is shown below the x-axis. The  plt.xlabel()  command accepts a string as an argument.  plt.xlabel('My x-axis label')",
            "title": "x-axis label"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#y-axis-label",
            "text": "The y-axis label is shown to the left of the y-axis. The  plt.ylabel()  command accepts a string as an argument.  plt.ylabel('My y-axis label')",
            "title": "y-axis label"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#legend",
            "text": "You can use the  plt.legend()  command to insert a legend on a plot. The legend will appear within the plot area, in the upper right corner by default. The  plt.legend()  command accepts a list of strings and optionally accepts a  loc=  argument to position the legend in a different location  plt.legend(['entry1','entry2'], loc = 0)  The following are the location codes for the legend location. These numbers need to be placed after  loc=  in the  plt.legend()  call.     Legend Location  loc = <number>      'best'  0    'upper right'  1    'upper left'  2    'lower left'  3    'lower right'  4    'right'  5    'center left'  6    'center right'  7    'lower center'  8    'upper center'  9    'center'  10    #### Grid      A grid can be shown on the plot using the  plt.grid()  command. By defaut, the grid is turned off. To turn on the grid use:  plt.grid(True)  The only valid options are  plt.grid(True)  and  plt.grid(False) . Note that  True  and  False  are capitalized and are not enclosed in quotations.",
            "title": "Legend"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#tick-labels",
            "text": "Tick labels can be specified on the plot using  plt.xticks()  and  plt.yticks() . To add tick labels use:  plt.xticks([locations list],[labels list])\nplt.yticks([locations list],[labels list])  The  [locations list]  can be a Python list or NumPy array of tick locations . The  [labels list]  is a Python list or NumPy array of strings.",
            "title": "Tick Labels"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#build-a-plot-in-five-steps",
            "text": "Line plots with the specified features above are constructed  in Python according to this general outline:   Imports  Define data  Plot Data including options  Add plot details  Show the plot   Details of each step is explained below.",
            "title": "Build a plot in five steps"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#1-imports",
            "text": "Import  matplot.pyplot as plt , as well as any other modules needed to work with the data such as NumPy or Pandas. If using a Jupyter notebook include the line  %matplotlib inline  in the import section.",
            "title": "1. Imports"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#2-define-data",
            "text": "The plot needs to contain data. Data is defined after the imports. Typically, data for plots is contained in Python lists, NumPy arrays or Pandas dataframes.",
            "title": "2. Define data"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#3-plot-data-including-options",
            "text": "Use  plt.plot()  to plot the data you defined. Note the  plt.plot()  line needs to be called before any other plot details are specified. Otherwise, the details have no plot to apply to.  Besides data, the  plt.plot()  function can include keyword arguments such as:   linewideth= <float or int>  linestyle='<linestyle abbreviation>'  color='<color abbreviation>'  alpha= <float or int>  marker='<marker abbreviation>'  markeredgecolor='<color abbreviation>'  markerfacecolor='<color abbreviation>'  markersize=<float or int>",
            "title": "3. Plot data including options"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#4-add-plot-details",
            "text": "Add details such as a title, axis labels, legend, grid, and tick labels. Plot details to add include:   plt.title('<title string>')  plt.xlabel('<x-axis label string>')  plt.ylabel('<y-axis label string>')  plt.legend(['list','of','strings'])  ptl.grid(<True or False>)  plt.xticks([locations list or array], [labels list])  plt.yticks([locations list or array], [labels list])",
            "title": "4. Add plot details"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.03-Line-Plots/#5-show-the-plot",
            "text": "Use the  plt.show()  command to show the plot.  plt.show()  causes the plot to display in a Jupyter notebook or pop out as a new window if the plot is constructed in a separate  .py  file. Note that  plt.show()  needs to be called after all of the plot specifications.\nThe next code section follows this outline. The resulting plot is shown below.   In\u00a0[4]:  \n      # Imports  import   numpy   as   np  import   matplotlib.pyplot   as   plt  # include if using a Jupyter notebook. Remove if using a .py-file.  % matplotlib  inline  # Define data  x   =   np . arange ( 0 ,   4   *   np . pi ,   0.2 )  y   =   np . sin ( x )  # Plot data including options  plt . plot ( x ,   y , \n     linewidth = 0.5 , \n     linestyle = '--' , \n     color = 'r' , \n     marker = 'o' , \n     markersize = 10 , \n     markerfacecolor = ( 1 ,   0 ,   0 ,   0.1 ))  # Add plot details  plt . title ( 'Plot of sin(x) vs x from 0 to 4 pi' )  plt . xlabel ( 'x (0 to 4 pi)' )  plt . ylabel ( 'sin(x)' )  plt . legend ([ 'sin(x)' ])  plt . xticks ( \n     np . arange ( 0 ,   4 * np . pi ,   np . pi / 2 ), \n     [ '0' , ' \\pi \\pi /2' , ' \\pi \\pi ' , ' 3\\pi/2 3\\pi/2 ' , '2 \\pi \\pi ' , '5 \\pi \\pi /2' , '3 \\pi \\pi ' , '7 \\pi \\pi /2' ])  plt . grid ( True )  # Show the plot  plt . show ()",
            "title": "5. Show the plot"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.04-Saving-Plots/",
            "text": "Saving plots\n\n\nMatplotlib plots can be saved as image files using the \nplt.savefig()\n function. The \nplt.savefig()\n function needs to be called right above the \nplt.show()\n line. All the features of the plot must be specified before the plot is saved as an image file. If the figure is saved after the \nplt.show()\n command; the figure will not be saved until the plot window is closed. Calling \nplt.savefig()\n after calling \nplt.show()\n can be problematic when building plots in a Jupyter notebook with \n%matplotlib inline\n enabled.\n\n\nA standard \nsavefig()\n command is:\n\n\nplt.savefig('plot.png', dpi=300, bbox_inches='tight')\n\n\n\n\nWhere \n'plot.png'\n is the name of the saved image file. Matplotlib infers the image file format (.png, .jpg, etc) based on the extension specified in the filename. \n\n\nThe keyword argument \ndpi=\n specifies how many dots per inch (image resolution) are in the saved image. \ndpi=72\n is fine for web images. \ndpi=300\n is probably better for an image designed to go in a written report or \n.pdf\n document. \n\n\nThe keyword argument \nbbox_inches='tight'\n is optional. If the axis labels in the plot are cut off in the saved image, set \nbbox_inches='tight'\n.\n\n\nThe following code section constructs a line plot and saves the plot to the image file \nplot.png\n.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \n[\n0\n,\n \n2\n,\n \n4\n,\n \n6\n]\n\n\ny\n \n=\n \n[\n1\n,\n \n3\n,\n \n4\n,\n \n8\n]\n\n\nplt\n.\nplot\n(\nx\n,\ny\n)\n\n\nplt\n.\nxlabel\n(\n'x values'\n)\n\n\nplt\n.\nylabel\n(\n'y values'\n)\n\n\nplt\n.\ntitle\n(\n'plotted x and y values'\n)\n\n\nplt\n.\nlegend\n([\n'line 1'\n])\n\n\n# save the figure\n\n\nplt\n.\nsavefig\n(\n'plot.png'\n,\n \ndpi\n=\n300\n,\n \nbbox_inches\n=\n'tight'\n)\n\n\nplt\n.\nshow\n()",
            "title": "Saving plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.04-Saving-Plots/#saving-plots",
            "text": "Matplotlib plots can be saved as image files using the  plt.savefig()  function. The  plt.savefig()  function needs to be called right above the  plt.show()  line. All the features of the plot must be specified before the plot is saved as an image file. If the figure is saved after the  plt.show()  command; the figure will not be saved until the plot window is closed. Calling  plt.savefig()  after calling  plt.show()  can be problematic when building plots in a Jupyter notebook with  %matplotlib inline  enabled.  A standard  savefig()  command is:  plt.savefig('plot.png', dpi=300, bbox_inches='tight')  Where  'plot.png'  is the name of the saved image file. Matplotlib infers the image file format (.png, .jpg, etc) based on the extension specified in the filename.   The keyword argument  dpi=  specifies how many dots per inch (image resolution) are in the saved image.  dpi=72  is fine for web images.  dpi=300  is probably better for an image designed to go in a written report or  .pdf  document.   The keyword argument  bbox_inches='tight'  is optional. If the axis labels in the plot are cut off in the saved image, set  bbox_inches='tight' .  The following code section constructs a line plot and saves the plot to the image file  plot.png .   In\u00a0[1]:  \n      import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  x   =   [ 0 ,   2 ,   4 ,   6 ]  y   =   [ 1 ,   3 ,   4 ,   8 ]  plt . plot ( x , y )  plt . xlabel ( 'x values' )  plt . ylabel ( 'y values' )  plt . title ( 'plotted x and y values' )  plt . legend ([ 'line 1' ])  # save the figure  plt . savefig ( 'plot.png' ,   dpi = 300 ,   bbox_inches = 'tight' )  plt . show ()",
            "title": "Saving plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.05-Multi-Line-Plots/",
            "text": "Multi Line Plots\n\n\nMulti-line plots are created using Matplotlib's \npyplot\n library. This section builds upon the work in the previous section where a plot with one line was created. This section also introduces Matplotlib's \nobject-oriented\n approach to building plots. The object-oriented approach to building plots is used in the rest of this chapter.\n\n\nThe Matplotlib's object-oriented interface\n\n\nAn object-oriented plotting interface is an interface where components of the plot (like the axis, title, lines, markers, tick labels, etc.) are treated as programmatic \nobjects\n that have \nattributes\n and \nmethods\n associated with them. To create a new \nobject\n is called \ninstantiation\n. Once an object is created, or \ninstantiated\n, the properties of that object can be modified, and methods can be called on that object. The basic anatomy of a Matplotlib plot includes a couple of layers, each of these layers is a Python \nobject\n:\n\n\n\n\nFigure objects: The bottom layer. Think of the figure layer as the figure window which contains the minimize, maximize, close buttons. A figure can include one plot or multiple plots.\n\n\nPlot objects: A plot builds on the Figure layer. If there are multiple plots, each plot is called a subplot. \n\n\nAxis objects: An axis is added to a Plot layer. Axis can be thought of as sets of x and y axis that lines and bars are drawn on. An Axis contains daughter attributes like axis labels, tick labels, and line thickness.\n\n\nData objects: data points, lines, shapes are plotted on an axis.\nMatplotlib's \nplt.subplot()\n function is used to build figure objects. The \nplt.subplot()\n function creates both a figure \nobject\n and an axis \nobject\n. We say the \nplt.subplot()\n function \ninstantiates\n a figure \nobject\n and \ninstantiates\n an axis object. For now, we'll leave the \nsubplot()\n arguments blank. By default, the \nsubplot()\n function creates a single figure object and a single axis object.  We'll call the figure object \nfig\n and the axis object \nax\n. Note these two outputs of the \nplt.subplots()\n function are separated by a comma.\n\n\n\n\nWe instantiated a figure object and axis object, now both of these objects need attributes. We add attributes to the axis object to build a plot. Let's create three NumPy arrays and add the three arrays to our axis object.\n\n\nThe NumPy arrays \nx\n, \ny\n, and \nz\n can be added to axis object \nax\n. We add a plot attribute (a line) to our axis object \nax\n using the object-oriented structure \n<object>.<attribute>\n. In this case, \nax\n is the object and \nplot\n is the attribute. The \nplt.show()\n line shows the plot on the screen.\n\n\nThe next code section demonstrates how to build a multi-line plot with Matplotlib's object-oriented interface.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, inlcude:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n4\n*\nnp\n.\npi\n,\n0.1\n)\n\n\ny\n \n=\n \nnp\n.\nsin\n(\nx\n)\n\n\nz\n \n=\n \nnp\n.\ncos\n(\nx\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\ny\n)\n\n\nax\n.\nplot\n(\nx\n,\nz\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe \nax\n object has many \nmethods\n and \nattributes\n. In Python a method is sort of like a function, but methods typically modify the object they are associated with, while functions modify their input arguments.  Two methods we can run on the \nax\n object include \nax.set_title()\n and \nax.legend()\n. A couple daughter objects include \nax.xaxis\n and \nax.yaxis\n. These daughter objects in turn have methods such as \nax.xaxis.set_label_text()\n and \nax.yaxis.set_label_text()\n.\n\n\nThe code section below demonstrates using objects, attributes, and methods to build a multi-line plot.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n4\n*\nnp\n.\npi\n,\n0.1\n)\n\n\ny\n \n=\n \nnp\n.\nsin\n(\nx\n)\n\n\nz\n \n=\n \nnp\n.\ncos\n(\nx\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\ny\n)\n\n\nax\n.\nplot\n(\nx\n,\nz\n)\n\n\nax\n.\nset_title\n(\n'Two Trig Functions'\n)\n\n\nax\n.\nlegend\n([\n'sin'\n,\n'cos'\n])\n\n\nax\n.\nxaxis\n.\nset_label_text\n(\n'Angle \n\\Theta\n\\Theta\n'\n)\n\n\nax\n.\nyaxis\n.\nset_label_text\n(\n'Sine and Cosine'\n)\n\n\nplt\n.\nshow\n()",
            "title": "Multi Line Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.05-Multi-Line-Plots/#multi-line-plots",
            "text": "Multi-line plots are created using Matplotlib's  pyplot  library. This section builds upon the work in the previous section where a plot with one line was created. This section also introduces Matplotlib's  object-oriented  approach to building plots. The object-oriented approach to building plots is used in the rest of this chapter.",
            "title": "Multi Line Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.05-Multi-Line-Plots/#the-matplotlibs-object-oriented-interface",
            "text": "An object-oriented plotting interface is an interface where components of the plot (like the axis, title, lines, markers, tick labels, etc.) are treated as programmatic  objects  that have  attributes  and  methods  associated with them. To create a new  object  is called  instantiation . Once an object is created, or  instantiated , the properties of that object can be modified, and methods can be called on that object. The basic anatomy of a Matplotlib plot includes a couple of layers, each of these layers is a Python  object :   Figure objects: The bottom layer. Think of the figure layer as the figure window which contains the minimize, maximize, close buttons. A figure can include one plot or multiple plots.  Plot objects: A plot builds on the Figure layer. If there are multiple plots, each plot is called a subplot.   Axis objects: An axis is added to a Plot layer. Axis can be thought of as sets of x and y axis that lines and bars are drawn on. An Axis contains daughter attributes like axis labels, tick labels, and line thickness.  Data objects: data points, lines, shapes are plotted on an axis.\nMatplotlib's  plt.subplot()  function is used to build figure objects. The  plt.subplot()  function creates both a figure  object  and an axis  object . We say the  plt.subplot()  function  instantiates  a figure  object  and  instantiates  an axis object. For now, we'll leave the  subplot()  arguments blank. By default, the  subplot()  function creates a single figure object and a single axis object.  We'll call the figure object  fig  and the axis object  ax . Note these two outputs of the  plt.subplots()  function are separated by a comma.   We instantiated a figure object and axis object, now both of these objects need attributes. We add attributes to the axis object to build a plot. Let's create three NumPy arrays and add the three arrays to our axis object.  The NumPy arrays  x ,  y , and  z  can be added to axis object  ax . We add a plot attribute (a line) to our axis object  ax  using the object-oriented structure  <object>.<attribute> . In this case,  ax  is the object and  plot  is the attribute. The  plt.show()  line shows the plot on the screen.  The next code section demonstrates how to build a multi-line plot with Matplotlib's object-oriented interface.   In\u00a0[1]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, inlcude:  % matplotlib  inline  x   =   np . arange ( 0 , 4 * np . pi , 0.1 )  y   =   np . sin ( x )  z   =   np . cos ( x )  fig ,   ax   =   plt . subplots ()  ax . plot ( x , y )  ax . plot ( x , z )  plt . show ()                \nThe  ax  object has many  methods  and  attributes . In Python a method is sort of like a function, but methods typically modify the object they are associated with, while functions modify their input arguments.  Two methods we can run on the  ax  object include  ax.set_title()  and  ax.legend() . A couple daughter objects include  ax.xaxis  and  ax.yaxis . These daughter objects in turn have methods such as  ax.xaxis.set_label_text()  and  ax.yaxis.set_label_text() .  The code section below demonstrates using objects, attributes, and methods to build a multi-line plot.   In\u00a0[2]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  x   =   np . arange ( 0 , 4 * np . pi , 0.1 )  y   =   np . sin ( x )  z   =   np . cos ( x )  fig ,   ax   =   plt . subplots ()  ax . plot ( x , y )  ax . plot ( x , z )  ax . set_title ( 'Two Trig Functions' )  ax . legend ([ 'sin' , 'cos' ])  ax . xaxis . set_label_text ( 'Angle  \\Theta \\Theta ' )  ax . yaxis . set_label_text ( 'Sine and Cosine' )  plt . show ()",
            "title": "The Matplotlib's object-oriented interface"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.06-Bar-Charts-and-Pie-Charts/",
            "text": "Bar Charts and Pie Charts\n\n\nBar charts and pie charts can be created with Matplotlib's \npyplot\n library.\n\n\nBar Charts\n\n\nTo construct a bar plot using Matplotlib, first import Matplotlib's \npyplot\n library. The alias \nplt\n is commonly used to substitute \nmatplotlib.pyplot\n.  If using a Jupiter notebook, include the line \n%matplotlib inline\n. In the next example, NumPy is used. So NumPy must be included in the imports as well as Matplotlib. \n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\nWe need some data to add to our bar chart. In this case, the data is from a set of \ncoefficient of thermal expansion\n lab measurements. The coefficient of thermal expansion (CTE) is a material property that describes how much a material will change in length as a result of a change in temperature. Different materials have different CTE's and we can use the lab data to determine which material will expand the most if all three materials are heated up to the same temperature (assuming all three materials start at the same temperature).\n\n\nFirst, we need to input the lab measurement data as NumPy arrays:\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\n# Data\n\n\naluminum\n \n=\n \nnp\n.\narray\n([\n\n    \n6.4e-5\n,\n \n3.01e-5\n,\n \n2.36e-5\n,\n \n3.0e-5\n,\n \n7.0e-5\n,\n \n4.5e-5\n,\n \n3.8e-5\n,\n \n4.2e-5\n,\n \n2.62e-5\n,\n\n    \n3.6e-5\n\n\n])\n\n\ncopper\n \n=\n \nnp\n.\narray\n([\n\n    \n4.5e-5\n,\n \n1.97e-5\n,\n \n1.6e-5\n,\n \n1.97e-5\n,\n \n4.0e-5\n,\n \n2.4e-5\n,\n \n1.9e-5\n,\n \n2.41e-5\n,\n \n1.85e-5\n,\n\n    \n3.3e-5\n\n\n])\n\n\nsteel\n \n=\n \nnp\n.\narray\n([\n\n    \n3.3e-5\n,\n \n1.2e-5\n,\n \n0.9e-5\n,\n \n1.2e-5\n,\n \n1.3e-5\n,\n \n1.6e-5\n,\n \n1.4e-5\n,\n \n1.58e-5\n,\n \n1.32e-5\n,\n\n    \n2.1e-5\n\n\n])\n\n\n\n\n\n\n\n\n\n\n\nNext, calculate the average or \nmean\n of each data set using NumPy's \nnp.mean()\n function.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\n# Calculate the average\n\n\naluminum_mean\n \n=\n \nnp\n.\nmean\n(\naluminum\n)\n\n\ncopper_mean\n \n=\n \nnp\n.\nmean\n(\ncopper\n)\n\n\nsteel_mean\n \n=\n \nnp\n.\nmean\n(\nsteel\n)\n\n\n\n\n\n\n\n\n\n\n\nThen build a list of materials and CTE's. Note the list of materials is a list of strings, the list of x-postions \nx_pos\n is an array of numbers and the list \nCTEs\n is a list of three numbers from the \nnp.mean()\n calculation above. Python's \nlen()\n function returns the length of a list, array, dictionary or tuple. \n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\n# Create Arrays for the plot\n\n\nmaterials\n \n=\n \n[\n'Aluminum'\n,\n \n'Copper'\n,\n \n'Steel'\n]\n\n\nx_pos\n \n=\n \nnp\n.\narange\n(\nlen\n(\nmaterials\n))\n\n\nCTEs\n \n=\n \n[\naluminum_mean\n,\n \ncopper_mean\n,\n \nsteel_mean\n]\n\n\n\n\n\n\n\n\n\n\n\nAfter the \nmaterials\n, \nx_pos\n, and \nCTEs\n (the labels below the bars) are defined, the bar chart is created using the \nax.bar()\n method.\n\n\nMathplotlib's \nax.bar()\n method requires two positional arguments, a list of bar positions and a list of bar heights. In this bar chart, \nx_pos\n is the list of bar positions and \nCTEs\n is the list of bar heights.\n\n\nThe list of materials is passed to the \nax.set_xticklabels()\n method.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\n# Build the plot\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nbar\n(\nx_pos\n,\n \nCTEs\n,\n \nalign\n=\n'center'\n,\n \nalpha\n=\n0.5\n)\n\n\nax\n.\nset_ylabel\n(\n'Coefficient of Thermal Expansion (\n\\degree C^{-1}\n\\degree C^{-1}\n)'\n)\n\n\nax\n.\nset_xticks\n(\nx_pos\n)\n\n\nax\n.\nset_xticklabels\n(\nmaterials\n)\n\n\nax\n.\nset_title\n(\n'Coefficent of Thermal Expansion (CTE) of Three Metals'\n)\n\n\nax\n.\nyaxis\n.\ngrid\n(\nTrue\n)\n\n\n# Save the figure and show\n\n\nplt\n.\ntight_layout\n()\n\n\nplt\n.\nsavefig\n(\n'bar_plot.png'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPie Charts\n\n\nPie charts can be constructed with Matplotlib's \nax.pie()\n method. The one required positional argument supplied to the \nax.pie()\n method is a list of pie piece sizes. Optional keyword arguments include a list of pie piece labels (\nlabel=\n) and if the percentages will be auto-calculated and in what format (\nautopct=\n).\n\n\nFor our first pie chart, the data we will plot describes the number of students who choose different engineering majors at colleges in the US each year.\n\n\nThe following table lists the approximate numbers of engineering graduates in different engineering disciplines:\n\n\n\n\n\n\n\n\ndiscipline\n\n\nnumber of graduates\n\n\n\n\n\n\n\n\n\n\ncivil engineering\n\n\n15,000  graduates\n\n\n\n\n\n\nelectrical engineering\n\n\n50,000  graduates\n\n\n\n\n\n\nmechanical engineering\n\n\n45,000  graduates\n\n\n\n\n\n\nchemical engineering\n\n\n10,000  graduates\n\n\n\n\n\n\n\n\nWe will plot this data on a pie chart with Matplotlib's \nax.pie()\n method. The pie piece labels are defined as a list of strings, and the pie piece sizes are defined as a list of integers. The line \nax.axis('equal')\n is needed to ensure the pie chart is a circle. If you leave out \nax.axis('equal')\n, the pie chart may look like an oval instead of a circle. \n\n\nThe code section below builds a pie chart with four pie pieces, each pie piece labeled with a relative size auto calculated to the nearest 10th of a percent.\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\n\n\nlabels\n \n=\n \n[\n'Civil'\n,\n \n'Electrical'\n,\n \n'Mechanical'\n,\n \n'Chemical'\n]\n\n\nsizes\n \n=\n \n[\n15\n,\n \n50\n,\n \n45\n,\n \n10\n]\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\npie\n(\nsizes\n,\n \nlabels\n=\nlabels\n,\n \nautopct\n=\n'\n%1.1f%%\n'\n)\n\n\nax\n.\naxis\n(\n'equal'\n)\n  \n# Equal aspect ratio ensures the pie chart is circular.\n\n\nax\n.\nset_title\n(\n'Engineering Diciplines'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPie pieces can be highlighted by \"exploding\" them out. Exploded pie pieces are applied to a Matplotlib pie chart using the \nexplode=\n keyword argument. \nshadow=True\n and \nstartangle=\n are two additional keyword arguments that can be passed to the \nax.pie()\n method.\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\n# Pie chart, where the slices will be ordered and plotted counter-clockwise\n\n\nlabels\n \n=\n \n[\n'Civil'\n,\n \n'Electrical'\n,\n \n'Mechanical'\n,\n \n'Chemical'\n]\n\n\nsizes\n \n=\n \n[\n15\n,\n \n30\n,\n \n45\n,\n \n10\n]\n\n\n# Explode out the 'Chemical' pie piece by offsetting it a greater amount\n\n\nexplode\n \n=\n \n(\n0.1\n,\n \n0.1\n,\n \n0.1\n,\n \n0.4\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\npie\n(\nsizes\n,\n\n       \nexplode\n=\nexplode\n,\n\n       \nlabels\n=\nlabels\n,\n\n       \nautopct\n=\n'\n%1.1f%%\n'\n,\n\n       \nshadow\n=\nTrue\n,\n\n       \nstartangle\n=\n90\n)\n\n\nax\n.\naxis\n(\n'equal'\n)\n  \n# Equal aspect ratio ensures the pie chart is circular.\n\n\nax\n.\nset_title\n(\n'Engineering Diciplines'\n)\n\n\nplt\n.\nshow\n()",
            "title": "Bar Charts and Pie Charts"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.06-Bar-Charts-and-Pie-Charts/#bar-charts-and-pie-charts",
            "text": "Bar charts and pie charts can be created with Matplotlib's  pyplot  library.",
            "title": "Bar Charts and Pie Charts"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.06-Bar-Charts-and-Pie-Charts/#bar-charts",
            "text": "To construct a bar plot using Matplotlib, first import Matplotlib's  pyplot  library. The alias  plt  is commonly used to substitute  matplotlib.pyplot .  If using a Jupiter notebook, include the line  %matplotlib inline . In the next example, NumPy is used. So NumPy must be included in the imports as well as Matplotlib.    In\u00a0[1]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline     \nWe need some data to add to our bar chart. In this case, the data is from a set of  coefficient of thermal expansion  lab measurements. The coefficient of thermal expansion (CTE) is a material property that describes how much a material will change in length as a result of a change in temperature. Different materials have different CTE's and we can use the lab data to determine which material will expand the most if all three materials are heated up to the same temperature (assuming all three materials start at the same temperature).  First, we need to input the lab measurement data as NumPy arrays:   In\u00a0[2]:  \n      # Data  aluminum   =   np . array ([ \n     6.4e-5 ,   3.01e-5 ,   2.36e-5 ,   3.0e-5 ,   7.0e-5 ,   4.5e-5 ,   3.8e-5 ,   4.2e-5 ,   2.62e-5 , \n     3.6e-5  ])  copper   =   np . array ([ \n     4.5e-5 ,   1.97e-5 ,   1.6e-5 ,   1.97e-5 ,   4.0e-5 ,   2.4e-5 ,   1.9e-5 ,   2.41e-5 ,   1.85e-5 , \n     3.3e-5  ])  steel   =   np . array ([ \n     3.3e-5 ,   1.2e-5 ,   0.9e-5 ,   1.2e-5 ,   1.3e-5 ,   1.6e-5 ,   1.4e-5 ,   1.58e-5 ,   1.32e-5 , \n     2.1e-5  ])      \nNext, calculate the average or  mean  of each data set using NumPy's  np.mean()  function.   In\u00a0[3]:  \n      # Calculate the average  aluminum_mean   =   np . mean ( aluminum )  copper_mean   =   np . mean ( copper )  steel_mean   =   np . mean ( steel )      \nThen build a list of materials and CTE's. Note the list of materials is a list of strings, the list of x-postions  x_pos  is an array of numbers and the list  CTEs  is a list of three numbers from the  np.mean()  calculation above. Python's  len()  function returns the length of a list, array, dictionary or tuple.    In\u00a0[4]:  \n      # Create Arrays for the plot  materials   =   [ 'Aluminum' ,   'Copper' ,   'Steel' ]  x_pos   =   np . arange ( len ( materials ))  CTEs   =   [ aluminum_mean ,   copper_mean ,   steel_mean ]      \nAfter the  materials ,  x_pos , and  CTEs  (the labels below the bars) are defined, the bar chart is created using the  ax.bar()  method.  Mathplotlib's  ax.bar()  method requires two positional arguments, a list of bar positions and a list of bar heights. In this bar chart,  x_pos  is the list of bar positions and  CTEs  is the list of bar heights.  The list of materials is passed to the  ax.set_xticklabels()  method.   In\u00a0[5]:  \n      # Build the plot  fig ,   ax   =   plt . subplots ()  ax . bar ( x_pos ,   CTEs ,   align = 'center' ,   alpha = 0.5 )  ax . set_ylabel ( 'Coefficient of Thermal Expansion ( \\degree C^{-1} \\degree C^{-1} )' )  ax . set_xticks ( x_pos )  ax . set_xticklabels ( materials )  ax . set_title ( 'Coefficent of Thermal Expansion (CTE) of Three Metals' )  ax . yaxis . grid ( True )  # Save the figure and show  plt . tight_layout ()  plt . savefig ( 'bar_plot.png' )  plt . show ()",
            "title": "Bar Charts"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.06-Bar-Charts-and-Pie-Charts/#pie-charts",
            "text": "Pie charts can be constructed with Matplotlib's  ax.pie()  method. The one required positional argument supplied to the  ax.pie()  method is a list of pie piece sizes. Optional keyword arguments include a list of pie piece labels ( label= ) and if the percentages will be auto-calculated and in what format ( autopct= ).  For our first pie chart, the data we will plot describes the number of students who choose different engineering majors at colleges in the US each year.  The following table lists the approximate numbers of engineering graduates in different engineering disciplines:     discipline  number of graduates      civil engineering  15,000  graduates    electrical engineering  50,000  graduates    mechanical engineering  45,000  graduates    chemical engineering  10,000  graduates     We will plot this data on a pie chart with Matplotlib's  ax.pie()  method. The pie piece labels are defined as a list of strings, and the pie piece sizes are defined as a list of integers. The line  ax.axis('equal')  is needed to ensure the pie chart is a circle. If you leave out  ax.axis('equal') , the pie chart may look like an oval instead of a circle.   The code section below builds a pie chart with four pie pieces, each pie piece labeled with a relative size auto calculated to the nearest 10th of a percent.   In\u00a0[6]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  # Pie chart, where the slices will be ordered and plotted counter-clockwise:  labels   =   [ 'Civil' ,   'Electrical' ,   'Mechanical' ,   'Chemical' ]  sizes   =   [ 15 ,   50 ,   45 ,   10 ]  fig ,   ax   =   plt . subplots ()  ax . pie ( sizes ,   labels = labels ,   autopct = ' %1.1f%% ' )  ax . axis ( 'equal' )    # Equal aspect ratio ensures the pie chart is circular.  ax . set_title ( 'Engineering Diciplines' )  plt . show ()                \nPie pieces can be highlighted by \"exploding\" them out. Exploded pie pieces are applied to a Matplotlib pie chart using the  explode=  keyword argument.  shadow=True  and  startangle=  are two additional keyword arguments that can be passed to the  ax.pie()  method.   In\u00a0[7]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  # Pie chart, where the slices will be ordered and plotted counter-clockwise  labels   =   [ 'Civil' ,   'Electrical' ,   'Mechanical' ,   'Chemical' ]  sizes   =   [ 15 ,   30 ,   45 ,   10 ]  # Explode out the 'Chemical' pie piece by offsetting it a greater amount  explode   =   ( 0.1 ,   0.1 ,   0.1 ,   0.4 )  fig ,   ax   =   plt . subplots ()  ax . pie ( sizes , \n        explode = explode , \n        labels = labels , \n        autopct = ' %1.1f%% ' , \n        shadow = True , \n        startangle = 90 )  ax . axis ( 'equal' )    # Equal aspect ratio ensures the pie chart is circular.  ax . set_title ( 'Engineering Diciplines' )  plt . show ()",
            "title": "Pie Charts"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.07-Error-Bars/",
            "text": "Error Bars\n\n\nMatplotlib line plots and bar charts can include error bars. Error bars are useful to problem solvers because error bars show the confidence or precision in a set of measurements or calculated values. Bar charts without error bars give the illusion that a measured or calculated value is known to high precision or high confidence.\n\n\nError bars in bar plots\n\n\nTo construct a bar plot with error bars, first import Matplotlib. If using a Jupyter notebook, include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# include if using a Jupyter notebook\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\nWe'll apply error bars to the Coefficient of Thermal Expansion data used in a previous section. First the data is stored in three NumPy arrays. Then the mean or average of each array is calculated. The mean of each array will be the height of the bars in the bar plot. Next, the standard deviation of each array is calculated. The standard deviation will be the height of the error bars. Finally, a couple lists are created that correspond to the bar labels (\nlabels\n), bar positions (\nx_pos\n), bar heights (\nCTEs\n), and the error bar heights (\nerror\n).\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\n# Data\n\n\naluminum\n \n=\n \nnp\n.\narray\n([\n6.4e-5\n \n,\n \n3.01e-5\n \n,\n \n2.36e-5\n,\n \n3.0e-5\n,\n \n7.0e-5\n,\n \n4.5e-5\n,\n \n3.8e-5\n,\n\n                     \n4.2e-5\n,\n \n2.62e-5\n,\n \n3.6e-5\n])\n\n\ncopper\n \n=\n \nnp\n.\narray\n([\n4.5e-5\n \n,\n \n1.97e-5\n \n,\n \n1.6e-5\n,\n \n1.97e-5\n,\n \n4.0e-5\n,\n \n2.4e-5\n,\n \n1.9e-5\n,\n \n                   \n2.41e-5\n \n,\n \n1.85e-5\n,\n \n3.3e-5\n \n])\n\n\nsteel\n \n=\n \nnp\n.\narray\n([\n3.3e-5\n \n,\n \n1.2e-5\n \n,\n \n0.9e-5\n,\n \n1.2e-5\n,\n \n1.3e-5\n,\n \n1.6e-5\n,\n \n1.4e-5\n,\n \n                  \n1.58e-5\n,\n \n1.32e-5\n \n,\n \n2.1e-5\n])\n\n\n# Calculate the average\n\n\naluminum_mean\n \n=\n \nnp\n.\nmean\n(\naluminum\n)\n\n\ncopper_mean\n \n=\n \nnp\n.\nmean\n(\ncopper\n)\n\n\nsteel_mean\n \n=\n \nnp\n.\nmean\n(\nsteel\n)\n\n\n# Calculate the standard deviation\n\n\naluminum_std\n \n=\n \nnp\n.\nstd\n(\naluminum\n)\n\n\ncopper_std\n \n=\n \nnp\n.\nstd\n(\ncopper\n)\n\n\nsteel_std\n \n=\n \nnp\n.\nstd\n(\nsteel\n)\n\n\n# Define labels, positions, bar heights and error bar heights\n\n\nlabels\n \n=\n \n[\n'Aluminum'\n,\n \n'Copper'\n,\n \n'Steel'\n]\n\n\nx_pos\n \n=\n \nnp\n.\narange\n(\nlen\n(\nlabels\n))\n\n\nCTEs\n \n=\n \n[\naluminum_mean\n,\n \ncopper_mean\n,\n \nsteel_mean\n]\n\n\nerror\n \n=\n \n[\naluminum_std\n,\n \ncopper_std\n,\n \nsteel_std\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\n# Build the plot\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nbar\n(\nx_pos\n,\n \nCTEs\n,\n\n       \nyerr\n=\nerror\n,\n\n       \nalign\n=\n'center'\n,\n\n       \nalpha\n=\n0.5\n,\n\n       \necolor\n=\n'black'\n,\n\n       \ncapsize\n=\n10\n)\n\n\nax\n.\nset_ylabel\n(\n'Coefficient of Thermal Expansion (\n\\degree C^{-1}\n\\degree C^{-1}\n)'\n)\n\n\nax\n.\nset_xticks\n(\nx_pos\n)\n\n\nax\n.\nset_xticklabels\n(\nlabels\n)\n\n\nax\n.\nset_title\n(\n'Coefficent of Thermal Expansion (CTE) of Three Metals'\n)\n\n\nax\n.\nyaxis\n.\ngrid\n(\nTrue\n)\n\n\n# Save the figure and show\n\n\nplt\n.\ntight_layout\n()\n\n\nplt\n.\nsavefig\n(\n'bar_plot_with_error_bars.png'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nError bars in line plots\n\n\nError bars can also be added to line plots created with Matplotlib. The \nax.errorbar()\n method is used to create a line plot with error bars. The two positional arguments supplied to \nax.errorbar()\n are the lists or arrays of x, y data points. The two keyword arguments \nxerr=\n and \nyerr=\n define the error bar lengths in the x and y directions. \n\n\nThe general format of Matplotlib's \nax.errorbar()\n method is below:\n\n\nax.errorbar(x, y,\n            xerr=<error bar width>\n            yerr=<error bar height>\n            fmt=<format>)\n\n\n\n\nThe following code section builds a line plot with horizontal and vertical error bars included on each point in the plot.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n5.5\n,\n10\n)\n\n\ny\n \n=\n \n10\n*\nnp\n.\nexp\n(\n-\nx\n)\n\n\nxerr\n \n=\n \nnp\n.\nrandom\n.\nrandom_sample\n((\n10\n))\n\n\nyerr\n \n=\n \nnp\n.\nrandom\n.\nrandom_sample\n((\n10\n))\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nerrorbar\n(\nx\n,\n \ny\n,\n\n            \nxerr\n=\nxerr\n,\n\n            \nyerr\n=\nyerr\n,\n\n            \nfmt\n=\n'-o'\n)\n\n\nax\n.\nset_xlabel\n(\n'x-axis'\n)\n\n\nax\n.\nset_ylabel\n(\n'y-axis'\n)\n\n\nax\n.\nset_title\n(\n'Line plot with error bars'\n)\n\n\nplt\n.\nshow\n()",
            "title": "Error Bars"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.07-Error-Bars/#error-bars",
            "text": "Matplotlib line plots and bar charts can include error bars. Error bars are useful to problem solvers because error bars show the confidence or precision in a set of measurements or calculated values. Bar charts without error bars give the illusion that a measured or calculated value is known to high precision or high confidence.",
            "title": "Error Bars"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.07-Error-Bars/#error-bars-in-bar-plots",
            "text": "To construct a bar plot with error bars, first import Matplotlib. If using a Jupyter notebook, include the line  %matplotlib inline    In\u00a0[1]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # include if using a Jupyter notebook  % matplotlib  inline     \nWe'll apply error bars to the Coefficient of Thermal Expansion data used in a previous section. First the data is stored in three NumPy arrays. Then the mean or average of each array is calculated. The mean of each array will be the height of the bars in the bar plot. Next, the standard deviation of each array is calculated. The standard deviation will be the height of the error bars. Finally, a couple lists are created that correspond to the bar labels ( labels ), bar positions ( x_pos ), bar heights ( CTEs ), and the error bar heights ( error ).   In\u00a0[2]:  \n      # Data  aluminum   =   np . array ([ 6.4e-5   ,   3.01e-5   ,   2.36e-5 ,   3.0e-5 ,   7.0e-5 ,   4.5e-5 ,   3.8e-5 , \n                      4.2e-5 ,   2.62e-5 ,   3.6e-5 ])  copper   =   np . array ([ 4.5e-5   ,   1.97e-5   ,   1.6e-5 ,   1.97e-5 ,   4.0e-5 ,   2.4e-5 ,   1.9e-5 ,  \n                    2.41e-5   ,   1.85e-5 ,   3.3e-5   ])  steel   =   np . array ([ 3.3e-5   ,   1.2e-5   ,   0.9e-5 ,   1.2e-5 ,   1.3e-5 ,   1.6e-5 ,   1.4e-5 ,  \n                   1.58e-5 ,   1.32e-5   ,   2.1e-5 ])  # Calculate the average  aluminum_mean   =   np . mean ( aluminum )  copper_mean   =   np . mean ( copper )  steel_mean   =   np . mean ( steel )  # Calculate the standard deviation  aluminum_std   =   np . std ( aluminum )  copper_std   =   np . std ( copper )  steel_std   =   np . std ( steel )  # Define labels, positions, bar heights and error bar heights  labels   =   [ 'Aluminum' ,   'Copper' ,   'Steel' ]  x_pos   =   np . arange ( len ( labels ))  CTEs   =   [ aluminum_mean ,   copper_mean ,   steel_mean ]  error   =   [ aluminum_std ,   copper_std ,   steel_std ]         In\u00a0[3]:  \n      # Build the plot  fig ,   ax   =   plt . subplots ()  ax . bar ( x_pos ,   CTEs , \n        yerr = error , \n        align = 'center' , \n        alpha = 0.5 , \n        ecolor = 'black' , \n        capsize = 10 )  ax . set_ylabel ( 'Coefficient of Thermal Expansion ( \\degree C^{-1} \\degree C^{-1} )' )  ax . set_xticks ( x_pos )  ax . set_xticklabels ( labels )  ax . set_title ( 'Coefficent of Thermal Expansion (CTE) of Three Metals' )  ax . yaxis . grid ( True )  # Save the figure and show  plt . tight_layout ()  plt . savefig ( 'bar_plot_with_error_bars.png' )  plt . show ()",
            "title": "Error bars in bar plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.07-Error-Bars/#error-bars-in-line-plots",
            "text": "Error bars can also be added to line plots created with Matplotlib. The  ax.errorbar()  method is used to create a line plot with error bars. The two positional arguments supplied to  ax.errorbar()  are the lists or arrays of x, y data points. The two keyword arguments  xerr=  and  yerr=  define the error bar lengths in the x and y directions.   The general format of Matplotlib's  ax.errorbar()  method is below:  ax.errorbar(x, y,\n            xerr=<error bar width>\n            yerr=<error bar height>\n            fmt=<format>)  The following code section builds a line plot with horizontal and vertical error bars included on each point in the plot.   In\u00a0[4]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  x   =   np . linspace ( 0 , 5.5 , 10 )  y   =   10 * np . exp ( - x )  xerr   =   np . random . random_sample (( 10 ))  yerr   =   np . random . random_sample (( 10 ))  fig ,   ax   =   plt . subplots ()  ax . errorbar ( x ,   y , \n             xerr = xerr , \n             yerr = yerr , \n             fmt = '-o' )  ax . set_xlabel ( 'x-axis' )  ax . set_ylabel ( 'y-axis' )  ax . set_title ( 'Line plot with error bars' )  plt . show ()",
            "title": "Error bars in line plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.08-Histograms/",
            "text": "Histograms\n\n\nHistograms are a useful type of statistics plot for problem solvers. A histogram is a type of bar plot that shows the frequency or number of values compared to a set of value ranges. Histogram plots can be created with Matplotlib. Matplotlib's \nax.hist()\n function creates histogram plots.\nIn this example, we'll use NumPy's \nnp.random.normal()\n function to create an array of random numbers with a normal distribution. The three arguments passed to NumPy's \nnp.random.normal()\n function are \nmu\n (mean), \nsigma\n (standard deviation) and \nsize=\n (size of the array).\n\n\nMatplotlib's \nax.hist()\n method is used to build the histogram. The first argument passed to \nax.hist()\n corresponds to the list or array of values to plot (\ndata\n). The second argument corresponds to the number of bins, or number of bars on the histogram. The general format of Matplotlib's \nax.hist()\n method is below.\n\n\nax.hist(data, num_bins)\n\n\n\n\nIn this example, we'll specify \n20\n bins (\n20\n bars).\n\n\nThe line \nplt.style.use('fivethirtyeight')\n is included to style the plot to look like plots on \nfivethirtyeight.com\n. Matplotlib styles are addressed in a subsequent section of this chapter.\n\n\nThe code section below builds a histogram that contains 20 bins.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\nplt\n.\nstyle\n.\nuse\n(\n'fivethirtyeight'\n)\n\n\nmu\n \n=\n \n80\n\n\nsigma\n \n=\n \n7\n\n\nx\n \n=\n \nnp\n.\nrandom\n.\nnormal\n(\nmu\n,\n \nsigma\n,\n \nsize\n=\n200\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nhist\n(\nx\n,\n \n20\n)\n\n\nax\n.\nset_title\n(\n'Historgram'\n)\n\n\nax\n.\nset_xlabel\n(\n'bin range'\n)\n\n\nax\n.\nset_ylabel\n(\n'frequency'\n)\n\n\nfig\n.\ntight_layout\n()\n\n\nplt\n.\nshow\n()",
            "title": "Histograms"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.08-Histograms/#histograms",
            "text": "Histograms are a useful type of statistics plot for problem solvers. A histogram is a type of bar plot that shows the frequency or number of values compared to a set of value ranges. Histogram plots can be created with Matplotlib. Matplotlib's  ax.hist()  function creates histogram plots.\nIn this example, we'll use NumPy's  np.random.normal()  function to create an array of random numbers with a normal distribution. The three arguments passed to NumPy's  np.random.normal()  function are  mu  (mean),  sigma  (standard deviation) and  size=  (size of the array).  Matplotlib's  ax.hist()  method is used to build the histogram. The first argument passed to  ax.hist()  corresponds to the list or array of values to plot ( data ). The second argument corresponds to the number of bins, or number of bars on the histogram. The general format of Matplotlib's  ax.hist()  method is below.  ax.hist(data, num_bins)  In this example, we'll specify  20  bins ( 20  bars).  The line  plt.style.use('fivethirtyeight')  is included to style the plot to look like plots on  fivethirtyeight.com . Matplotlib styles are addressed in a subsequent section of this chapter.  The code section below builds a histogram that contains 20 bins.   In\u00a0[1]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline plt . style . use ( 'fivethirtyeight' )  mu   =   80  sigma   =   7  x   =   np . random . normal ( mu ,   sigma ,   size = 200 )  fig ,   ax   =   plt . subplots ()  ax . hist ( x ,   20 )  ax . set_title ( 'Historgram' )  ax . set_xlabel ( 'bin range' )  ax . set_ylabel ( 'frequency' )  fig . tight_layout ()  plt . show ()",
            "title": "Histograms"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.09-Box-Plots-and-Violin-Plots/",
            "text": "Box Plots and Violin Plots\n\n\nIn addition to histograms, a couple other useful statistical plots are box plots and violin plots.\n\n\nBox Plots\n\n\nTo create a box plot with Matplotlib, the \nax.boxplot()\n method is used. The general syntax is:\n\n\nax.boxplot(data)\n\n\n\n\nThe \ndata\n passed to the \nax.boxplot()\n method can be a list or NumPy array. To create multiple box plots side by side, pass in a list of lists or a 2D array.\n\n\nThe code section below creates a box plot with four elements.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\n# generate some random data\n\n\ndata1\n \n=\n \nnp\n.\nrandom\n.\nnormal\n(\n0\n,\n \n6\n,\n \n100\n)\n\n\ndata2\n \n=\n \nnp\n.\nrandom\n.\nnormal\n(\n0\n,\n \n7\n,\n \n100\n)\n\n\ndata3\n \n=\n \nnp\n.\nrandom\n.\nnormal\n(\n0\n,\n \n8\n,\n \n100\n)\n\n\ndata4\n \n=\n \nnp\n.\nrandom\n.\nnormal\n(\n0\n,\n \n9\n,\n \n100\n)\n\n\ndata\n \n=\n \nlist\n([\ndata1\n,\n \ndata2\n,\n \ndata3\n,\n \ndata4\n])\n\n\n# build a box plot\n\n\nax\n.\nboxplot\n(\ndata\n)\n\n\nax\n.\nset_title\n(\n'box plot'\n)\n\n\n# add horizontal grid lines\n\n\nax\n.\nyaxis\n.\ngrid\n(\nTrue\n)\n\n\nax\n.\nset_xticks\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n])\n\n\nax\n.\nset_xlabel\n(\n'x-axis'\n)\n\n\nax\n.\nset_ylabel\n(\n'y-axis'\n)\n\n\nxticklabels\n=\n[\n'category 1'\n,\n \n'category 2'\n,\n \n'category 3'\n,\n \n'category 4'\n]\n\n\nax\n.\nset_xticklabels\n(\nxticklabels\n)\n\n\n# show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nViolin Plots\n\n\nViolin plots are another type of statistical plot. A violin plot is similar to a box plot, but a violin plot shows some additional information. The sides of the \"violins\" in a violin plot corresponds to a kernel density estimation (kind of like a histogram) flipped vertically.\n\n\nThe code section below demonstrates how to create a violin plot with Matplotlib.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\n# generate some random data\n\n\ndata1\n \n=\n \nnp\n.\nrandom\n.\nnormal\n(\n0\n,\n \n6\n,\n \n100\n)\n\n\ndata2\n \n=\n \nnp\n.\nrandom\n.\nnormal\n(\n0\n,\n \n7\n,\n \n100\n)\n\n\ndata3\n \n=\n \nnp\n.\nrandom\n.\nnormal\n(\n0\n,\n \n8\n,\n \n100\n)\n\n\ndata4\n \n=\n \nnp\n.\nrandom\n.\nnormal\n(\n0\n,\n \n9\n,\n \n100\n)\n\n\ndata\n \n=\n \nlist\n([\ndata1\n,\n \ndata2\n,\n \ndata3\n,\n \ndata4\n])\n\n\n# build a violin plot\n\n\nax\n.\nviolinplot\n(\ndata\n,\n \nshowmeans\n=\nFalse\n,\n \nshowmedians\n=\nTrue\n)\n\n\nax\n.\nset_title\n(\n'violin plot'\n)\n\n\n# add horizontal grid lines\n\n\nax\n.\nyaxis\n.\ngrid\n(\nTrue\n)\n\n\nax\n.\nset_xticks\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n])\n\n\nax\n.\nset_xlabel\n(\n'x-axis'\n)\n\n\nax\n.\nset_ylabel\n(\n'y-axis'\n)\n\n\n# add x-tick labels\n\n\nxticklabels\n \n=\n \n[\n'category 1'\n,\n \n'category 2'\n,\n \n'category 3'\n,\n \n'category 4'\n]\n\n\nax\n.\nset_xticklabels\n(\nxticklabels\n)\n\n\n# show the plot\n\n\nplt\n.\nshow\n()",
            "title": "Box Plots and Violin Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.09-Box-Plots-and-Violin-Plots/#box-plots-and-violin-plots",
            "text": "In addition to histograms, a couple other useful statistical plots are box plots and violin plots.",
            "title": "Box Plots and Violin Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.09-Box-Plots-and-Violin-Plots/#box-plots",
            "text": "To create a box plot with Matplotlib, the  ax.boxplot()  method is used. The general syntax is:  ax.boxplot(data)  The  data  passed to the  ax.boxplot()  method can be a list or NumPy array. To create multiple box plots side by side, pass in a list of lists or a 2D array.  The code section below creates a box plot with four elements.   In\u00a0[1]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  fig ,   ax   =   plt . subplots ()  # generate some random data  data1   =   np . random . normal ( 0 ,   6 ,   100 )  data2   =   np . random . normal ( 0 ,   7 ,   100 )  data3   =   np . random . normal ( 0 ,   8 ,   100 )  data4   =   np . random . normal ( 0 ,   9 ,   100 )  data   =   list ([ data1 ,   data2 ,   data3 ,   data4 ])  # build a box plot  ax . boxplot ( data )  ax . set_title ( 'box plot' )  # add horizontal grid lines  ax . yaxis . grid ( True )  ax . set_xticks ([ 1 ,   2 ,   3 ,   4 ])  ax . set_xlabel ( 'x-axis' )  ax . set_ylabel ( 'y-axis' )  xticklabels = [ 'category 1' ,   'category 2' ,   'category 3' ,   'category 4' ]  ax . set_xticklabels ( xticklabels )  # show the plot  plt . show ()",
            "title": "Box Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.09-Box-Plots-and-Violin-Plots/#violin-plots",
            "text": "Violin plots are another type of statistical plot. A violin plot is similar to a box plot, but a violin plot shows some additional information. The sides of the \"violins\" in a violin plot corresponds to a kernel density estimation (kind of like a histogram) flipped vertically.  The code section below demonstrates how to create a violin plot with Matplotlib.   In\u00a0[2]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  fig ,   ax   =   plt . subplots ()  # generate some random data  data1   =   np . random . normal ( 0 ,   6 ,   100 )  data2   =   np . random . normal ( 0 ,   7 ,   100 )  data3   =   np . random . normal ( 0 ,   8 ,   100 )  data4   =   np . random . normal ( 0 ,   9 ,   100 )  data   =   list ([ data1 ,   data2 ,   data3 ,   data4 ])  # build a violin plot  ax . violinplot ( data ,   showmeans = False ,   showmedians = True )  ax . set_title ( 'violin plot' )  # add horizontal grid lines  ax . yaxis . grid ( True )  ax . set_xticks ([ 1 ,   2 ,   3 ,   4 ])  ax . set_xlabel ( 'x-axis' )  ax . set_ylabel ( 'y-axis' )  # add x-tick labels  xticklabels   =   [ 'category 1' ,   'category 2' ,   'category 3' ,   'category 4' ]  ax . set_xticklabels ( xticklabels )  # show the plot  plt . show ()",
            "title": "Violin Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.10-Scatter-Plots/",
            "text": "Scatter Plots\n\n\nScatter plots of (x,y) point pairs are created with Matplotlib's \nplt.scatter()\n function. \n\n\nThe required positional arguments supplied to \nplt.scatter()\n are two lists or arrays. The first positional argument specifies the x-value of each point on the scatter plot. The second positional argument specifies the y-value of each point on the scatter plot.\n\n\nThe general form of a \nplt.scatter()\n function call shown below.\n\n\nplt.scatter(x-points, y-points)\n\n\n\n\nThe next code section shows how to build a scatter plot with Matplotlib. \n\n\nFirst, 150 random, but semi-focused, x and y-values are created using NumPy's \nnp.random.randn()\n function.   The x and y-values are plotted on a scatter plot using Matplotlib's \nax.scatter()\n method. Note the number of x-values is the same as the number of y-values. The size of the two lists or two arrays passed to \nplt.scatter()\n must be equal.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if uising a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx1\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\n150\n)\n \n+\n \n10\n\n\ny1\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\n150\n)\n \n+\n \n10\n\n\nx2\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\n150\n)\n \n+\n \n4\n\n\ny2\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\n150\n)\n \n+\n \n4\n\n\nx\n \n=\n \nnp\n.\nappend\n(\nx1\n,\nx2\n)\n\n\ny\n \n=\n \nnp\n.\nappend\n(\ny1\n,\ny2\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nscatter\n(\nx\n,\ny\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMatplotlib scatter plots can be customized by supplying additional keyword arguments to the \nax.scatter()\n method. Note the keyword arguments used in \nax.scatter()\n are a little different from the keyword arguments used in other Matplotlib plot types.\n\n\n\n\n\n\n\n\nscatter plot feature\n\n\nax.scatter()\n keyword\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nmarker size\n\n\ns=\n\n\nax.scatter(x, y, s=10)\n\n\n\n\n\n\nmarker color\n\n\nc=\n\n\nax.scatter(x, y, c=(122, 80, 4))\n\n\n\n\n\n\nmarker opacity\n\n\nalpha=\n\n\nax.scatter(x, y, alpha=0.2)\n\n\n\n\n\n\n\n\nEach of these keyword arguments can be assigned an individual value which applies to the whole scatter plot. The \nax.scatter()\n keyword arguments can also be assigned to lists or arrays. Supplying a list or array controls the properties of each marker in the scatter plot.\n\n\nThe code section below creates a scatter plot with randomly selected colors and areas.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if uising a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx1\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\n150\n)\n \n+\n \n10\n\n\ny1\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\n150\n)\n \n+\n \n10\n\n\nx2\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\n150\n)\n \n+\n \n4\n\n\ny2\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\n150\n)\n \n+\n \n4\n\n\nx\n \n=\n \nnp\n.\nappend\n(\nx1\n,\nx2\n)\n\n\ny\n \n=\n \nnp\n.\nappend\n(\ny1\n,\ny2\n)\n\n\ncolors\n \n=\n \nnp\n.\nrandom\n.\nrand\n(\n150\n2\n)\n\n\narea\n \n=\n \nnp\n.\npi\n \n \n(\n8\n \n \nnp\n.\nrandom\n.\nrand\n(\n150\n2\n))\n**\n2\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nscatter\n(\nx\n,\n \ny\n,\n \ns\n=\narea\n,\n \nc\n=\ncolors\n,\n \nalpha\n=\n0.6\n)\n\n\nax\n.\nset_title\n(\n'Scatter plot of x-y pairs semi-focused in two regions'\n)\n\n\nax\n.\nset_xlabel\n(\n'x value'\n)\n\n\nax\n.\nset_ylabel\n(\n'y value'\n)\n\n\nplt\n.\nshow\n()",
            "title": "Scatter Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.10-Scatter-Plots/#scatter-plots",
            "text": "Scatter plots of (x,y) point pairs are created with Matplotlib's  plt.scatter()  function.   The required positional arguments supplied to  plt.scatter()  are two lists or arrays. The first positional argument specifies the x-value of each point on the scatter plot. The second positional argument specifies the y-value of each point on the scatter plot.  The general form of a  plt.scatter()  function call shown below.  plt.scatter(x-points, y-points)  The next code section shows how to build a scatter plot with Matplotlib.   First, 150 random, but semi-focused, x and y-values are created using NumPy's  np.random.randn()  function.   The x and y-values are plotted on a scatter plot using Matplotlib's  ax.scatter()  method. Note the number of x-values is the same as the number of y-values. The size of the two lists or two arrays passed to  plt.scatter()  must be equal.   In\u00a0[1]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if uising a Jupyter notebook, include:  % matplotlib  inline  x1   =   1.5     np . random . randn ( 150 )   +   10  y1   =   1.5     np . random . randn ( 150 )   +   10  x2   =   1.5     np . random . randn ( 150 )   +   4  y2   =   1.5     np . random . randn ( 150 )   +   4  x   =   np . append ( x1 , x2 )  y   =   np . append ( y1 , y2 )  fig ,   ax   =   plt . subplots ()  ax . scatter ( x , y )  plt . show ()                \nMatplotlib scatter plots can be customized by supplying additional keyword arguments to the  ax.scatter()  method. Note the keyword arguments used in  ax.scatter()  are a little different from the keyword arguments used in other Matplotlib plot types.     scatter plot feature  ax.scatter()  keyword  Example      marker size  s=  ax.scatter(x, y, s=10)    marker color  c=  ax.scatter(x, y, c=(122, 80, 4))    marker opacity  alpha=  ax.scatter(x, y, alpha=0.2)     Each of these keyword arguments can be assigned an individual value which applies to the whole scatter plot. The  ax.scatter()  keyword arguments can also be assigned to lists or arrays. Supplying a list or array controls the properties of each marker in the scatter plot.  The code section below creates a scatter plot with randomly selected colors and areas.   In\u00a0[2]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if uising a Jupyter notebook, include:  % matplotlib  inline  x1   =   1.5     np . random . randn ( 150 )   +   10  y1   =   1.5     np . random . randn ( 150 )   +   10  x2   =   1.5     np . random . randn ( 150 )   +   4  y2   =   1.5     np . random . randn ( 150 )   +   4  x   =   np . append ( x1 , x2 )  y   =   np . append ( y1 , y2 )  colors   =   np . random . rand ( 150 2 )  area   =   np . pi     ( 8     np . random . rand ( 150 2 )) ** 2  fig ,   ax   =   plt . subplots ()  ax . scatter ( x ,   y ,   s = area ,   c = colors ,   alpha = 0.6 )  ax . set_title ( 'Scatter plot of x-y pairs semi-focused in two regions' )  ax . set_xlabel ( 'x value' )  ax . set_ylabel ( 'y value' )  plt . show ()",
            "title": "Scatter Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.11-Plot-Annotations/",
            "text": "Plot annotations\n\n\nSometimes it is useful for problem solvers to annotate plots. Text can be included on a plot to indicate a point of interest or highlight a specific feature of a plot.\nThe code section below builds a simple line plot and applies three annotations (three arrows with text) on the plot. Matplotlib's \nax.annotate()\n method creates the annotations. Multiple keyword arguments can be passed to \nax.annotate()\n method to specify the annotation location and style the annotation.\n\n\nThe keyword argument to pay attention to in the next code section is \nxycoords=\n. Each of the three annotations has a different \nxycoords=\n keyword argument. The annotation can be located relative to the plot data, located relative to the axis, or relative to the figure window.\n\n\nIn the first annotation, \nxycoords='data'\n. This means the annotation is placed relative to the data. Since \nxy=(0, 0)\n, the annotation arrow points to the \n0,0\n data point.\n\n\nIn the second annotation, \nxycoords='axes fraction'\n. This means the second annotation is placed relative to the axis. Since \nxy=(0, 0.5)\n, the annotation arrow points all the way to the left edge of the x-axis and half way up the y-axis.\n\n\nIn the third annotation, \nxycoords='figure pixels'\n. This means the third annotation is placed relative to the figure window. Since \nxy=(20, 75)\n, the third annotation arrow points \n20\n pixels to the right and \n75\n pixels up from the bottom left corner of the figure window.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n \n5\n,\n \n0.01\n)\n\n\ny\n \n=\n \nx\n**\n2\n\n\n\n# Plot a line and add some simple annotations\n\n\nax\n.\nplot\n(\nx\n,\n \ny\n)\n\n\n\n# first annotation relative to the data\n\n\nax\n.\nannotate\n(\n'function minium \n\\n\n relative to data'\n,\n\n            \nxy\n=\n(\n0\n,\n \n0\n),\n\n            \nxycoords\n=\n'data'\n,\n\n            \nxytext\n=\n(\n2\n,\n \n3\n),\n\n            \narrowprops\n=\n\n                \ndict\n(\nfacecolor\n=\n'black'\n,\n \nshrink\n=\n0.05\n),\n\n                \nhorizontalalignment\n=\n'left'\n,\n\n                \nverticalalignment\n=\n'top'\n)\n\n\n\n# second annotation relative to the axis limits\n\n\nbbox_props\n \n=\n \ndict\n(\nboxstyle\n=\n\"round,pad=0.5\"\n,\n \nfc\n=\n\"w\"\n,\n \nec\n=\n\"k\"\n,\n \nlw\n=\n2\n)\n\n\n\nax\n.\nannotate\n(\n'half of range \n\\n\n relative to axis limits'\n,\n\n            \nxy\n=\n(\n0\n,\n \n0.5\n),\n\n            \nxycoords\n=\n'axes fraction'\n,\n\n            \nxytext\n=\n(\n0.2\n,\n \n0.5\n),\n\n            \nbbox\n=\nbbox_props\n,\n\n            \narrowprops\n=\n\n                \ndict\n(\nfacecolor\n=\n'black'\n,\n \nshrink\n=\n0.05\n),\n\n                \nhorizontalalignment\n=\n'left'\n,\n\n                \nverticalalignment\n=\n'center'\n)\n\n\n\n# third annotion relative to the figure window\n\n\nbbox_props\n \n=\n \ndict\n(\nboxstyle\n=\n\"larrow,pad=0.5\"\n,\n \nfc\n=\n\"w\"\n,\n \nec\n=\n\"k\"\n,\n \nlw\n=\n2\n)\n\n\n\nax\n.\nannotate\n(\n'outside the plot \n\\n\n relative to figure window'\n,\n\n            \nxy\n=\n(\n20\n,\n \n75\n),\n\n            \nxycoords\n=\n'figure pixels'\n,\n\n            \nhorizontalalignment\n=\n'left'\n,\n\n            \nverticalalignment\n=\n'top'\n,\n\n            \nbbox\n=\nbbox_props\n)\n\n\n\nax\n.\nset_xlim\n(\n-\n5\n,\n5\n)\n\n\nax\n.\nset_ylim\n(\n-\n1\n,\n10\n)\n\n\nax\n.\nset_title\n(\n'Parabolic Function with Text Notation'\n)\n\n\n\nplt\n.\nshow\n()",
            "title": "Plot annotations"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.11-Plot-Annotations/#plot-annotations",
            "text": "Sometimes it is useful for problem solvers to annotate plots. Text can be included on a plot to indicate a point of interest or highlight a specific feature of a plot.\nThe code section below builds a simple line plot and applies three annotations (three arrows with text) on the plot. Matplotlib's  ax.annotate()  method creates the annotations. Multiple keyword arguments can be passed to  ax.annotate()  method to specify the annotation location and style the annotation.  The keyword argument to pay attention to in the next code section is  xycoords= . Each of the three annotations has a different  xycoords=  keyword argument. The annotation can be located relative to the plot data, located relative to the axis, or relative to the figure window.  In the first annotation,  xycoords='data' . This means the annotation is placed relative to the data. Since  xy=(0, 0) , the annotation arrow points to the  0,0  data point.  In the second annotation,  xycoords='axes fraction' . This means the second annotation is placed relative to the axis. Since  xy=(0, 0.5) , the annotation arrow points all the way to the left edge of the x-axis and half way up the y-axis.  In the third annotation,  xycoords='figure pixels' . This means the third annotation is placed relative to the figure window. Since  xy=(20, 75) , the third annotation arrow points  20  pixels to the right and  75  pixels up from the bottom left corner of the figure window.    In\u00a0[1]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline fig ,   ax   =   plt . subplots ()  x   =   np . arange ( - 5 ,   5 ,   0.01 )  y   =   x ** 2  # Plot a line and add some simple annotations  ax . plot ( x ,   y )  # first annotation relative to the data  ax . annotate ( 'function minium  \\n  relative to data' , \n             xy = ( 0 ,   0 ), \n             xycoords = 'data' , \n             xytext = ( 2 ,   3 ), \n             arrowprops = \n                 dict ( facecolor = 'black' ,   shrink = 0.05 ), \n                 horizontalalignment = 'left' , \n                 verticalalignment = 'top' )  # second annotation relative to the axis limits  bbox_props   =   dict ( boxstyle = \"round,pad=0.5\" ,   fc = \"w\" ,   ec = \"k\" ,   lw = 2 )  ax . annotate ( 'half of range  \\n  relative to axis limits' , \n             xy = ( 0 ,   0.5 ), \n             xycoords = 'axes fraction' , \n             xytext = ( 0.2 ,   0.5 ), \n             bbox = bbox_props , \n             arrowprops = \n                 dict ( facecolor = 'black' ,   shrink = 0.05 ), \n                 horizontalalignment = 'left' , \n                 verticalalignment = 'center' )  # third annotion relative to the figure window  bbox_props   =   dict ( boxstyle = \"larrow,pad=0.5\" ,   fc = \"w\" ,   ec = \"k\" ,   lw = 2 )  ax . annotate ( 'outside the plot  \\n  relative to figure window' , \n             xy = ( 20 ,   75 ), \n             xycoords = 'figure pixels' , \n             horizontalalignment = 'left' , \n             verticalalignment = 'top' , \n             bbox = bbox_props )  ax . set_xlim ( - 5 , 5 )  ax . set_ylim ( - 1 , 10 )  ax . set_title ( 'Parabolic Function with Text Notation' )  plt . show ()",
            "title": "Plot annotations"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.12-Subplots/",
            "text": "Subplots\n\n\nSometimes it is useful for problem solvers to include a couple plots in the same figure window. This can be done in Matplotlib using \nsubplots\n. Matplotlib's \nplt.subplot()\n function can include two positional arguments for the number of rows of subplots in the figure and the number of columns of subplots in the figure. The general format is:\n\n\nfig, <ax objects> = plt.subplots(rows, cols)\n\n\n\n\nWhere \nrows\n and \ncols\n denote how the subplots are laid out. The \n<ax objects>\n needs to have dimensions that correspond to \nrows\n and \ncols\n.\n\n\nIf a 2 row by 2 column array of plots is created, the \n<ax object>\n must to be arrayed as shown below:\n\n\nfig, ( (ax1,ax2), (ax3,ax4) ) = plt.subplots(2,2)   \n\n\n\n\nIf a 2 row by 3 column array of plots is created, the \n<ax objects>\n must be arrayed to correspond to these dimensions:\n\n\nfig, ( (ax1,ax2,a3), (ax4,ax5,ax6) ) = plt.subplots(2, 3)   \n\n\n\n\nSubplots are useful if you want to show the same data on different scales. The plot of an exponential function looks different on a linear scale compare to a logarithmic scale. Matplotlib contains three plotting methods which scale the x and y-axis linearly or logarithmically. A table below summarizes these methods.\n\n\n\n\n\n\n\n\nMatplotlib method\n\n\naxis scaling\n\n\n\n\n\n\n\n\n\n\nax.plot()\n\n\nlinear x, linear y\n\n\n\n\n\n\nax.semilogy()\n\n\nlinear x, logarithmic y\n\n\n\n\n\n\nax.semilogx()\n\n\nlogarithmic x, linear y\n\n\n\n\n\n\nax.loglog()\n\n\nlogarithmic x, logarithmic y\n\n\n\n\n\n\n\n\nThe code section below builds a 2 row by 2 column array of subplots in one figure. The axes of each subplot is scaled in a different way. \n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\n# Data for plotting\n\n\nt\n \n=\n \nnp\n.\narange\n(\n0.01\n,\n \n20.0\n,\n \n0.01\n)\n\n\n# Create a figure with 2 rows and 2 cols of subplots\n\n\nfig\n,\n \n((\nax1\n,\n \nax2\n),\n \n(\nax3\n,\n \nax4\n))\n \n=\n \nplt\n.\nsubplots\n(\n2\n,\n \n2\n)\n\n\n# linear x and y axis\n\n\nax1\n.\nplot\n(\nt\n,\n \nnp\n.\nexp\n(\n-\nt\n \n/\n \n5.0\n))\n\n\nax1\n.\nset\n(\ntitle\n=\n'linear x and y'\n)\n\n\nax1\n.\ngrid\n()\n\n\n# log y axis\n\n\nax2\n.\nsemilogy\n(\nt\n,\n \nnp\n.\nexp\n(\n-\nt\n \n/\n \n5.0\n))\n\n\nax2\n.\nset\n(\ntitle\n=\n'semilogy'\n)\n\n\nax2\n.\ngrid\n()\n\n\n# log x axis\n\n\nax3\n.\nsemilogx\n(\nt\n,\n \nnp\n.\nexp\n(\n-\nt\n \n/\n \n5.0\n))\n\n\nax3\n.\nset\n(\ntitle\n=\n'semilogx'\n)\n\n\nax3\n.\ngrid\n()\n\n\n# log x and y axis\n\n\nax4\n.\nloglog\n(\nt\n,\n \n20\n \n*\n \nnp\n.\nexp\n(\n-\nt\n \n/\n \n5.0\n),\n \nbasex\n=\n2\n)\n\n\nax4\n.\nset\n(\ntitle\n=\n'loglog base 2 on x'\n)\n\n\nax4\n.\ngrid\n()\n\n\nfig\n.\ntight_layout\n()\n\n\nplt\n.\nshow\n()",
            "title": "Subplots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.12-Subplots/#subplots",
            "text": "Sometimes it is useful for problem solvers to include a couple plots in the same figure window. This can be done in Matplotlib using  subplots . Matplotlib's  plt.subplot()  function can include two positional arguments for the number of rows of subplots in the figure and the number of columns of subplots in the figure. The general format is:  fig, <ax objects> = plt.subplots(rows, cols)  Where  rows  and  cols  denote how the subplots are laid out. The  <ax objects>  needs to have dimensions that correspond to  rows  and  cols .  If a 2 row by 2 column array of plots is created, the  <ax object>  must to be arrayed as shown below:  fig, ( (ax1,ax2), (ax3,ax4) ) = plt.subplots(2,2)     If a 2 row by 3 column array of plots is created, the  <ax objects>  must be arrayed to correspond to these dimensions:  fig, ( (ax1,ax2,a3), (ax4,ax5,ax6) ) = plt.subplots(2, 3)     Subplots are useful if you want to show the same data on different scales. The plot of an exponential function looks different on a linear scale compare to a logarithmic scale. Matplotlib contains three plotting methods which scale the x and y-axis linearly or logarithmically. A table below summarizes these methods.     Matplotlib method  axis scaling      ax.plot()  linear x, linear y    ax.semilogy()  linear x, logarithmic y    ax.semilogx()  logarithmic x, linear y    ax.loglog()  logarithmic x, logarithmic y     The code section below builds a 2 row by 2 column array of subplots in one figure. The axes of each subplot is scaled in a different way.    In\u00a0[1]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  # if using a Jupyter notebook, include:  % matplotlib  inline  # Data for plotting  t   =   np . arange ( 0.01 ,   20.0 ,   0.01 )  # Create a figure with 2 rows and 2 cols of subplots  fig ,   (( ax1 ,   ax2 ),   ( ax3 ,   ax4 ))   =   plt . subplots ( 2 ,   2 )  # linear x and y axis  ax1 . plot ( t ,   np . exp ( - t   /   5.0 ))  ax1 . set ( title = 'linear x and y' )  ax1 . grid ()  # log y axis  ax2 . semilogy ( t ,   np . exp ( - t   /   5.0 ))  ax2 . set ( title = 'semilogy' )  ax2 . grid ()  # log x axis  ax3 . semilogx ( t ,   np . exp ( - t   /   5.0 ))  ax3 . set ( title = 'semilogx' )  ax3 . grid ()  # log x and y axis  ax4 . loglog ( t ,   20   *   np . exp ( - t   /   5.0 ),   basex = 2 )  ax4 . set ( title = 'loglog base 2 on x' )  ax4 . grid ()  fig . tight_layout ()  plt . show ()",
            "title": "Subplots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.13-Plot-Styles/",
            "text": "Plot Styles\n\n\nColors, font sizes, line thickness, all have default values in Matplotlib. In addition to the default style for these plot attributes, additional styles are available.\nTo use the default style, either don't specify a style at all or use the line \nplt.style.use('default')\n.  If you want to apply a different style to a plot use the line:\n\n\nplt.style.use('style')\n\n\n\n\nThe \n'style'\n is supplied to the method as a string, surrounded by quotes.\n\n\nThe code below builds a plot with \n'fivethirtyeight'\n style, a style similar to the plots on \nfivethirtyeight.com\n.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nplt\n.\nstyle\n.\nuse\n(\n'fivethirtyeight'\n)\n\n\nfor\n \nn\n \nin\n \nrange\n(\n-\n20\n,\n30\n,\n10\n):\n\n    \nax\n.\nplot\n(\nx\n,\n \nnp\n.\ncos\n(\nx\n)\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n)\n \n+\n \nn\n)\n\n\nax\n.\nset_title\n(\n\"'fivethirtyeight' style\"\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are many different styles available. You can list the available Matplotlib styles with the command:\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nfor\n \nstyle\n \nin\n \nplt\n.\nstyle\n.\navailable\n:\n\n    \nprint\n(\nstyle\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nseaborn-talk\nseaborn-bright\nseaborn-muted\nseaborn-dark\nseaborn-darkgrid\nseaborn-paper\nseaborn-white\nseaborn-pastel\nseaborn-colorblind\nSolarize_Light2\nseaborn\nfast\nseaborn-dark-palette\ntableau-colorblind10\nseaborn-notebook\nclassic\nseaborn-poster\nbmh\nseaborn-whitegrid\nseaborn-deep\ndark_background\n_classic_test\nfivethirtyeight\nggplot\nseaborn-ticks\ngrayscale\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code section below displays a couple of Matplotlib's available plot styles including the \n'default'\n, \n'seaborn'\n and the older Matplotlib \n'classic'\n style.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\ndef\n \npl\n(\nax\n,\nst\n):\n\n    \nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n)\n\n    \nfor\n \nn\n \nin\n \nrange\n(\n-\n20\n,\n30\n,\n10\n):\n\n        \nax\n.\nplot\n(\nx\n,\n \nnp\n.\ncos\n(\nx\n)\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n)\n \n+\n \nn\n)\n \n\n\ndef\n \nhis\n(\nax\n):\n\n    \nx\n \n=\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n)\n\n    \nax\n.\nhist\n(\nx\n)\n\n\ndef\n \nlb\n(\nax\n,\ns\n):\n\n    \nax\n.\ntext\n(\n0.2\n,\n0.5\n,\ns\n,\n \nfontsize\n=\n14\n)\n\n    \nax\n.\nxaxis\n.\nset_ticklabels\n([],[])\n\n    \nax\n.\nyaxis\n.\nset_ticklabels\n([],[])\n\n\ndef\n \nmake_fig\n(\nst\n):\n\n    \nwith\n \nplt\n.\nstyle\n.\ncontext\n(\nst\n):\n\n        \nfig\n,[\nax1\n,\nax2\n,\nax3\n]\n=\nplt\n.\nsubplots\n(\n1\n,\n3\n,\nfigsize\n=\n(\n9\n,\n1.5\n))\n\n        \nlb\n(\nax1\n,\nst\n)\n\n        \nhis\n(\nax2\n)\n\n        \npl\n(\nax3\n,\nst\n)\n\n\ns\n \n=\n \n[\n'default'\n,\n'fivethirtyeight'\n,\n'seaborn'\n,\n \n'Solarize_Light2'\n,\n'classic'\n]\n \n\n\nfor\n \nst\n \nin\n \ns\n:\n\n    \nmake_fig\n(\nst\n)\n\n\nplt\n.\nshow\n()",
            "title": "Plot Styles"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.13-Plot-Styles/#plot-styles",
            "text": "Colors, font sizes, line thickness, all have default values in Matplotlib. In addition to the default style for these plot attributes, additional styles are available.\nTo use the default style, either don't specify a style at all or use the line  plt.style.use('default') .  If you want to apply a different style to a plot use the line:  plt.style.use('style')  The  'style'  is supplied to the method as a string, surrounded by quotes.  The code below builds a plot with  'fivethirtyeight'  style, a style similar to the plots on  fivethirtyeight.com .   In\u00a0[1]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  x   =   np . linspace ( 0 ,   10 )  fig ,   ax   =   plt . subplots ()  plt . style . use ( 'fivethirtyeight' )  for   n   in   range ( - 20 , 30 , 10 ): \n     ax . plot ( x ,   np . cos ( x )   +   np . random . randn ( 50 )   +   n )  ax . set_title ( \"'fivethirtyeight' style\" )  plt . show ()                \nThere are many different styles available. You can list the available Matplotlib styles with the command:   In\u00a0[2]:  \n      for   style   in   plt . style . available : \n     print ( style )           seaborn-talk\nseaborn-bright\nseaborn-muted\nseaborn-dark\nseaborn-darkgrid\nseaborn-paper\nseaborn-white\nseaborn-pastel\nseaborn-colorblind\nSolarize_Light2\nseaborn\nfast\nseaborn-dark-palette\ntableau-colorblind10\nseaborn-notebook\nclassic\nseaborn-poster\nbmh\nseaborn-whitegrid\nseaborn-deep\ndark_background\n_classic_test\nfivethirtyeight\nggplot\nseaborn-ticks\ngrayscale      \nThe code section below displays a couple of Matplotlib's available plot styles including the  'default' ,  'seaborn'  and the older Matplotlib  'classic'  style.   In\u00a0[3]:  \n      def   pl ( ax , st ): \n     x   =   np . linspace ( 0 ,   10 ) \n     for   n   in   range ( - 20 , 30 , 10 ): \n         ax . plot ( x ,   np . cos ( x )   +   np . random . randn ( 50 )   +   n )    def   his ( ax ): \n     x   =   np . random . randn ( 50 ) \n     ax . hist ( x )  def   lb ( ax , s ): \n     ax . text ( 0.2 , 0.5 , s ,   fontsize = 14 ) \n     ax . xaxis . set_ticklabels ([],[]) \n     ax . yaxis . set_ticklabels ([],[])  def   make_fig ( st ): \n     with   plt . style . context ( st ): \n         fig ,[ ax1 , ax2 , ax3 ] = plt . subplots ( 1 , 3 , figsize = ( 9 , 1.5 )) \n         lb ( ax1 , st ) \n         his ( ax2 ) \n         pl ( ax3 , st )  s   =   [ 'default' , 'fivethirtyeight' , 'seaborn' ,   'Solarize_Light2' , 'classic' ]    for   st   in   s : \n     make_fig ( st )  plt . show ()",
            "title": "Plot Styles"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.14-Contour-Plots/",
            "text": "Contour Plots\n\n\nContour plots can be created with Matplotlib. In civil engineering a contour plot could show the topology of a build sight. In mechanical engineering a contour plot could show the stress gradient across part surface.\n\n\nMatplotlib's \nplt.contourf()\n method\n\n\nBuilding contour plots using Matplotlib entails using the \nax.contour()\n method. The basic \nax.contour()\n method call is below.\n\n\nax.contour(X, Y, Z)\n\n\n\n\nWhere \nX\n and \nY\n are 2D arrays of the x and y points, and Z is a 2D array of points that determines the \"height\" of the contour, which is represented by color in a 2D plot. The \nnp.meshgrid\n function is useful to create two 2D arrays from two 1D arrays.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n3.0\n,\n \n3.0\n,\n \n0.1\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n-\n3.0\n,\n \n3.0\n,\n \n0.1\n)\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\n \ny\n)\n\n\nZ\n \n=\n \nnp\n.\nsin\n(\nX\n)\n*\nnp\n.\ncos\n(\nY\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n(\nfigsize\n=\n(\n6\n,\n6\n))\n\n\nax\n.\ncontour\n(\nX\n,\nY\n,\nZ\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMatplotlib's \nplt.contourf()\n method\n\n\nMatplotlib's \nplt.contourf()\n method is similar to \nplt.contour()\n except that it will produce contour plots that are \"filled\". Instead of lines in a \nplt.contour()\n plot, shaded areas are produced by a \nplt.contourf()\n plot. The general method call for \nplt.contourf()\n is similar to \nplt.contour()\n.\n\n\nax.contourf(X, Y, Z)\n\n\n\n\nWhere \nX\n and \nY\n are 2D arrays of the x and y points, and Z is a 2D array of points that determines the color of the areas on the 2D plot. \n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n3.0\n,\n \n3.0\n,\n \n0.1\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n-\n3.0\n,\n \n3.0\n,\n \n0.1\n)\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\n \ny\n)\n\n\nZ\n \n=\n \nnp\n.\nsin\n(\nX\n)\n*\nnp\n.\ncos\n(\nY\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n(\nfigsize\n=\n(\n6\n,\n6\n))\n\n\nax\n.\ncontourf\n(\nX\n,\nY\n,\nZ\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColor bars on contour plots\n\n\nBecause colors represent a third dimension (like \"hight\") on a 2D plot, it is useful to have a scale to what each color means. A color scale is typically represented besides a plot. Color bars are added to Matplotlib contour plots using the \nfig.colorbar()\n method. Since the color bar is not part of the contour plot, the color bar needs to be applied to the figure object, often called \nfig\n. A contour plot needs to be passed into the \nfig.colorbar()\n method. Therefore, when you add a color bar to a figure, a plot object needs to be available. A plot object is the output of the \nax.contourf()\n method. Previously, the output of the \nax.contourf()\n method was not assigned to a variable. But to include a color bar on a contour plot, the plot object needs to be saved to a variable, so that the plot object can be passed to the \nfig.colorbar()\n method.\n\n\ncf = ax.contourf(X,Y,Z)\nfig.colorbar(cf, ax=ax)\n\n\n\n\nWhere \ncf\n is the plot object created by \nax1.contourf(X, Y, Z)\n. The axis object that contains the contour plot, \nax1\n is passed to the \nfig.colorbar()\n method along with the \ncf\n plot object.\n\n\nThe code section below creates a filled contour plot with a color scale placed beside the plot.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n3.0\n,\n \n3.0\n,\n \n0.1\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n-\n3.0\n,\n \n3.0\n,\n \n0.1\n)\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\n \ny\n)\n\n\nZ\n \n=\n \nnp\n.\nsin\n(\nX\n)\n*\nnp\n.\ncos\n(\nY\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n(\nfigsize\n=\n(\n6\n,\n6\n))\n\n\nax\n.\nset_aspect\n(\n'equal'\n)\n\n\ncf\n \n=\n \nax\n.\ncontourf\n(\nX\n,\nY\n,\nZ\n)\n\n\nfig\n.\ncolorbar\n(\ncf\n,\n \nax\n=\nax\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColor maps on contour plots\n\n\nThe default color scheme of Matplotlib contour and filled contour plots can be modified. A general way to modify the color scheme is to call Matplotlib's \nplt.get_cmap()\n function that outputs a color map object. There are many different colormaps available to apply to contour plots. A complete list is available in the Matplotlib documentation. The colormap object is then passed to the \nax.contourf()\n or \nax.contour()\n method as a keyword argument.\n\n\nmycmap = plt.get_cmap('gist_earth')\nax.contourf(X, Y, Z, cmap=mycmap)\n\n\n\n\nThe code section below produces two filled contour plots, contour plot has a different color map.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n3.0\n,\n \n3.0\n,\n \n0.1\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n-\n3.0\n,\n \n3.0\n,\n \n0.1\n)\n\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\n \ny\n)\n\n\n\nZ\n \n=\n \nnp\n.\nsin\n(\nX\n)\n*\nnp\n.\ncos\n(\nY\n)\n\n\n\nfig\n,\n \n(\nax1\n,\nax2\n)\n \n=\n \nplt\n.\nsubplots\n(\n1\n,\n2\n,\nfigsize\n=\n(\n12\n,\n6\n))\n\n\n\nmycmap1\n \n=\n \nplt\n.\nget_cmap\n(\n'gist_earth'\n)\n\n\nax1\n.\nset_aspect\n(\n'equal'\n)\n\n\nax1\n.\nset_title\n(\n'Colormap: gist_earth'\n)\n\n\ncf1\n \n=\n \nax1\n.\ncontourf\n(\nX\n,\nY\n,\nZ\n,\n \ncmap\n=\nmycmap1\n)\n\n\n\nfig\n.\ncolorbar\n(\ncf1\n,\n \nax\n=\nax1\n)\n\n\n\nmycmap2\n \n=\n \nplt\n.\nget_cmap\n(\n'gnuplot2'\n)\n\n\nax2\n.\nset_aspect\n(\n'equal'\n)\n\n\nax2\n.\nset_title\n(\n'Colormap: gnuplot2'\n)\n\n\ncf2\n \n=\n \nax2\n.\ncontourf\n(\nX\n,\nY\n,\nZ\n,\n \ncmap\n=\nmycmap2\n)\n\n\n\nfig\n.\ncolorbar\n(\ncf2\n,\n \nax\n=\nax2\n)\n\n\n\nplt\n.\nshow\n()",
            "title": "Contour Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.14-Contour-Plots/#contour-plots",
            "text": "Contour plots can be created with Matplotlib. In civil engineering a contour plot could show the topology of a build sight. In mechanical engineering a contour plot could show the stress gradient across part surface.",
            "title": "Contour Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.14-Contour-Plots/#matplotlibs-pltcontourf-method",
            "text": "Building contour plots using Matplotlib entails using the  ax.contour()  method. The basic  ax.contour()  method call is below.  ax.contour(X, Y, Z)  Where  X  and  Y  are 2D arrays of the x and y points, and Z is a 2D array of points that determines the \"height\" of the contour, which is represented by color in a 2D plot. The  np.meshgrid  function is useful to create two 2D arrays from two 1D arrays.   In\u00a0[1]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  x   =   np . arange ( - 3.0 ,   3.0 ,   0.1 )  y   =   np . arange ( - 3.0 ,   3.0 ,   0.1 )  X ,   Y   =   np . meshgrid ( x ,   y )  Z   =   np . sin ( X ) * np . cos ( Y )  fig ,   ax   =   plt . subplots ( figsize = ( 6 , 6 ))  ax . contour ( X , Y , Z )  plt . show ()",
            "title": "Matplotlib's plt.contourf() method"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.14-Contour-Plots/#matplotlibs-pltcontourf-method_1",
            "text": "Matplotlib's  plt.contourf()  method is similar to  plt.contour()  except that it will produce contour plots that are \"filled\". Instead of lines in a  plt.contour()  plot, shaded areas are produced by a  plt.contourf()  plot. The general method call for  plt.contourf()  is similar to  plt.contour() .  ax.contourf(X, Y, Z)  Where  X  and  Y  are 2D arrays of the x and y points, and Z is a 2D array of points that determines the color of the areas on the 2D plot.    In\u00a0[2]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  x   =   np . arange ( - 3.0 ,   3.0 ,   0.1 )  y   =   np . arange ( - 3.0 ,   3.0 ,   0.1 )  X ,   Y   =   np . meshgrid ( x ,   y )  Z   =   np . sin ( X ) * np . cos ( Y )  fig ,   ax   =   plt . subplots ( figsize = ( 6 , 6 ))  ax . contourf ( X , Y , Z )  plt . show ()",
            "title": "Matplotlib's plt.contourf() method"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.14-Contour-Plots/#color-bars-on-contour-plots",
            "text": "Because colors represent a third dimension (like \"hight\") on a 2D plot, it is useful to have a scale to what each color means. A color scale is typically represented besides a plot. Color bars are added to Matplotlib contour plots using the  fig.colorbar()  method. Since the color bar is not part of the contour plot, the color bar needs to be applied to the figure object, often called  fig . A contour plot needs to be passed into the  fig.colorbar()  method. Therefore, when you add a color bar to a figure, a plot object needs to be available. A plot object is the output of the  ax.contourf()  method. Previously, the output of the  ax.contourf()  method was not assigned to a variable. But to include a color bar on a contour plot, the plot object needs to be saved to a variable, so that the plot object can be passed to the  fig.colorbar()  method.  cf = ax.contourf(X,Y,Z)\nfig.colorbar(cf, ax=ax)  Where  cf  is the plot object created by  ax1.contourf(X, Y, Z) . The axis object that contains the contour plot,  ax1  is passed to the  fig.colorbar()  method along with the  cf  plot object.  The code section below creates a filled contour plot with a color scale placed beside the plot.   In\u00a0[3]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  x   =   np . arange ( - 3.0 ,   3.0 ,   0.1 )  y   =   np . arange ( - 3.0 ,   3.0 ,   0.1 )  X ,   Y   =   np . meshgrid ( x ,   y )  Z   =   np . sin ( X ) * np . cos ( Y )  fig ,   ax   =   plt . subplots ( figsize = ( 6 , 6 ))  ax . set_aspect ( 'equal' )  cf   =   ax . contourf ( X , Y , Z )  fig . colorbar ( cf ,   ax = ax )  plt . show ()",
            "title": "Color bars on contour plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.14-Contour-Plots/#color-maps-on-contour-plots",
            "text": "The default color scheme of Matplotlib contour and filled contour plots can be modified. A general way to modify the color scheme is to call Matplotlib's  plt.get_cmap()  function that outputs a color map object. There are many different colormaps available to apply to contour plots. A complete list is available in the Matplotlib documentation. The colormap object is then passed to the  ax.contourf()  or  ax.contour()  method as a keyword argument.  mycmap = plt.get_cmap('gist_earth')\nax.contourf(X, Y, Z, cmap=mycmap)  The code section below produces two filled contour plots, contour plot has a different color map.    In\u00a0[4]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  # if using a Jupyter notebook, include:  % matplotlib  inline x   =   np . arange ( - 3.0 ,   3.0 ,   0.1 )  y   =   np . arange ( - 3.0 ,   3.0 ,   0.1 )  X ,   Y   =   np . meshgrid ( x ,   y )  Z   =   np . sin ( X ) * np . cos ( Y )  fig ,   ( ax1 , ax2 )   =   plt . subplots ( 1 , 2 , figsize = ( 12 , 6 ))  mycmap1   =   plt . get_cmap ( 'gist_earth' )  ax1 . set_aspect ( 'equal' )  ax1 . set_title ( 'Colormap: gist_earth' )  cf1   =   ax1 . contourf ( X , Y , Z ,   cmap = mycmap1 )  fig . colorbar ( cf1 ,   ax = ax1 )  mycmap2   =   plt . get_cmap ( 'gnuplot2' )  ax2 . set_aspect ( 'equal' )  ax2 . set_title ( 'Colormap: gnuplot2' )  cf2   =   ax2 . contourf ( X , Y , Z ,   cmap = mycmap2 )  fig . colorbar ( cf2 ,   ax = ax2 )  plt . show ()",
            "title": "Color maps on contour plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.15-Quiver-and-Stream-Plots/",
            "text": "Quiver and Stream Plots\n\n\nIn this section, you will learn how to build quiver and stream plots using Matplotlib.\n\n\nQuiver Plots\n\n\nA quiver plot is a type of 2D plot that shows vector lines as arrows. Quiver plots are useful in electrical engineering to visualize electrical potential and useful in mechanical engineering to show stress gradients.\n\n\nQuiver plot with one arrow\n\n\nLet's buid a simple quiver plot that contains one arrow to see how matplotlib's \nax.quiver()\n method works. The \nax.quiver()\n method takes four positional arguments: \n\n\nax.quiver(x_pos, y_pos, x_direct, y_direct)\n\n\n\n\nWhere \nx_pos\n and \ny_pos\n are the arrow starting positions and \nx_direct\n, \ny_direct\n are the arrow directions.\n\n\nOur first plot contains one quiver arrow at the starting point \nx_pos = 0\n, \ny_pos = 0\n. The quiver arrow's direction is pointing up and to the right \nx_direct = 1\n, \ny_direct = 1\n.\n\n\nThe following code section builds a quiver plot that contains one arrow.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nx_pos\n \n=\n \n0\n\n\ny_pos\n \n=\n \n0\n\n\nx_direct\n \n=\n \n1\n\n\ny_direct\n \n=\n \n1\n\n\nax\n.\nquiver\n(\nx_pos\n,\n \ny_pos\n,\n \nx_direct\n,\n \ny_direct\n)\n\n\nax\n.\nset_title\n(\n'Quiver plot with one arrow'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe quiver plot contains one arrow. The arrow starts at point 0, 0 and ends at point 1, 1.\n\n\nQuiver plot with two arrows\n\n\nNow let's add a second arrow to the quiver plot by passing in two starting points and two arrow directions. \n\n\nWe'll keep our original arrow starting position at the origin \n0,0\n and pointing up and to the right (in the \n1,1\n direction). We'll define a second arrow with a starting position of \n-0.5,0.5\n which points straight down (in the \n0,-1\n direction).\n\n\nAn additional keyword argument to add the the \nax.quiver()\n method is \nscale=5\n. Including \nscale=5\n scales the arrow lengths so the arrows look longer and show up better on the quiver plot. \n\n\nTo see the start and end of both arrows, we'll  set the axis limits between \n-1.5\n and \n1.5\n using the \nax.axis()\n method and pass in a list of axis limits in the form \n[xmin, xmax, ymin, ymax]\n.\n\nWe can see two arrows. One arrow points to the upper right and the other arrow points straight down.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nx_pos\n \n=\n \n[\n0\n,\n \n0\n]\n\n\ny_pos\n \n=\n \n[\n0\n,\n \n0\n]\n\n\nx_direct\n \n=\n \n[\n1\n,\n \n0\n]\n\n\ny_direct\n \n=\n \n[\n1\n,\n \n-\n1\n]\n\n\nax\n.\nquiver\n(\nx_pos\n,\ny_pos\n,\nx_direct\n,\ny_direct\n,\n\n         \nscale\n=\n5\n)\n\n\nax\n.\naxis\n([\n-\n1.5\n,\n \n1.5\n,\n \n-\n1.5\n,\n \n1.5\n])\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuiver plot using a meshgrid\n\n\nA quiver plot with two arrows are great, but it is tedious and repetitive to add quiver plot arrows one by one. To create a complete 2D surface of arrows, we'll utilize NumPy's \nmeshgrid()\n function. \n\n\nFirst, we need to build a set of arrays that denote the x and y starting positions of each quiver arrow on the plot. The quiver arrow starting position arrays will be called \nX\n and \nY\n.\n\n\nWe can use the x, y arrow starting \npositions\n to define the x and y components of each quiver arrow \ndirection\n. We will call the quiver arrow direction arrays \nu\n and \nv\n. For this plot, we will define the quiver arrow direction based upon the quiver arrow starting point using the equations below.\n\n\n\n\n x_{direction} = cos(x_{starting \\ point}) \n\n\n x_{direction} = cos(x_{starting \\ point}) \n\n\n\n\n\n\n y_{direction} = sin(y_{starting \\ point}) \n\n\n y_{direction} = sin(y_{starting \\ point}) \n\n\n\n\nThe code section below builds the \nX\n and \nY\n position arrays using NumPy's \nnp.meshgrid()\n function.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n2.2\n,\n0.2\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n0\n,\n2.2\n,\n0.2\n)\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\n \ny\n)\n\n\nu\n \n=\n \nnp\n.\ncos\n(\nX\n)\nY\n\n\nv\n \n=\n \nnp\n.\nsin\n(\ny\n)\nY\n\n\n\n\n\n\n\n\n\n\n\nNext, we can build the quiver plot using Matplotlib's \nax.quiver()\n method. The \nax.quiver()\n method accepts four positional arguments:\n\n\nax.quiver(x_pos, y_pos, x_direct, y_direct)\n\n\n\n\nIn this quiver plot, \nx_pos\n and \ny_pos\n are 2D arrays which contain the starting positions of the arrows and \nx_direct\n, \ny_direct\n are 2D arrays which contain the arrow directions.\n\n\nThe commands \nax.xaxis.set_ticks([])\n and \nax.yaxis.set_ticks([])\n removes the tick marks from the axis and \nax.set_aspect('equal')\n sets the aspect ratio of the plot to 1:1.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n(\nfigsize\n=\n(\n7\n,\n7\n))\n\n\nax\n.\nquiver\n(\nX\n,\nY\n,\nu\n,\nv\n)\n\n\nax\n.\nxaxis\n.\nset_ticks\n([])\n\n\nax\n.\nyaxis\n.\nset_ticks\n([])\n\n\nax\n.\naxis\n([\n-\n0.2\n,\n \n2.3\n,\n \n-\n0.2\n,\n \n2.3\n])\n\n\nax\n.\nset_aspect\n(\n'equal'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow let's build another quiver plot where the \n\\hat{i}\n\\hat{i}\n and \n\\hat{j}\n\\hat{j}\n components (the direction) of the arrows, \n\\vec{F}\n\\vec{F}\n are dependent on the arrow starting point \nx,y\nx,y\n according to the function:\n\n\n\n\n \\vec{F} = \\frac{x}{5} \\ \\hat{i} - \\frac{y}{5} \\ \\hat{j} \n\n\n \\vec{F} = \\frac{x}{5} \\ \\hat{i} - \\frac{y}{5} \\ \\hat{j} \n\n\n\n\nAgain, we will use NumPy's \nnp.meshgrid()\n function to build the arrow starting position arrays, then apply our function  \n\\vec{F}\n\\vec{F}\n to the \nX\n and \nY\n arrow starting point arrays.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n1\n,\n1\n,\n0.1\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n-\n1\n,\n1\n,\n0.1\n)\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\n \ny\n)\n\n\nu\n \n=\n \nnp\n.\ncos\n(\nX\n)\nY\n\n\nv\n \n=\n \nnp\n.\nsin\n(\nY\n)\nY\n\n\nX\n,\nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\ny\n)\n\n\nu\n \n=\n \nX\n/\n5\n\n\nv\n \n=\n \n-\nY\n/\n5\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n(\nfigsize\n=\n(\n9\n,\n9\n))\n\n\nax\n.\nquiver\n(\nX\n,\nY\n,\nu\n,\nv\n)\n\n\nax\n.\nxaxis\n.\nset_ticks\n([])\n\n\nax\n.\nyaxis\n.\nset_ticks\n([])\n\n\nax\n.\nset_aspect\n(\n'equal'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuiver plot containing a gradient\n\n\nNext let's build a quiver plot that shows the gradient function. The gradient function has the form:\n\n\n\n\n z = xe^{-x^2-y^2} \n\n\n z = xe^{-x^2-y^2} \n\n\n\n\nWe can use NumPy's \nnp.gradient()\n function to apply the gradient function to every arrow's x, y starting position.\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n2\n,\n2.2\n,\n0.2\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n-\n2\n,\n2.2\n,\n0.2\n)\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\n \ny\n)\n\n\nz\n \n=\n \nX\n*\nnp\n.\nexp\n(\n-\nX\n2\n \n-\nY\n2\n)\n\n\ndx\n,\n \ndy\n \n=\n \nnp\n.\ngradient\n(\nz\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n(\nfigsize\n=\n(\n9\n,\n9\n))\n\n\nax\n.\nquiver\n(\nX\n,\nY\n,\ndx\n,\ndy\n)\n\n\nax\n.\nxaxis\n.\nset_ticks\n([])\n\n\nax\n.\nyaxis\n.\nset_ticks\n([])\n\n\nax\n.\nset_aspect\n(\n'equal'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuiver plot with four vortices\n\n\nNow let's build a quiver plot that contains four vortices. The function \n\\vec{F}\n\\vec{F}\n which describes the 2D field that has four vortices is shown below.\n\n\n\n\n \\vec{F} = sin(x)cos(y) \\ \\hat{i} -cos(x)sin(y) \\ \\hat{j} \n\n\n \\vec{F} = sin(x)cos(y) \\ \\hat{i} -cos(x)sin(y) \\ \\hat{j} \n\n\n\n\nThe code section below builds a quiver plot with four vortices.\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n2\nnp\n.\npi\n+\n2\nnp\n.\npi\n/\n20\n,\n2\nnp\n.\npi\n/\n20\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n0\n,\n2\nnp\n.\npi\n+\n2\nnp\n.\npi\n/\n20\n,\n2\nnp\n.\npi\n/\n20\n)\n\n\nX\n,\nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\ny\n)\n\n\nu\n \n=\n \nnp\n.\nsin\n(\nX\n)\nnp\n.\ncos\n(\nY\n)\n\n\nv\n \n=\n \n-\nnp\n.\ncos\n(\nX\n)\nnp\n.\nsin\n(\nY\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n(\nfigsize\n=\n(\n9\n,\n9\n))\n\n\nax\n.\nquiver\n(\nX\n,\nY\n,\nu\n,\nv\n)\n\n\nax\n.\nxaxis\n.\nset_ticks\n([])\n\n\nax\n.\nyaxis\n.\nset_ticks\n([])\n\n\nax\n.\naxis\n([\n0\n,\n2\nnp\n.\npi\n,\n0\n,\n2\nnp\n.\npi\n])\n\n\nax\n.\nset_aspect\n(\n'equal'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuiver plots with color\n\n\nFinally, let's add some color to the quiver plots. The \nax.quiver()\n method has an optional fifth positional argument that specifies the quiver arrow color. The quiver arrow color argument needs to have the same dimensions as the position and direction arrays.\n\n\nax.quiver(x_pos, y_pos, x_direct, y_direct, color)\n\n\n\n\nUsing Matplotlib subplots, we can build a figure which contains three quiver plots. Each quiver plot will be in color.\n\n\nThe code section below builds a figure with three subplots. Each subplot is a colored quiver plot.\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n%\nmatplotlib\n inline\n\n\nfig\n,\n \n(\nax1\n,\nax2\n,\nax3\n)\n \n=\n \nplt\n.\nsubplots\n(\n1\n,\n3\n)\n\n\n# first subplot\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n2.2\n,\n0.2\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n0\n,\n2.2\n,\n0.2\n)\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\n \ny\n)\n\n\nu\n \n=\n \nnp\n.\ncos\n(\nX\n)\nY\n\n\nv\n \n=\n \nnp\n.\nsin\n(\ny\n)\nY\n\n\nn\n \n=\n \n-\n2\n\n\ncolor\n \n=\n \nnp\n.\nsqrt\n(((\nv\n-\nn\n)\n/\n2\n)\n2\n \n+\n \n((\nu\n-\nn\n)\n/\n2\n)\n2\n)\n\n\nax1\n.\nquiver\n(\nX\n,\nY\n,\nu\n,\nv\n,\ncolor\n,\n \nalpha\n=\n0.8\n)\n\n\nax1\n.\nxaxis\n.\nset_ticks\n([])\n\n\nax1\n.\nyaxis\n.\nset_ticks\n([])\n\n\nax1\n.\naxis\n([\n-\n0.2\n,\n \n2.3\n,\n \n-\n0.2\n,\n \n2.3\n])\n\n\nax1\n.\nset_aspect\n(\n'equal'\n)\n\n\n# second subplot\n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n2\n,\n2.2\n,\n0.2\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n-\n2\n,\n2.2\n,\n0.2\n)\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\n \ny\n)\n\n\nz\n \n=\n \nX\n*\nnp\n.\nexp\n(\n-\nX\n2\n \n-\nY\n2\n)\n\n\ndx\n,\n \ndy\n \n=\n \nnp\n.\ngradient\n(\nz\n)\n\n\nn\n \n=\n \n-\n2\n\n\ncolor\n \n=\n \nnp\n.\nsqrt\n(((\ndx\n-\nn\n)\n/\n2\n)\n2\n \n+\n \n((\ndy\n-\nn\n)\n/\n2\n)\n2\n)\n \n\n\nax2\n.\nquiver\n(\nX\n,\nY\n,\ndx\n,\ndy\n,\ncolor\n)\n\n\nax2\n.\nxaxis\n.\nset_ticks\n([])\n\n\nax2\n.\nyaxis\n.\nset_ticks\n([])\n\n\nax2\n.\nset_aspect\n(\n'equal'\n)\n\n\n# third subplot\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n2\nnp\n.\npi\n+\n2\nnp\n.\npi\n/\n20\n,\n2\nnp\n.\npi\n/\n20\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n0\n,\n2\nnp\n.\npi\n+\n2\nnp\n.\npi\n/\n20\n,\n2\nnp\n.\npi\n/\n20\n)\n\n\nX\n,\nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\ny\n)\n\n\nu\n \n=\n \nnp\n.\nsin\n(\nX\n)\nnp\n.\ncos\n(\nY\n)\n\n\nv\n \n=\n \n-\nnp\n.\ncos\n(\nX\n)\nnp\n.\nsin\n(\nY\n)\n\n\nn\n \n=\n \n-\n1\n\n\ncolor\n \n=\n \nnp\n.\nsqrt\n(((\ndx\n-\nn\n)\n/\n2\n)\n2\n \n+\n \n((\ndy\n-\nn\n)\n/\n2\n)\n2\n)\n\n\nax3\n.\nquiver\n(\nX\n,\nY\n,\nu\n,\nv\n,\ncolor\n)\n\n\nax3\n.\nxaxis\n.\nset_ticks\n([])\n\n\nax3\n.\nyaxis\n.\nset_ticks\n([])\n\n\nax3\n.\naxis\n([\n0\n,\n2\nnp\n.\npi\n,\n0\n,\n2\nnp\n.\npi\n])\n\n\nax3\n.\nset_aspect\n(\n'equal'\n)\n\n\n# save and show the figure\n\n\nplt\n.\ntight_layout\n()\n\n\nfig\n.\nsavefig\n(\n'3_quiver_plots.png'\n,\n \ndpi\n=\n300\n,\n \nbbox_inches\n=\n'tight'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStream Plots\n\n\nA stream plot is a type of 2D plot used to show fluid flow and 2D field gradiants. \n\n\nThe basic method to build a stream plot in Matplotlib is:\n\n\n```python\nax.streamplot(x_grid,y_grid,x_vec,y_vec, density=spacing)\n````\n\n\nWhere \nx_grid\n and \ny_grid\n are arrays of x,y points. The arrays \nx_vec\n and \ny_vec\n denote the stream velocity at each point on the grid. The keyword argument \ndensity=spacing\n specifies how close the streamlines are drawn together.\n\n\nA simple stream plot\n\n\nLet's start with a stream plot that contains stream lines on a 10 x 10 grid.  All the stream lines on the plot are parallel and point to the right.\n\n\nThe following code section builds a stream plot that contains horizontal parallel lines pointing to the right.\n\n\n\n\n\nIn\u00a0[9]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n10\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n0\n,\n10\n)\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\ny\n)\n\n\nu\n \n=\n \nnp\n.\nones\n((\n10\n,\n10\n))\n \n# x-component to the right\n\n\nv\n \n=\n \nnp\n.\nzeros\n((\n10\n,\n10\n))\n \n# y-component zero\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nstreamplot\n(\nX\n,\nY\n,\nu\n,\nv\n,\n \ndensity\n \n=\n \n0.5\n)\n\n\nax\n.\nset_title\n(\n'Stream Plot of Parallel Lines'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe plot contains parallel streamlines all pointing to the right.\n\n\nStream plot of a field\n\n\nWe can build a stream plot which shows field lines based on a defined 2D vector field.\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n2.2\n,\n0.1\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n0\n,\n2.2\n,\n0.1\n)\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\n \ny\n)\n\n\nu\n \n=\n \nnp\n.\ncos\n(\nX\n)\nY\n\n\nv\n \n=\n \nnp\n.\nsin\n(\ny\n)\nY\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nstreamplot\n(\nX\n,\nY\n,\nu\n,\nv\n,\n \ndensity\n \n=\n \n1\n)\n\n\nax\n.\naxis\n([\n0.5\n,\n2.1\n,\n0\n,\n2\n])\n\n\nax\n.\nxaxis\n.\nset_ticks\n([])\n\n\nax\n.\nyaxis\n.\nset_ticks\n([])\n\n\nax\n.\nset_title\n(\n'Stream Plot of Field Lines'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStream plot of two point charges\n\n\nFinally, we will build a stream plot to demonstrate the electric field due to two point charges.  The electric field at any point on a 2D surface depends on the position and distance relative to the two point charges.\n\n\n\n\n\nIn\u00a0[11]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n4\n,\n4\n,\n0.2\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n-\n4\n,\n4\n,\n0.2\n)\n\n\nX\n,\nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\ny\n)\n\n\nEx\n \n=\n \n(\nX\n \n+\n \n1\n)\n/\n((\nX\n+\n1\n)\n2\n \n+\n \nY\n2\n)\n \n-\n \n(\nX\n \n-\n \n1\n)\n/\n((\nX\n-\n1\n)\n2\n \n+\n \nY\n2\n)\n\n\nEy\n \n=\n \nY\n/\n((\nX\n+\n1\n)\n2\n \n+\n \nY\n2\n)\n \n-\n \nY\n/\n((\nX\n-\n1\n)\n2\n \n+\n \nY\n2\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n(\nfigsize\n=\n(\n6\n,\n6\n))\n\n\nax\n.\nstreamplot\n(\nX\n,\nY\n,\nEx\n,\nEy\n)\n\n\nax\n.\nset_aspect\n(\n'equal'\n)\n\n\nax\n.\nplot\n(\n-\n1\n,\n0\n,\n'-or'\n)\n\n\nax\n.\nplot\n(\n1\n,\n0\n,\n'-ob'\n)\n\n\nax\n.\nset_title\n(\n'Stream Plot of Two Point Charges'\n)\n\n\nplt\n.\nshow\n()",
            "title": "Quiver and Stream Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.15-Quiver-and-Stream-Plots/#quiver-and-stream-plots",
            "text": "In this section, you will learn how to build quiver and stream plots using Matplotlib.",
            "title": "Quiver and Stream Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.15-Quiver-and-Stream-Plots/#quiver-plots",
            "text": "A quiver plot is a type of 2D plot that shows vector lines as arrows. Quiver plots are useful in electrical engineering to visualize electrical potential and useful in mechanical engineering to show stress gradients.",
            "title": "Quiver Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.15-Quiver-and-Stream-Plots/#quiver-plot-with-one-arrow",
            "text": "Let's buid a simple quiver plot that contains one arrow to see how matplotlib's  ax.quiver()  method works. The  ax.quiver()  method takes four positional arguments:   ax.quiver(x_pos, y_pos, x_direct, y_direct)  Where  x_pos  and  y_pos  are the arrow starting positions and  x_direct ,  y_direct  are the arrow directions.  Our first plot contains one quiver arrow at the starting point  x_pos = 0 ,  y_pos = 0 . The quiver arrow's direction is pointing up and to the right  x_direct = 1 ,  y_direct = 1 .  The following code section builds a quiver plot that contains one arrow.   In\u00a0[1]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  fig ,   ax   =   plt . subplots ()  x_pos   =   0  y_pos   =   0  x_direct   =   1  y_direct   =   1  ax . quiver ( x_pos ,   y_pos ,   x_direct ,   y_direct )  ax . set_title ( 'Quiver plot with one arrow' )  plt . show ()                \nThe quiver plot contains one arrow. The arrow starts at point 0, 0 and ends at point 1, 1.",
            "title": "Quiver plot with one arrow"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.15-Quiver-and-Stream-Plots/#quiver-plot-with-two-arrows",
            "text": "Now let's add a second arrow to the quiver plot by passing in two starting points and two arrow directions.   We'll keep our original arrow starting position at the origin  0,0  and pointing up and to the right (in the  1,1  direction). We'll define a second arrow with a starting position of  -0.5,0.5  which points straight down (in the  0,-1  direction).  An additional keyword argument to add the the  ax.quiver()  method is  scale=5 . Including  scale=5  scales the arrow lengths so the arrows look longer and show up better on the quiver plot.   To see the start and end of both arrows, we'll  set the axis limits between  -1.5  and  1.5  using the  ax.axis()  method and pass in a list of axis limits in the form  [xmin, xmax, ymin, ymax] . \nWe can see two arrows. One arrow points to the upper right and the other arrow points straight down.   In\u00a0[2]:  \n      fig ,   ax   =   plt . subplots ()  x_pos   =   [ 0 ,   0 ]  y_pos   =   [ 0 ,   0 ]  x_direct   =   [ 1 ,   0 ]  y_direct   =   [ 1 ,   - 1 ]  ax . quiver ( x_pos , y_pos , x_direct , y_direct , \n          scale = 5 )  ax . axis ([ - 1.5 ,   1.5 ,   - 1.5 ,   1.5 ])  plt . show ()",
            "title": "Quiver plot with two arrows"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.15-Quiver-and-Stream-Plots/#quiver-plot-using-a-meshgrid",
            "text": "A quiver plot with two arrows are great, but it is tedious and repetitive to add quiver plot arrows one by one. To create a complete 2D surface of arrows, we'll utilize NumPy's  meshgrid()  function.   First, we need to build a set of arrays that denote the x and y starting positions of each quiver arrow on the plot. The quiver arrow starting position arrays will be called  X  and  Y .  We can use the x, y arrow starting  positions  to define the x and y components of each quiver arrow  direction . We will call the quiver arrow direction arrays  u  and  v . For this plot, we will define the quiver arrow direction based upon the quiver arrow starting point using the equations below.    x_{direction} = cos(x_{starting \\ point})    x_{direction} = cos(x_{starting \\ point})      y_{direction} = sin(y_{starting \\ point})    y_{direction} = sin(y_{starting \\ point})    The code section below builds the  X  and  Y  position arrays using NumPy's  np.meshgrid()  function.   In\u00a0[3]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  x   =   np . arange ( 0 , 2.2 , 0.2 )  y   =   np . arange ( 0 , 2.2 , 0.2 )  X ,   Y   =   np . meshgrid ( x ,   y )  u   =   np . cos ( X ) Y  v   =   np . sin ( y ) Y      \nNext, we can build the quiver plot using Matplotlib's  ax.quiver()  method. The  ax.quiver()  method accepts four positional arguments:  ax.quiver(x_pos, y_pos, x_direct, y_direct)  In this quiver plot,  x_pos  and  y_pos  are 2D arrays which contain the starting positions of the arrows and  x_direct ,  y_direct  are 2D arrays which contain the arrow directions.  The commands  ax.xaxis.set_ticks([])  and  ax.yaxis.set_ticks([])  removes the tick marks from the axis and  ax.set_aspect('equal')  sets the aspect ratio of the plot to 1:1.   In\u00a0[4]:  \n      fig ,   ax   =   plt . subplots ( figsize = ( 7 , 7 ))  ax . quiver ( X , Y , u , v )  ax . xaxis . set_ticks ([])  ax . yaxis . set_ticks ([])  ax . axis ([ - 0.2 ,   2.3 ,   - 0.2 ,   2.3 ])  ax . set_aspect ( 'equal' )  plt . show ()                \nNow let's build another quiver plot where the  \\hat{i} \\hat{i}  and  \\hat{j} \\hat{j}  components (the direction) of the arrows,  \\vec{F} \\vec{F}  are dependent on the arrow starting point  x,y x,y  according to the function:    \\vec{F} = \\frac{x}{5} \\ \\hat{i} - \\frac{y}{5} \\ \\hat{j}    \\vec{F} = \\frac{x}{5} \\ \\hat{i} - \\frac{y}{5} \\ \\hat{j}    Again, we will use NumPy's  np.meshgrid()  function to build the arrow starting position arrays, then apply our function   \\vec{F} \\vec{F}  to the  X  and  Y  arrow starting point arrays.   In\u00a0[5]:  \n      x   =   np . arange ( - 1 , 1 , 0.1 )  y   =   np . arange ( - 1 , 1 , 0.1 )  X ,   Y   =   np . meshgrid ( x ,   y )  u   =   np . cos ( X ) Y  v   =   np . sin ( Y ) Y  X , Y   =   np . meshgrid ( x , y )  u   =   X / 5  v   =   - Y / 5  fig ,   ax   =   plt . subplots ( figsize = ( 9 , 9 ))  ax . quiver ( X , Y , u , v )  ax . xaxis . set_ticks ([])  ax . yaxis . set_ticks ([])  ax . set_aspect ( 'equal' )  plt . show ()",
            "title": "Quiver plot using a meshgrid"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.15-Quiver-and-Stream-Plots/#quiver-plot-containing-a-gradient",
            "text": "Next let's build a quiver plot that shows the gradient function. The gradient function has the form:    z = xe^{-x^2-y^2}    z = xe^{-x^2-y^2}    We can use NumPy's  np.gradient()  function to apply the gradient function to every arrow's x, y starting position.   In\u00a0[6]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  x   =   np . arange ( - 2 , 2.2 , 0.2 )  y   =   np . arange ( - 2 , 2.2 , 0.2 )  X ,   Y   =   np . meshgrid ( x ,   y )  z   =   X * np . exp ( - X 2   - Y 2 )  dx ,   dy   =   np . gradient ( z )  fig ,   ax   =   plt . subplots ( figsize = ( 9 , 9 ))  ax . quiver ( X , Y , dx , dy )  ax . xaxis . set_ticks ([])  ax . yaxis . set_ticks ([])  ax . set_aspect ( 'equal' )  plt . show ()",
            "title": "Quiver plot containing a gradient"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.15-Quiver-and-Stream-Plots/#quiver-plot-with-four-vortices",
            "text": "Now let's build a quiver plot that contains four vortices. The function  \\vec{F} \\vec{F}  which describes the 2D field that has four vortices is shown below.    \\vec{F} = sin(x)cos(y) \\ \\hat{i} -cos(x)sin(y) \\ \\hat{j}    \\vec{F} = sin(x)cos(y) \\ \\hat{i} -cos(x)sin(y) \\ \\hat{j}    The code section below builds a quiver plot with four vortices.   In\u00a0[7]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  x   =   np . arange ( 0 , 2 np . pi + 2 np . pi / 20 , 2 np . pi / 20 )  y   =   np . arange ( 0 , 2 np . pi + 2 np . pi / 20 , 2 np . pi / 20 )  X , Y   =   np . meshgrid ( x , y )  u   =   np . sin ( X ) np . cos ( Y )  v   =   - np . cos ( X ) np . sin ( Y )  fig ,   ax   =   plt . subplots ( figsize = ( 9 , 9 ))  ax . quiver ( X , Y , u , v )  ax . xaxis . set_ticks ([])  ax . yaxis . set_ticks ([])  ax . axis ([ 0 , 2 np . pi , 0 , 2 np . pi ])  ax . set_aspect ( 'equal' )  plt . show ()",
            "title": "Quiver plot with four vortices"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.15-Quiver-and-Stream-Plots/#quiver-plots-with-color",
            "text": "Finally, let's add some color to the quiver plots. The  ax.quiver()  method has an optional fifth positional argument that specifies the quiver arrow color. The quiver arrow color argument needs to have the same dimensions as the position and direction arrays.  ax.quiver(x_pos, y_pos, x_direct, y_direct, color)  Using Matplotlib subplots, we can build a figure which contains three quiver plots. Each quiver plot will be in color.  The code section below builds a figure with three subplots. Each subplot is a colored quiver plot.   In\u00a0[8]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  % matplotlib  inline  fig ,   ( ax1 , ax2 , ax3 )   =   plt . subplots ( 1 , 3 )  # first subplot  x   =   np . arange ( 0 , 2.2 , 0.2 )  y   =   np . arange ( 0 , 2.2 , 0.2 )  X ,   Y   =   np . meshgrid ( x ,   y )  u   =   np . cos ( X ) Y  v   =   np . sin ( y ) Y  n   =   - 2  color   =   np . sqrt ((( v - n ) / 2 ) 2   +   (( u - n ) / 2 ) 2 )  ax1 . quiver ( X , Y , u , v , color ,   alpha = 0.8 )  ax1 . xaxis . set_ticks ([])  ax1 . yaxis . set_ticks ([])  ax1 . axis ([ - 0.2 ,   2.3 ,   - 0.2 ,   2.3 ])  ax1 . set_aspect ( 'equal' )  # second subplot  x   =   np . arange ( - 2 , 2.2 , 0.2 )  y   =   np . arange ( - 2 , 2.2 , 0.2 )  X ,   Y   =   np . meshgrid ( x ,   y )  z   =   X * np . exp ( - X 2   - Y 2 )  dx ,   dy   =   np . gradient ( z )  n   =   - 2  color   =   np . sqrt ((( dx - n ) / 2 ) 2   +   (( dy - n ) / 2 ) 2 )    ax2 . quiver ( X , Y , dx , dy , color )  ax2 . xaxis . set_ticks ([])  ax2 . yaxis . set_ticks ([])  ax2 . set_aspect ( 'equal' )  # third subplot  x   =   np . arange ( 0 , 2 np . pi + 2 np . pi / 20 , 2 np . pi / 20 )  y   =   np . arange ( 0 , 2 np . pi + 2 np . pi / 20 , 2 np . pi / 20 )  X , Y   =   np . meshgrid ( x , y )  u   =   np . sin ( X ) np . cos ( Y )  v   =   - np . cos ( X ) np . sin ( Y )  n   =   - 1  color   =   np . sqrt ((( dx - n ) / 2 ) 2   +   (( dy - n ) / 2 ) 2 )  ax3 . quiver ( X , Y , u , v , color )  ax3 . xaxis . set_ticks ([])  ax3 . yaxis . set_ticks ([])  ax3 . axis ([ 0 , 2 np . pi , 0 , 2 np . pi ])  ax3 . set_aspect ( 'equal' )  # save and show the figure  plt . tight_layout ()  fig . savefig ( '3_quiver_plots.png' ,   dpi = 300 ,   bbox_inches = 'tight' )  plt . show ()",
            "title": "Quiver plots with color"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.15-Quiver-and-Stream-Plots/#stream-plots",
            "text": "A stream plot is a type of 2D plot used to show fluid flow and 2D field gradiants.   The basic method to build a stream plot in Matplotlib is:  ```python\nax.streamplot(x_grid,y_grid,x_vec,y_vec, density=spacing)\n````  Where  x_grid  and  y_grid  are arrays of x,y points. The arrays  x_vec  and  y_vec  denote the stream velocity at each point on the grid. The keyword argument  density=spacing  specifies how close the streamlines are drawn together.",
            "title": "Stream Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.15-Quiver-and-Stream-Plots/#a-simple-stream-plot",
            "text": "Let's start with a stream plot that contains stream lines on a 10 x 10 grid.  All the stream lines on the plot are parallel and point to the right.  The following code section builds a stream plot that contains horizontal parallel lines pointing to the right.   In\u00a0[9]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  # if using a Jupyter notebook, include:  % matplotlib  inline  x   =   np . arange ( 0 , 10 )  y   =   np . arange ( 0 , 10 )  X ,   Y   =   np . meshgrid ( x , y )  u   =   np . ones (( 10 , 10 ))   # x-component to the right  v   =   np . zeros (( 10 , 10 ))   # y-component zero  fig ,   ax   =   plt . subplots ()  ax . streamplot ( X , Y , u , v ,   density   =   0.5 )  ax . set_title ( 'Stream Plot of Parallel Lines' )  plt . show ()                \nThe plot contains parallel streamlines all pointing to the right.",
            "title": "A simple stream plot"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.15-Quiver-and-Stream-Plots/#stream-plot-of-a-field",
            "text": "We can build a stream plot which shows field lines based on a defined 2D vector field.   In\u00a0[10]:  \n      x   =   np . arange ( 0 , 2.2 , 0.1 )  y   =   np . arange ( 0 , 2.2 , 0.1 )  X ,   Y   =   np . meshgrid ( x ,   y )  u   =   np . cos ( X ) Y  v   =   np . sin ( y ) Y  fig ,   ax   =   plt . subplots ()  ax . streamplot ( X , Y , u , v ,   density   =   1 )  ax . axis ([ 0.5 , 2.1 , 0 , 2 ])  ax . xaxis . set_ticks ([])  ax . yaxis . set_ticks ([])  ax . set_title ( 'Stream Plot of Field Lines' )  plt . show ()",
            "title": "Stream plot of a field"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.15-Quiver-and-Stream-Plots/#stream-plot-of-two-point-charges",
            "text": "Finally, we will build a stream plot to demonstrate the electric field due to two point charges.  The electric field at any point on a 2D surface depends on the position and distance relative to the two point charges.   In\u00a0[11]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  % matplotlib  inline  x   =   np . arange ( - 4 , 4 , 0.2 )  y   =   np . arange ( - 4 , 4 , 0.2 )  X , Y   =   np . meshgrid ( x , y )  Ex   =   ( X   +   1 ) / (( X + 1 ) 2   +   Y 2 )   -   ( X   -   1 ) / (( X - 1 ) 2   +   Y 2 )  Ey   =   Y / (( X + 1 ) 2   +   Y 2 )   -   Y / (( X - 1 ) 2   +   Y 2 )  fig ,   ax   =   plt . subplots ( figsize = ( 6 , 6 ))  ax . streamplot ( X , Y , Ex , Ey )  ax . set_aspect ( 'equal' )  ax . plot ( - 1 , 0 , '-or' )  ax . plot ( 1 , 0 , '-ob' )  ax . set_title ( 'Stream Plot of Two Point Charges' )  plt . show ()",
            "title": "Stream plot of two point charges"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.16-3D-Surface-Plots/",
            "text": "3D Surface Plots\n\n\n3D surface plots can be created with Matplotlib\n\n\nThe \nmpl_toolkits.mplot3d import axes3d\n submodule included with Matplotlib provides the methods necessary to create 3D surface plots with Python.\n\n\nSurface Plots\n\n\nSurface plots are created with Matplotlib's \nax.plot_surface()\n method. By default, surface plots are a single color. The general format of Matplotlib's \nax.plot_surface()\n method is below.\n\n\nax.plot_surface(X, Y, Z)\n\n\n\n\nWhere \nX\n and \nY\n are 2D array of x and y points and \nZ\n is a 2D array of heights.\n\n\nAn example of a 3D surface plot is in the next code section. Note how the keyword argument \nprojection='3d'\n is included in the \nfig.add_subplot()\n method. \n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nfrom\n \nmpl_toolkits.mplot3d\n \nimport\n \naxes3d\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nfrom\n \nmatplotlib\n \nimport\n \ncm\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n#if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n5\n,\n0.1\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n5\n,\n0.1\n)\n\n\nX\n,\nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\ny\n)\n\n\nZ\n \n=\n \nX\n*\nnp\n.\nexp\n(\n-\nX\n2\n \n-\n \nY\n2\n)\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n6\n,\n6\n))\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n111\n,\n \nprojection\n=\n'3d'\n)\n\n\nax\n.\nplot_surface\n(\nX\n,\n \nY\n,\n \nZ\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWire Frame Plots\n\n\nWire frame plots are like surface plots, but on a wire frame plot the entire surface is not included. Instead, the surface is approximated with \"wires\" laid over the 3D surface. Wire frame 3D surface plots can be constructed using Matplotlib's \nax.plot_wireframe()\n method. The general method is below.\n\n\nax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)\n\n\n\n\nWhere \nX\n and \nY\n are 2D array of x and y points and \nZ\n is a 2D array of heights. The keyword arguments \nrstride=\n and \ncstride=\n are the row step size and the column step size. These keyword arguments control how close together the \"wires\" in the wire plot are drawn.\n\n\nThe next code section draws two wire frame plots side by side.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nfrom\n \nmpl_toolkits.mplot3d\n \nimport\n \naxes3d\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n12\n,\n6\n))\n\n\nax1\n \n=\n \nfig\n.\nadd_subplot\n(\n121\n,\n \nprojection\n=\n'3d'\n)\n\n\nax2\n \n=\n \nfig\n.\nadd_subplot\n(\n122\n,\n \nprojection\n=\n'3d'\n)\n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n5\n,\n0.1\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n5\n,\n0.1\n)\n\n\nX\n,\nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\ny\n)\n\n\nZ\n \n=\n \nX\n*\nnp\n.\nexp\n(\n-\nX\n2\n \n-\n \nY\n2\n)\n\n\n# Plot a basic wireframe.\n\n\nax1\n.\nplot_wireframe\n(\nX\n,\n \nY\n,\n \nZ\n,\n \nrstride\n=\n10\n,\n \ncstride\n=\n10\n)\n\n\nax1\n.\nset_title\n(\n'row step size 10, column step size 10'\n)\n\n\nax2\n.\nplot_wireframe\n(\nX\n,\n \nY\n,\n \nZ\n,\n \nrstride\n=\n20\n,\n \ncstride\n=\n20\n)\n\n\nax2\n.\nset_title\n(\n'row step size 20, column step size 20'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGradient Surface Plots\n\n\nGradient surface plots combine a 3D surface plot with a 2D contour plot. The 3D surface is colored like a 2D contour plot. High parts of the surface contain a different color than low parts of the surface. The general method call is below. Note the \ncmap=\n keyword argument.\n\n\nsurf = ax.plot_surface(X, Y, Z, \n                        cmap=<color map>,\n                        linewidth=0,\n                        antialiased=False)\n\n\n\n\nThe keyword argument \ncmap=<color map>\n assigns the colors to the surface. There is a wide array of color map options in Matplotlib. Options include \n'coolwarm'\n, \n'gist_earth'\n, and \n'ocean'\n. Find all of Matplotlib's colormaps in the Matplotlib documentation at \nmatplotlib.org/tutorials/colors/colormaps\n. A color bar can be added along side the plot by calling the \nfig.colorbar()\n method and passing in the surface plot object.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nfrom\n \nmpl_toolkits.mplot3d\n \nimport\n \naxes3d\n\n\n# if using a Jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n10\n,\n6\n))\n\n\nax1\n \n=\n \nfig\n.\nadd_subplot\n(\n111\n,\n \nprojection\n=\n'3d'\n)\n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n5\n,\n0.1\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n5\n,\n0.1\n)\n\n\nX\n,\nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\ny\n)\n\n\nZ\n \n=\n \nX\n*\nnp\n.\nexp\n(\n-\nX\n2\n \n-\n \nY\n2\n)\n\n\nmycmap\n \n=\n \nplt\n.\nget_cmap\n(\n'gist_earth'\n)\n\n\nax1\n.\nset_title\n(\n'gist_earth color map'\n)\n\n\nsurf1\n \n=\n \nax1\n.\nplot_surface\n(\nX\n,\n \nY\n,\n \nZ\n,\n \ncmap\n=\nmycmap\n)\n\n\nfig\n.\ncolorbar\n(\nsurf1\n,\n \nax\n=\nax1\n,\n \nshrink\n=\n0.5\n,\n \naspect\n=\n5\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3D Surface Plots with 2D contour plot projections\n\n\n3D Surface Plots created with Matplotlib can be projected onto 2D surfaces. Below is a code section that creates a 3D surface plot. The projections of the 3D surface are visualized on 2D contour plots.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nfrom\n \nmpl_toolkits.mplot3d\n \nimport\n \naxes3d\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nfrom\n \nmatplotlib\n \nimport\n \ncm\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n12\n,\n6\n))\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n111\n,\n \nprojection\n=\n'3d'\n)\n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n5\n,\n0.1\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n5\n,\n0.1\n)\n\n\nX\n,\nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\ny\n)\n\n\nZ\n \n=\n \nX\n*\nnp\n.\nexp\n(\n-\nX\n2\n \n-\n \nY\n2\n)\n\n\nsurf\n \n=\n \nax\n.\nplot_surface\n(\nX\n,\n \nY\n,\n \nZ\n,\n \nrstride\n=\n8\n,\n \ncstride\n=\n8\n,\n \nalpha\n=\n0.8\n,\n \ncmap\n=\ncm\n.\nocean\n)\n\n\ncset\n \n=\n \nax\n.\ncontourf\n(\nX\n,\n \nY\n,\n \nZ\n,\n \nzdir\n=\n'z'\n,\n \noffset\n=\nnp\n.\nmin\n(\nZ\n),\n \ncmap\n=\ncm\n.\nocean\n)\n\n\ncset\n \n=\n \nax\n.\ncontourf\n(\nX\n,\n \nY\n,\n \nZ\n,\n \nzdir\n=\n'x'\n,\n \noffset\n=-\n5\n,\n \ncmap\n=\ncm\n.\nocean\n)\n\n\ncset\n \n=\n \nax\n.\ncontourf\n(\nX\n,\n \nY\n,\n \nZ\n,\n \nzdir\n=\n'y'\n,\n \noffset\n=\n5\n,\n \ncmap\n=\ncm\n.\nocean\n)\n\n\nfig\n.\ncolorbar\n(\nsurf\n,\n \nax\n=\nax\n,\n \nshrink\n=\n0.5\n,\n \naspect\n=\n5\n)\n\n\nax\n.\nset_xlabel\n(\n'X'\n)\n\n\nax\n.\nset_xlim\n(\n-\n5\n,\n \n5\n)\n\n\nax\n.\nset_ylabel\n(\n'Y'\n)\n\n\nax\n.\nset_ylim\n(\n-\n5\n,\n \n5\n)\n\n\nax\n.\nset_zlabel\n(\n'Z'\n)\n\n\nax\n.\nset_zlim\n(\nnp\n.\nmin\n(\nZ\n),\n \nnp\n.\nmax\n(\nZ\n))\n\n\nax\n.\nset_title\n(\n'3D surface with 2D contour plot projections'\n)\n\n\nplt\n.\nshow\n()",
            "title": "3D Surface Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.16-3D-Surface-Plots/#3d-surface-plots",
            "text": "3D surface plots can be created with Matplotlib  The  mpl_toolkits.mplot3d import axes3d  submodule included with Matplotlib provides the methods necessary to create 3D surface plots with Python.",
            "title": "3D Surface Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.16-3D-Surface-Plots/#surface-plots",
            "text": "Surface plots are created with Matplotlib's  ax.plot_surface()  method. By default, surface plots are a single color. The general format of Matplotlib's  ax.plot_surface()  method is below.  ax.plot_surface(X, Y, Z)  Where  X  and  Y  are 2D array of x and y points and  Z  is a 2D array of heights.  An example of a 3D surface plot is in the next code section. Note how the keyword argument  projection='3d'  is included in the  fig.add_subplot()  method.    In\u00a0[1]:  \n      from   mpl_toolkits.mplot3d   import   axes3d  import   matplotlib.pyplot   as   plt  from   matplotlib   import   cm  import   numpy   as   np  #if using a Jupyter notebook, include:  % matplotlib  inline  x   =   np . arange ( - 5 , 5 , 0.1 )  y   =   np . arange ( - 5 , 5 , 0.1 )  X , Y   =   np . meshgrid ( x , y )  Z   =   X * np . exp ( - X 2   -   Y 2 )  fig   =   plt . figure ( figsize = ( 6 , 6 ))  ax   =   fig . add_subplot ( 111 ,   projection = '3d' )  ax . plot_surface ( X ,   Y ,   Z )  plt . show ()",
            "title": "Surface Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.16-3D-Surface-Plots/#wire-frame-plots",
            "text": "Wire frame plots are like surface plots, but on a wire frame plot the entire surface is not included. Instead, the surface is approximated with \"wires\" laid over the 3D surface. Wire frame 3D surface plots can be constructed using Matplotlib's  ax.plot_wireframe()  method. The general method is below.  ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)  Where  X  and  Y  are 2D array of x and y points and  Z  is a 2D array of heights. The keyword arguments  rstride=  and  cstride=  are the row step size and the column step size. These keyword arguments control how close together the \"wires\" in the wire plot are drawn.  The next code section draws two wire frame plots side by side.   In\u00a0[2]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  from   mpl_toolkits.mplot3d   import   axes3d  # if using a Jupyter notebook, include:  % matplotlib  inline  fig   =   plt . figure ( figsize = ( 12 , 6 ))  ax1   =   fig . add_subplot ( 121 ,   projection = '3d' )  ax2   =   fig . add_subplot ( 122 ,   projection = '3d' )  x   =   np . arange ( - 5 , 5 , 0.1 )  y   =   np . arange ( - 5 , 5 , 0.1 )  X , Y   =   np . meshgrid ( x , y )  Z   =   X * np . exp ( - X 2   -   Y 2 )  # Plot a basic wireframe.  ax1 . plot_wireframe ( X ,   Y ,   Z ,   rstride = 10 ,   cstride = 10 )  ax1 . set_title ( 'row step size 10, column step size 10' )  ax2 . plot_wireframe ( X ,   Y ,   Z ,   rstride = 20 ,   cstride = 20 )  ax2 . set_title ( 'row step size 20, column step size 20' )  plt . show ()",
            "title": "Wire Frame Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.16-3D-Surface-Plots/#gradient-surface-plots",
            "text": "Gradient surface plots combine a 3D surface plot with a 2D contour plot. The 3D surface is colored like a 2D contour plot. High parts of the surface contain a different color than low parts of the surface. The general method call is below. Note the  cmap=  keyword argument.  surf = ax.plot_surface(X, Y, Z, \n                        cmap=<color map>,\n                        linewidth=0,\n                        antialiased=False)  The keyword argument  cmap=<color map>  assigns the colors to the surface. There is a wide array of color map options in Matplotlib. Options include  'coolwarm' ,  'gist_earth' , and  'ocean' . Find all of Matplotlib's colormaps in the Matplotlib documentation at  matplotlib.org/tutorials/colors/colormaps . A color bar can be added along side the plot by calling the  fig.colorbar()  method and passing in the surface plot object.   In\u00a0[3]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  from   mpl_toolkits.mplot3d   import   axes3d  # if using a Jupyter notebook, include:  % matplotlib  inline  fig   =   plt . figure ( figsize = ( 10 , 6 ))  ax1   =   fig . add_subplot ( 111 ,   projection = '3d' )  x   =   np . arange ( - 5 , 5 , 0.1 )  y   =   np . arange ( - 5 , 5 , 0.1 )  X , Y   =   np . meshgrid ( x , y )  Z   =   X * np . exp ( - X 2   -   Y 2 )  mycmap   =   plt . get_cmap ( 'gist_earth' )  ax1 . set_title ( 'gist_earth color map' )  surf1   =   ax1 . plot_surface ( X ,   Y ,   Z ,   cmap = mycmap )  fig . colorbar ( surf1 ,   ax = ax1 ,   shrink = 0.5 ,   aspect = 5 )  plt . show ()",
            "title": "Gradient Surface Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.16-3D-Surface-Plots/#3d-surface-plots-with-2d-contour-plot-projections",
            "text": "3D Surface Plots created with Matplotlib can be projected onto 2D surfaces. Below is a code section that creates a 3D surface plot. The projections of the 3D surface are visualized on 2D contour plots.   In\u00a0[4]:  \n      from   mpl_toolkits.mplot3d   import   axes3d  import   matplotlib.pyplot   as   plt  from   matplotlib   import   cm  fig   =   plt . figure ( figsize = ( 12 , 6 ))  ax   =   fig . add_subplot ( 111 ,   projection = '3d' )  x   =   np . arange ( - 5 , 5 , 0.1 )  y   =   np . arange ( - 5 , 5 , 0.1 )  X , Y   =   np . meshgrid ( x , y )  Z   =   X * np . exp ( - X 2   -   Y 2 )  surf   =   ax . plot_surface ( X ,   Y ,   Z ,   rstride = 8 ,   cstride = 8 ,   alpha = 0.8 ,   cmap = cm . ocean )  cset   =   ax . contourf ( X ,   Y ,   Z ,   zdir = 'z' ,   offset = np . min ( Z ),   cmap = cm . ocean )  cset   =   ax . contourf ( X ,   Y ,   Z ,   zdir = 'x' ,   offset =- 5 ,   cmap = cm . ocean )  cset   =   ax . contourf ( X ,   Y ,   Z ,   zdir = 'y' ,   offset = 5 ,   cmap = cm . ocean )  fig . colorbar ( surf ,   ax = ax ,   shrink = 0.5 ,   aspect = 5 )  ax . set_xlabel ( 'X' )  ax . set_xlim ( - 5 ,   5 )  ax . set_ylabel ( 'Y' )  ax . set_ylim ( - 5 ,   5 )  ax . set_zlabel ( 'Z' )  ax . set_zlim ( np . min ( Z ),   np . max ( Z ))  ax . set_title ( '3D surface with 2D contour plot projections' )  plt . show ()",
            "title": "3D Surface Plots with 2D contour plot projections"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.17-Summary/",
            "text": "Summary\n\n\nIn this chapter, you learned how to create plots using Python and Matplotlib. You learned what Matplotlib is and why problem solvers should learn how to use Matplotlib. Matplotlib installation was shown at the start of the chapter. Then, you learned how to build line plots and save plots as image files. You learned how to customize plots by including axis label, titles, and legends on your plots. You also learned how to add annotations to plots.\n\n\nTypes of charts detailed in this chapter:\n\n\n\n\n\n\nline plots\n\n\n\n\n\n\nmulti-line plots\n\n\n\n\n\n\nbar graphs\n\n\n\n\n\n\npie charts\n\n\n\n\n\n\nbar and line graphs with error bars\n\n\n\n\n\n\nscatter plots\n\n\n\n\n\n\nhistograms\n\n\n\n\n\n\nbox plots and violin plots\n\n\n\n\n\n\ncontour plots\n\n\n\n\n\n\nquiver plots\n\n\n\n\n\n\nstream plots\n\n\n\n\n\n\n3D surface plots\n\n\n\n\n\n\n3D wire frame plots\n\n\n\n\n\n\n3D surface plots with projections\n\n\n\n\n\n\nKey Terms and Concepts\n\n\nplot\n\n\ndpi\n\n\ninvoke\n\n\nlibrary\n\n\nparameters\n\n\nRGBA\n\n\nobject\n\n\nattribute\n\n\nobject-oriented programming\n\n\nmethod\n\n\nimage resolution\n\n\nerror bars\n\n\nbox plot\n\n\nviolin plot\n\n\nhistogram\n\n\nannotation\n\n\nreference frame\n\n\ncontour plot\n\n\nquiver plot\n\n\nstream plot\n\n\ngradient\n\n\nfield\n\n\nwire frame plot\n\n\nprojection\n\n\nAdditional Resources\n\n\nMatplotlib official documentation: \nhttps://matplotlib.org/contents.html\n\n\nMatplotlib summary notebook on Kaggle: \nhttps://www.kaggle.com/grroverpr/matplotlib-plotting-guide/notebook\n\n\nPython Plotting With Matplotlib (Guide) on Real Python: \nhttps://realpython.com/python-matplotlib-guide/#why-can-matplotlib-be-confusing\n\n\nPython For Data Science: Matplotlib Cheat Sheet from DataCamp: \nhttps://s3.amazonaws.com/assets.datacamp.com/blog_assets/Python_Matplotlib_Cheat_Sheet.pdf",
            "title": "Summary"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.17-Summary/#summary",
            "text": "In this chapter, you learned how to create plots using Python and Matplotlib. You learned what Matplotlib is and why problem solvers should learn how to use Matplotlib. Matplotlib installation was shown at the start of the chapter. Then, you learned how to build line plots and save plots as image files. You learned how to customize plots by including axis label, titles, and legends on your plots. You also learned how to add annotations to plots.  Types of charts detailed in this chapter:    line plots    multi-line plots    bar graphs    pie charts    bar and line graphs with error bars    scatter plots    histograms    box plots and violin plots    contour plots    quiver plots    stream plots    3D surface plots    3D wire frame plots    3D surface plots with projections",
            "title": "Summary"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.17-Summary/#key-terms-and-concepts",
            "text": "plot  dpi  invoke  library  parameters  RGBA  object  attribute  object-oriented programming  method  image resolution  error bars  box plot  violin plot  histogram  annotation  reference frame  contour plot  quiver plot  stream plot  gradient  field  wire frame plot  projection",
            "title": "Key Terms and Concepts"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.17-Summary/#additional-resources",
            "text": "Matplotlib official documentation:  https://matplotlib.org/contents.html  Matplotlib summary notebook on Kaggle:  https://www.kaggle.com/grroverpr/matplotlib-plotting-guide/notebook  Python Plotting With Matplotlib (Guide) on Real Python:  https://realpython.com/python-matplotlib-guide/#why-can-matplotlib-be-confusing  Python For Data Science: Matplotlib Cheat Sheet from DataCamp:  https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Python_Matplotlib_Cheat_Sheet.pdf",
            "title": "Additional Resources"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.18-Review-Questions/",
            "text": "Review Questions\n\n\nLine plots\n\n\nQ06.01 Create a plot of the function \ny=\\cos(x)\ny=\\cos(x)\n from \nx = -2\\pi\nx = -2\\pi\n to \n2\\pi\n2\\pi\n\n\nQ06.02 Create a plot of the function \ny=\\frac{1}{2}{e^x}\ny=\\frac{1}{2}{e^x}\n from \nx = 0\nx = 0\n to \n5\n5\n\n\nQ06.03 Create a plot of the function \ny=\\sqrt{2x}\ny=\\sqrt{2x}\n from \nx = 1\nx = 1\n to \n10\n10\n\n\nQ06.04 Create a plot of the function \ny=mx+b\ny=mx+b\n, where \nm=-1\nm=-1\n and \nb=-4\nb=-4\n. Limit the plot to values of \nx=-5\nx=-5\n to \n5\n5\n.\n\n\nQ06.05 Create a plot of the function \ny=ax^2+bx+c\ny=ax^2+bx+c\n, where \na=1/2\na=1/2\n, \nb=-1/3\nb=-1/3\n and \nc=4\nc=4\n. Limit the plot to values of \nx=-10\nx=-10\n to \n10\n10\n. \n\n\nQ06.06 Create a plot of the function \ny=x^3+3\ny=x^3+3\n from \nx=-3\nx=-3\n to \n3\n3\n.\n\n\nQ06.07 Create a plot of the function \ny=2x^3-9x^2+7x+6\ny=2x^3-9x^2+7x+6\n from \nx=-3\nx=-3\n to \n4\n4\n.\n\n\nQ06.08 Plot the data set below with a line plot. Use Matplotlib's default index system, or create a set of x values from \nx=0\nx=0\n to \n4\n4\n.\n\n\n\n\n y = [-1, 2, -3, 1, 0] \n\n\n y = [-1, 2, -3, 1, 0] \n\n\n\n\nQ06.09 Plot the following three functions on the same set of axis. Use a different color line for each function.\n\n\n\n\n x = \\cos(t) \n\n\n x = \\cos(t) \n\n\n\n\n\n\n y = \\cos(t/2) \n\n\n y = \\cos(t/2) \n\n\n\n\n\n\n z = \\frac{1}{2}\\cos(t) \n\n\n z = \\frac{1}{2}\\cos(t) \n\n\n\n\nSet values of \nt=-4\\pi\nt=-4\\pi\n to \n4\\pi\n4\\pi\n\n\nQ06.10 Plot the following three functions on the same set of axis. Specify a thick red line for the \n\\cos\n\\cos\n function, a thin blue line for the \n\\sin\n\\sin\n function, and a dashed green line for the \natan\natan\n function (the arc tangent function).\n\n\n\n\n x = \\cos(r/10) \n\n\n x = \\cos(r/10) \n\n\n\n\n\n\n y = \\sin(r/4) \n\n\n y = \\sin(r/4) \n\n\n\n\n\n\n z = atan(r) \n\n\n z = atan(r) \n\n\n\n\nSet values of \nr=-1/2\nr=-1/2\n to \n1/2\n1/2\n\n\nBar Charts and Pie Charts\n\n\nQ06.30 According to the University of Waterloo, world energy consumption in 2006 from the five top energy resources were:\n\n\n\n\n Natural \\ Gas = 24\\% \n\n\n Natural \\ Gas = 24\\% \n\n\n\n\n\n\n Hydro = 6\\% \n\n\n Hydro = 6\\% \n\n\n\n\n\n\n Nuclear = 6\\% \n\n\n Nuclear = 6\\% \n\n\n\n\n\n\n Oil = 36\\% \n\n\n Oil = 36\\% \n\n\n\n\n\n\n Coal = 28\\% \n\n\n Coal = 28\\% \n\n\n\n\nBuild a pie chart of the distribution of world energy consumption based on the data above.\n\n\nQ06.31 According to the 2017 Python Developer's Survey, the computer operating system used by Python Developers breaks down as follows:\n\n\n\n\n Windows = 49\\% \n\n\n Windows = 49\\% \n\n\n\n\n\n\n Linux = 19\\% \n\n\n Linux = 19\\% \n\n\n\n\n\n\n MacOS = 15\\% \n\n\n MacOS = 15\\% \n\n\n\n\n\n\n Other = 17\\% \n\n\n Other = 17\\% \n\n\n\n\nBuild a pie chart of the computer operating system used by Python Developers in 2017.\n\n\nQ06.32 According to the 2017 Python Developer's Survey, the commercial cloud providers used by Python Developers breaks down as follows:\n\n\n\n\n Amazon Web Services = 67\\% \n\n\n Amazon Web Services = 67\\% \n\n\n\n\n\n\n Google Cloud = 29\\% \n\n\n Google Cloud = 29\\% \n\n\n\n\n\n\n Heroku = 26\\% \n\n\n Heroku = 26\\% \n\n\n\n\n\n\n Digital Ocean = 23\\% \n\n\n Digital Ocean = 23\\% \n\n\n\n\n\n\n Microsoft Azure = 16\\% \n\n\n Microsoft Azure = 16\\% \n\n\n\n\n\n\n Other = 13\\% \n\n\n Other = 13\\% \n\n\n\n\nBuild a pie chart of the commercial cloud providers used by Python Developers in 2017.\n\n\nQ06.33 Create a plot of the function \ny=\\sqrt{2x}\ny=\\sqrt{2x}\n from \nx = 1\nx = 1\n to \n10\n10\n\n\nQ06.34 Re-create the pie chart in Q06.31 that shows which operating system Python developers use. Explode out the Windows (49%) pie piece to highlight it.\n\n\nQ06.35 A list of grades in a college engineering course and the corresponding number of students who earned each grade is shown below:\n\n\ngrades = ['A','B','C','D','F']\n\nnumber_of_students = [3, 5, 8, 1, 2]\n\n\n\n\nBuild a bar plot of the grade distribution from the college engineering class. \n\n\nQ06.36 The proof strength of four different grades of bolts is shown below:\n\n\n\n\n\n\n\n\nBolt Type\n\n\nProof Strength (psi)\n\n\n\n\n\n\n\n\n\n\nGrade 2\n\n\n33,000 psi\n\n\n\n\n\n\nGrade 5\n\n\n74,000 psi\n\n\n\n\n\n\nGrade 8\n\n\n120,000 psi\n\n\n\n\n\n\nGrade A325\n\n\n85,000 psi\n\n\n\n\n\n\n\n\nBuild a bar chart of the proof strength of the four types of bolts. Include labels on the x-axis and y-axis. Include a title.\n\n\nQ06.37 According to the 2017 Python Developer's Survey, the IDE (Integrated Development Environment) used by \nScientific\n Python Developers breaks down as follows:\n\n\n\n\n PyCharm \\ Professional = 12\\% \n\n\n PyCharm \\ Professional = 12\\% \n\n\n\n\n\n\n PyCharm \\ CE = 17\\% \n\n\n PyCharm \\ CE = 17\\% \n\n\n\n\n\n\n Sublime \\ Text = 9\\% \n\n\n Sublime \\ Text = 9\\% \n\n\n\n\n\n\n Vim = 8\\% \n\n\n Vim = 8\\% \n\n\n\n\n\n\n IDLE = 7\\% \n\n\n IDLE = 7\\% \n\n\n\n\n\n\n Atom = 7\\% \n\n\n Atom = 7\\% \n\n\n\n\n\n\n VS \\ Code = 6\\% \n\n\n VS \\ Code = 6\\% \n\n\n\n\n\n\n Notepad \\ ++ = 6\\% \n\n\n Notepad \\ ++ = 6\\% \n\n\n\n\n\n\n Eclipse = 3\\% \n\n\n Eclipse = 3\\% \n\n\n\n\n\n\n Emacs = 3\\% \n\n\n Emacs = 3\\% \n\n\n\n\nBuild a bar chart of the IDE's used by Python Developers in 2017.\n\n\nQ06.38 Create a plot of the function \ny=x^3+3\ny=x^3+3\n from \nx=-3\nx=-3\n to \nx=3\nx=3\n.\n\n\nQ06.39 The tensile strength of 4 steel heat treatments is shown in the table below:\n\n\n\n\n\n\n\n\nHeat Treatment\n\n\nTensile Strength (MPa)\n\n\n\n\n\n\n\n\n\n\nAnnealed\n\n\n390 MPa\n\n\n\n\n\n\nNormalized\n\n\n452 MPa\n\n\n\n\n\n\nOil Quench\n\n\n734 MPa\n\n\n\n\n\n\nOil Quench and Temper\n\n\n422 MPa\n\n\n\n\n\n\n\n\nBuild a bar plot of tensile strength vs. heat treatment using the steel heat treatment data above.\n\n\nHistograms, Box Plots, and Violin Plots\n\n\nQ06.50 Plot a histogram of normal distribution of \n100\n random numbers. Use NumPy's \nnp.random.normal()\n function to create the array of numbers. Set a mean \n\\mu\n\\mu\n of 20 and a standard deviation \n\\sigma\n\\sigma\n of \n7\n.\n\n\nQ06.51 NumPy's \nnp.random.randint()\n function creates an array of random numbers. NumPy's \nnp.random.randn()\n function creates an array of normally-distributed random numbers. Use both each of these functions to create a set of 200 random numbers. Plot both sets of numbers as histograms with Matplotlib's \nax.hist()\n method. After you construct both histograms, explain how the two NumPy functions \nnp.random.randint()\n and \nnp.random.randn()\n functions compare.\n\n\nQ06.52 Create a box plot with three elements (three \"boxes\"). Use NumPy's \nnp.random.randn()\n function to create three arrays of 50 elements. Plot each array as a separate element on the box plot.\n\n\nQ06.53 Create a violin plot with five elements (three \"violins\"). Use NumPy's \nnp.random.randn()\n function to create five arrays of 50 elements. Plot each array as a separate element on the violin plot.\n\n\nQ06.54 Use Matplotlib's \nplt.subplots()\n command to create a figure with three subplots. In the first subplot, build a historgram. In the second subplot build a box plot. In the third subplot build a violin plot. Plot the same set of 100 normally-distributed random numbers (using NumPy's \nnp.random.randn()\n function) in each subplot. Include a title above each subplot that shows the plot type: Histogram, Box Plot, and Violin Plot.\n\n\nScatter Plots\n\n\nQ06.60 Create a scatter plot with the following lists of x points and y points.\n\n\nx = [1,2,3,4,5]\ny = [8,12,4,2,6]\n\n\n\n\nQ06.61 Create a scatter plot with the following arrays of x pints and y points generated with NumPy's \nnp.random.randint()\n function.\n\n\nx = np.random.randint(20)\ny = np.random.randint(20)\n\n\n\n\nQ06.62 Use the code below to create two arrays of semi-focused random points.\n\n\nx1 = 1.5 * np.random.randn(150) + 10\ny1 = 1.5 * np.random.randn(150) + 10\nx2 = 1.5 * np.random.randn(150) + 4\ny2 = 1.5 * np.random.randn(150) + 4\nx = np.append(x1,x2)\ny = np.append(y1,y2)\n\n\n\n\nPlot the arrays \nx\n and \ny\n on a scatter plot. Set the color of the marker's on the scatter plot red. Set the marker opacity to \n0.5\n.\n\n\nSubplots\n\n\nQ06.70 Create a figure that has four subplots all in one row. In each of the subplots plot the function:\n\n\n\n\n y = e^x \n\n\n y = e^x \n\n\n\n\nUse the same values of x and y in each subplot. Set the values of x with NumPy's \narange()\n function with the line \nx = np.arange(0.01, 20.0, 0.01)\n In the first subplot, use Matplotlibs's \nax.plot()\n method. In the second subplot use Matplotlib's \nax.semilogy()\n method. In the thrid subplot use Matplotlib's \nax.semilogx()\n method. In the four subplot use Matplotlib's \nax.loglog()\n method. Label each subplot with a title that shows the plot type.",
            "title": "Review Questions"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.18-Review-Questions/#review-questions",
            "text": "",
            "title": "Review Questions"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.18-Review-Questions/#line-plots",
            "text": "Q06.01 Create a plot of the function  y=\\cos(x) y=\\cos(x)  from  x = -2\\pi x = -2\\pi  to  2\\pi 2\\pi  Q06.02 Create a plot of the function  y=\\frac{1}{2}{e^x} y=\\frac{1}{2}{e^x}  from  x = 0 x = 0  to  5 5  Q06.03 Create a plot of the function  y=\\sqrt{2x} y=\\sqrt{2x}  from  x = 1 x = 1  to  10 10  Q06.04 Create a plot of the function  y=mx+b y=mx+b , where  m=-1 m=-1  and  b=-4 b=-4 . Limit the plot to values of  x=-5 x=-5  to  5 5 .  Q06.05 Create a plot of the function  y=ax^2+bx+c y=ax^2+bx+c , where  a=1/2 a=1/2 ,  b=-1/3 b=-1/3  and  c=4 c=4 . Limit the plot to values of  x=-10 x=-10  to  10 10 .   Q06.06 Create a plot of the function  y=x^3+3 y=x^3+3  from  x=-3 x=-3  to  3 3 .  Q06.07 Create a plot of the function  y=2x^3-9x^2+7x+6 y=2x^3-9x^2+7x+6  from  x=-3 x=-3  to  4 4 .  Q06.08 Plot the data set below with a line plot. Use Matplotlib's default index system, or create a set of x values from  x=0 x=0  to  4 4 .    y = [-1, 2, -3, 1, 0]    y = [-1, 2, -3, 1, 0]    Q06.09 Plot the following three functions on the same set of axis. Use a different color line for each function.    x = \\cos(t)    x = \\cos(t)      y = \\cos(t/2)    y = \\cos(t/2)      z = \\frac{1}{2}\\cos(t)    z = \\frac{1}{2}\\cos(t)    Set values of  t=-4\\pi t=-4\\pi  to  4\\pi 4\\pi  Q06.10 Plot the following three functions on the same set of axis. Specify a thick red line for the  \\cos \\cos  function, a thin blue line for the  \\sin \\sin  function, and a dashed green line for the  atan atan  function (the arc tangent function).    x = \\cos(r/10)    x = \\cos(r/10)      y = \\sin(r/4)    y = \\sin(r/4)      z = atan(r)    z = atan(r)    Set values of  r=-1/2 r=-1/2  to  1/2 1/2",
            "title": "Line plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.18-Review-Questions/#bar-charts-and-pie-charts",
            "text": "Q06.30 According to the University of Waterloo, world energy consumption in 2006 from the five top energy resources were:    Natural \\ Gas = 24\\%    Natural \\ Gas = 24\\%      Hydro = 6\\%    Hydro = 6\\%      Nuclear = 6\\%    Nuclear = 6\\%      Oil = 36\\%    Oil = 36\\%      Coal = 28\\%    Coal = 28\\%    Build a pie chart of the distribution of world energy consumption based on the data above.  Q06.31 According to the 2017 Python Developer's Survey, the computer operating system used by Python Developers breaks down as follows:    Windows = 49\\%    Windows = 49\\%      Linux = 19\\%    Linux = 19\\%      MacOS = 15\\%    MacOS = 15\\%      Other = 17\\%    Other = 17\\%    Build a pie chart of the computer operating system used by Python Developers in 2017.  Q06.32 According to the 2017 Python Developer's Survey, the commercial cloud providers used by Python Developers breaks down as follows:    Amazon Web Services = 67\\%    Amazon Web Services = 67\\%      Google Cloud = 29\\%    Google Cloud = 29\\%      Heroku = 26\\%    Heroku = 26\\%      Digital Ocean = 23\\%    Digital Ocean = 23\\%      Microsoft Azure = 16\\%    Microsoft Azure = 16\\%      Other = 13\\%    Other = 13\\%    Build a pie chart of the commercial cloud providers used by Python Developers in 2017.  Q06.33 Create a plot of the function  y=\\sqrt{2x} y=\\sqrt{2x}  from  x = 1 x = 1  to  10 10  Q06.34 Re-create the pie chart in Q06.31 that shows which operating system Python developers use. Explode out the Windows (49%) pie piece to highlight it.  Q06.35 A list of grades in a college engineering course and the corresponding number of students who earned each grade is shown below:  grades = ['A','B','C','D','F']\n\nnumber_of_students = [3, 5, 8, 1, 2]  Build a bar plot of the grade distribution from the college engineering class.   Q06.36 The proof strength of four different grades of bolts is shown below:     Bolt Type  Proof Strength (psi)      Grade 2  33,000 psi    Grade 5  74,000 psi    Grade 8  120,000 psi    Grade A325  85,000 psi     Build a bar chart of the proof strength of the four types of bolts. Include labels on the x-axis and y-axis. Include a title.  Q06.37 According to the 2017 Python Developer's Survey, the IDE (Integrated Development Environment) used by  Scientific  Python Developers breaks down as follows:    PyCharm \\ Professional = 12\\%    PyCharm \\ Professional = 12\\%      PyCharm \\ CE = 17\\%    PyCharm \\ CE = 17\\%      Sublime \\ Text = 9\\%    Sublime \\ Text = 9\\%      Vim = 8\\%    Vim = 8\\%      IDLE = 7\\%    IDLE = 7\\%      Atom = 7\\%    Atom = 7\\%      VS \\ Code = 6\\%    VS \\ Code = 6\\%      Notepad \\ ++ = 6\\%    Notepad \\ ++ = 6\\%      Eclipse = 3\\%    Eclipse = 3\\%      Emacs = 3\\%    Emacs = 3\\%    Build a bar chart of the IDE's used by Python Developers in 2017.  Q06.38 Create a plot of the function  y=x^3+3 y=x^3+3  from  x=-3 x=-3  to  x=3 x=3 .  Q06.39 The tensile strength of 4 steel heat treatments is shown in the table below:     Heat Treatment  Tensile Strength (MPa)      Annealed  390 MPa    Normalized  452 MPa    Oil Quench  734 MPa    Oil Quench and Temper  422 MPa     Build a bar plot of tensile strength vs. heat treatment using the steel heat treatment data above.",
            "title": "Bar Charts and Pie Charts"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.18-Review-Questions/#histograms-box-plots-and-violin-plots",
            "text": "Q06.50 Plot a histogram of normal distribution of  100  random numbers. Use NumPy's  np.random.normal()  function to create the array of numbers. Set a mean  \\mu \\mu  of 20 and a standard deviation  \\sigma \\sigma  of  7 .  Q06.51 NumPy's  np.random.randint()  function creates an array of random numbers. NumPy's  np.random.randn()  function creates an array of normally-distributed random numbers. Use both each of these functions to create a set of 200 random numbers. Plot both sets of numbers as histograms with Matplotlib's  ax.hist()  method. After you construct both histograms, explain how the two NumPy functions  np.random.randint()  and  np.random.randn()  functions compare.  Q06.52 Create a box plot with three elements (three \"boxes\"). Use NumPy's  np.random.randn()  function to create three arrays of 50 elements. Plot each array as a separate element on the box plot.  Q06.53 Create a violin plot with five elements (three \"violins\"). Use NumPy's  np.random.randn()  function to create five arrays of 50 elements. Plot each array as a separate element on the violin plot.  Q06.54 Use Matplotlib's  plt.subplots()  command to create a figure with three subplots. In the first subplot, build a historgram. In the second subplot build a box plot. In the third subplot build a violin plot. Plot the same set of 100 normally-distributed random numbers (using NumPy's  np.random.randn()  function) in each subplot. Include a title above each subplot that shows the plot type: Histogram, Box Plot, and Violin Plot.",
            "title": "Histograms, Box Plots, and Violin Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.18-Review-Questions/#scatter-plots",
            "text": "Q06.60 Create a scatter plot with the following lists of x points and y points.  x = [1,2,3,4,5]\ny = [8,12,4,2,6]  Q06.61 Create a scatter plot with the following arrays of x pints and y points generated with NumPy's  np.random.randint()  function.  x = np.random.randint(20)\ny = np.random.randint(20)  Q06.62 Use the code below to create two arrays of semi-focused random points.  x1 = 1.5 * np.random.randn(150) + 10\ny1 = 1.5 * np.random.randn(150) + 10\nx2 = 1.5 * np.random.randn(150) + 4\ny2 = 1.5 * np.random.randn(150) + 4\nx = np.append(x1,x2)\ny = np.append(y1,y2)  Plot the arrays  x  and  y  on a scatter plot. Set the color of the marker's on the scatter plot red. Set the marker opacity to  0.5 .",
            "title": "Scatter Plots"
        },
        {
            "location": "/06-Plotting-with-Matplotlib/06.18-Review-Questions/#subplots",
            "text": "Q06.70 Create a figure that has four subplots all in one row. In each of the subplots plot the function:    y = e^x    y = e^x    Use the same values of x and y in each subplot. Set the values of x with NumPy's  arange()  function with the line  x = np.arange(0.01, 20.0, 0.01)  In the first subplot, use Matplotlibs's  ax.plot()  method. In the second subplot use Matplotlib's  ax.semilogy()  method. In the thrid subplot use Matplotlib's  ax.semilogx()  method. In the four subplot use Matplotlib's  ax.loglog()  method. Label each subplot with a title that shows the plot type.",
            "title": "Subplots"
        },
        {
            "location": "/07-If-Else-Try-Except/07.00-Introduction/",
            "text": "If Else Try Except\n\n\nIntroduction\n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nUse if, else if, and else selection structures\n\n\n\n\n\n\nExplain the difference between syntax errors and exception errors\n\n\n\n\n\n\nUse try-except statements\n\n\n\n\n\n\nConstruct flowcharts to describe the flow of a Python program",
            "title": "Introduction"
        },
        {
            "location": "/07-If-Else-Try-Except/07.00-Introduction/#if-else-try-except",
            "text": "",
            "title": "If Else Try Except"
        },
        {
            "location": "/07-If-Else-Try-Except/07.00-Introduction/#introduction",
            "text": "By the end of this chapter you will be able to:    Use if, else if, and else selection structures    Explain the difference between syntax errors and exception errors    Use try-except statements    Construct flowcharts to describe the flow of a Python program",
            "title": "Introduction"
        },
        {
            "location": "/07-If-Else-Try-Except/07.01-User-Input/",
            "text": "User Input\n\n\nTo begin this chapter, Python's \ninput()\n function is discussed. \nPython can be used to ask users for input. The input entered by a user can be saved to a variable and used in subsequent parts of the program. The syntax of Python's \ninput()\n function is below:\n\n\nvar = input('message')\n\n\n\n\nWhere \nvar\n is the variable that stores the user's input and \n'message'\n is the message the user sees at the prompt. A string enclosed in quotes, like \n'message'\n needs to be passed as an input argument to the \ninput()\n function.  Let's ask a user for their age:\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nage\n \n=\n \ninput\n(\n'how old are you?'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhow old are you?8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSince the user's input is assigned to a variable, further operations can be run on it. Now, let's print the user's age back to them. This can be accomplished with an f-string. Note the \nf' '\n inserted before the string. A set of curly braces \n{  }\n surrounds the variable's value that is printed back to the user.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nage\n \n=\n \ninput\n(\n'how old are you?'\n)\n\n\nprint\n(\nf\n'you are \n{age}\n years old'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhow old are you?8\nyou are 8 years old\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet's try another example. We will we ask for the base and height of a triangle and print back the area of the triangle to back to the user. \n\n\nThere is a problem with the approach below. The code block does not run becuase a common error is present.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nb\n \n=\n \ninput\n(\n'base of triangle: '\n)\n\n\nh\n \n=\n \ninput\n(\n'height of triangle: '\n)\n\n\nA\n \n=\n \n(\n1\n/\n2\n)\nb\nh\n\n\nprint\n(\nf\n'The area of the triangle is: \n{A}\n'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbase of triangle: 5\nheight of triangle: 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---------------------------------------------------------------------------\n\n\nTypeError\n                                 Traceback (most recent call last)\n\n<ipython-input-3-c9cb8f02e604>\n in \n<module>\n()\n\n\n      1\n b \n=\n input\n(\n'base of triangle: '\n)\n\n\n      2\n h \n=\n input\n(\n'height of triangle: '\n)\n\n\n----> 3\n \nA \n=\n \n(\n1\n/\n2\n)\n*\nb\n*\nh\n\n      4\n print\n(\nf'The area of the triangle is: {A}'\n)\n\n\n\nTypeError\n: can't multiply sequence by non-int of type 'float'\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe previous section of code returns an error because of the data type of the variables \nb\n and \nh\n. To investigate the data type, we can use Python's \ntype()\n function.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nb\n \n=\n \ninput\n(\n'base of triangle: '\n)\n\n\nh\n \n=\n \ninput\n(\n'height of triangle: '\n)\n\n\nprint\n(\nf\n'b and h are of type: {type(b)}, {type(h)}'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbase of triangle: 5\nheight of triangle: 2\nb and h are of type: <class 'str'>, <class 'str'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotice that both \nb\n and \nh\n are strings, even though the numbers \n5\n and \n2\n were entered as input. The output of the \ninput()\n function is always a string, even if the user enters a number. \n\n\nTo complete the area calculation, \nb\n and \nh\n first need to be converted to floats using Python's \nfloat()\n function, then the mathematical operation will run without error:\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nb\n \n=\n \ninput\n(\n'base of triangle: '\n)\n\n\nh\n \n=\n \ninput\n(\n'height of triangle: '\n)\n\n\nA\n \n=\n \n(\n1\n/\n2\n)\nfloat\n(\nb\n)\nfloat\n(\nh\n)\n\n\nprint\n(\nf\n'The area of the triangle is: \n{A}\n'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbase of triangle: 5\nheight of triangle: 2\nThe area of the triangle is: 5.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe concept of a selection statement is introduced the next section.",
            "title": "User Input"
        },
        {
            "location": "/07-If-Else-Try-Except/07.01-User-Input/#user-input",
            "text": "To begin this chapter, Python's  input()  function is discussed. \nPython can be used to ask users for input. The input entered by a user can be saved to a variable and used in subsequent parts of the program. The syntax of Python's  input()  function is below:  var = input('message')  Where  var  is the variable that stores the user's input and  'message'  is the message the user sees at the prompt. A string enclosed in quotes, like  'message'  needs to be passed as an input argument to the  input()  function.  Let's ask a user for their age:   In\u00a0[1]:  \n      age   =   input ( 'how old are you?' )           how old are you?8      \nSince the user's input is assigned to a variable, further operations can be run on it. Now, let's print the user's age back to them. This can be accomplished with an f-string. Note the  f' '  inserted before the string. A set of curly braces  {  }  surrounds the variable's value that is printed back to the user.   In\u00a0[2]:  \n      age   =   input ( 'how old are you?' )  print ( f 'you are  {age}  years old' )           how old are you?8\nyou are 8 years old      \nLet's try another example. We will we ask for the base and height of a triangle and print back the area of the triangle to back to the user.   There is a problem with the approach below. The code block does not run becuase a common error is present.   In\u00a0[3]:  \n      b   =   input ( 'base of triangle: ' )  h   =   input ( 'height of triangle: ' )  A   =   ( 1 / 2 ) b h  print ( f 'The area of the triangle is:  {A} ' )           base of triangle: 5\nheight of triangle: 2        ---------------------------------------------------------------------------  TypeError                                  Traceback (most recent call last) <ipython-input-3-c9cb8f02e604>  in  <module> ()        1  b  =  input ( 'base of triangle: ' )        2  h  =  input ( 'height of triangle: ' )  ----> 3   A  =   ( 1 / 2 ) * b * h       4  print ( f'The area of the triangle is: {A}' )  TypeError : can't multiply sequence by non-int of type 'float'      \nThe previous section of code returns an error because of the data type of the variables  b  and  h . To investigate the data type, we can use Python's  type()  function.   In\u00a0[4]:  \n      b   =   input ( 'base of triangle: ' )  h   =   input ( 'height of triangle: ' )  print ( f 'b and h are of type: {type(b)}, {type(h)}' )           base of triangle: 5\nheight of triangle: 2\nb and h are of type: <class 'str'>, <class 'str'>      \nNotice that both  b  and  h  are strings, even though the numbers  5  and  2  were entered as input. The output of the  input()  function is always a string, even if the user enters a number.   To complete the area calculation,  b  and  h  first need to be converted to floats using Python's  float()  function, then the mathematical operation will run without error:   In\u00a0[5]:  \n      b   =   input ( 'base of triangle: ' )  h   =   input ( 'height of triangle: ' )  A   =   ( 1 / 2 ) float ( b ) float ( h )  print ( f 'The area of the triangle is:  {A} ' )           base of triangle: 5\nheight of triangle: 2\nThe area of the triangle is: 5.0      \nThe concept of a selection statement is introduced the next section.",
            "title": "User Input"
        },
        {
            "location": "/07-If-Else-Try-Except/07.02-If-Statements/",
            "text": "If statements\n\n\nThe \nif-statement\n is one of the basic selection structures in Python. The syntax for a section of code that contains an if statement is below:\n\n\nif <logical_condition>:\n    <code to run>\n\n\n\n\nThe keyword \nif\n begins the statement. Following \nif\n, a logical condition must to be included. A logical condition is an variable or expression that can be evaluated as \nTrue\n or \nFalse\n. An example of a logical condition is \na<5\n. The logical condition \na<5\n returns \nTrue\n if \na\n is less than 5. Otherwise, if \na\n is 5 or greater \na<5\n returns \nFalse\n. Following the logical condition, a colon \n:\n is required. After the if-statement, a section of code to run when the condition is \nTrue\n is included. The section of \n<code to run>\n must be indented and every line in this section of code must be indented the same number of spaces. By convention, indentation is four spaces in Python. Most Python code editors, including Jupyter notebooks, indent code after if-statements automatically. \n\n\nThe section of code below demonstrates an if-statement in Python:\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\na\n \n=\n \n2\n\n\nif\n \na\n<\n5\n:\n\n    \nprint\n(\n'less than five'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nless than five\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the first line of code in the example above, the variable \na\n is assigned the value \n2\n. The second line of code is the if-statement. The if-statement starts with the keyword \nif\n and is followed by the logical condition \na<5\n and a colon \n:\n. The logical condition \na<5\n will return either \nTrue\n or \nFalse\n depending on the value of \na\n. Since \na=2\n, the logical condition \na<5\n evaluates as \nTrue\n. The line \nprint('less than five')\n is indented after the if-statement. The line of code including the \nprint()\n statement will run if the if-statement is \nTrue\n. Since the if-statement \nis\n \nTrue\n, the indented line \nprint('less than five')\n runs.  As a result of running these three lines of code, the user sees the text \nless than five\n.\n\n\nMultiple if statements\n\n\nIf-statements can be chained together one after another to create a programmatic flow. For example, the following code block utilizes three different if-statements, each if-statement is followed by an indented code block.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\na\n \n=\n \n2\n\n\nif\n \na\n<\n0\n:\n\n    \nprint\n(\n'is negative'\n)\n\n\nif\n \na\n \n==\n \n0\n:\n\n    \nprint\n(\n'is zero'\n)\n\n\nif\n \na\n>\n0\n:\n\n    \nprint\n(\n'is positive'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nis positive\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote how each if-statement is followed by a logical condition and a colon \n:\n. Also, note how the code below each if-statement is indented. With the code left-justified (not indented), all three code lines will run, and the output will be different. The \npass\n keyword is used as the code will not run unless at least one line of code is indented after the if-statement. \npass\n is a line of code that does nothing in Python.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\na\n \n=\n \n2\n\n\nif\n \na\n<\n0\n:\n\n    \npass\n\n\nprint\n(\n'a is negative'\n)\n\n\nif\n \na\n \n==\n \n0\n:\n\n    \npass\n\n\nprint\n(\n'a is zero'\n)\n\n\nif\n \na\n>\n0\n:\n\n    \npass\n\n\nprint\n(\n'a is positive'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na is negative\na is zero\na is positive",
            "title": "If statements"
        },
        {
            "location": "/07-If-Else-Try-Except/07.02-If-Statements/#if-statements",
            "text": "The  if-statement  is one of the basic selection structures in Python. The syntax for a section of code that contains an if statement is below:  if <logical_condition>:\n    <code to run>  The keyword  if  begins the statement. Following  if , a logical condition must to be included. A logical condition is an variable or expression that can be evaluated as  True  or  False . An example of a logical condition is  a<5 . The logical condition  a<5  returns  True  if  a  is less than 5. Otherwise, if  a  is 5 or greater  a<5  returns  False . Following the logical condition, a colon  :  is required. After the if-statement, a section of code to run when the condition is  True  is included. The section of  <code to run>  must be indented and every line in this section of code must be indented the same number of spaces. By convention, indentation is four spaces in Python. Most Python code editors, including Jupyter notebooks, indent code after if-statements automatically.   The section of code below demonstrates an if-statement in Python:   In\u00a0[1]:  \n      a   =   2  if   a < 5 : \n     print ( 'less than five' )           less than five      \nIn the first line of code in the example above, the variable  a  is assigned the value  2 . The second line of code is the if-statement. The if-statement starts with the keyword  if  and is followed by the logical condition  a<5  and a colon  : . The logical condition  a<5  will return either  True  or  False  depending on the value of  a . Since  a=2 , the logical condition  a<5  evaluates as  True . The line  print('less than five')  is indented after the if-statement. The line of code including the  print()  statement will run if the if-statement is  True . Since the if-statement  is   True , the indented line  print('less than five')  runs.  As a result of running these three lines of code, the user sees the text  less than five .",
            "title": "If statements"
        },
        {
            "location": "/07-If-Else-Try-Except/07.02-If-Statements/#multiple-if-statements",
            "text": "If-statements can be chained together one after another to create a programmatic flow. For example, the following code block utilizes three different if-statements, each if-statement is followed by an indented code block.   In\u00a0[2]:  \n      a   =   2  if   a < 0 : \n     print ( 'is negative' )  if   a   ==   0 : \n     print ( 'is zero' )  if   a > 0 : \n     print ( 'is positive' )           is positive      \nNote how each if-statement is followed by a logical condition and a colon  : . Also, note how the code below each if-statement is indented. With the code left-justified (not indented), all three code lines will run, and the output will be different. The  pass  keyword is used as the code will not run unless at least one line of code is indented after the if-statement.  pass  is a line of code that does nothing in Python.   In\u00a0[3]:  \n      a   =   2  if   a < 0 : \n     pass  print ( 'a is negative' )  if   a   ==   0 : \n     pass  print ( 'a is zero' )  if   a > 0 : \n     pass  print ( 'a is positive' )           a is negative\na is zero\na is positive",
            "title": "Multiple if statements"
        },
        {
            "location": "/07-If-Else-Try-Except/07.02-Selection-Statements/",
            "text": "Selection Statements\n\n\nSelection statements are used in programming to decide or select particular blocks of code to run based on a defined logical condition.  The primary selection statements in Python are:\n\n\n\n\nif\n\n\nelse\n\n\nelif\n\n\ntry\n\n\nexcept\n\n\n\n\nSo far in this text, all of the Python code has either been strictly linear or linear and include functions. A strictly linear program is a program that runs top to bottom. Every line of code in a linear program runs. In a linear program with functions, the program still runs head to base, but the program takes side excursions to execute functions on the way down. \n\n\nIf this next couple chapters, you learn to write programs non-linearly. Non-linear programs do not run every line of code top to bottom. In non-linear programs, sections of code may not run based on selection statements like \nif\n and \ntry\n. Non-linear programs can include loops. Inside loops are sections of code that run multiple times. Loops are defined by repetition structures like \nfor loops\n and \nwhile loops\n. \n\n\nTo start our discussion of non-linear programs, we will begin with \nif statements\n.",
            "title": "Selection Statements"
        },
        {
            "location": "/07-If-Else-Try-Except/07.02-Selection-Statements/#selection-statements",
            "text": "Selection statements are used in programming to decide or select particular blocks of code to run based on a defined logical condition.  The primary selection statements in Python are:   if  else  elif  try  except   So far in this text, all of the Python code has either been strictly linear or linear and include functions. A strictly linear program is a program that runs top to bottom. Every line of code in a linear program runs. In a linear program with functions, the program still runs head to base, but the program takes side excursions to execute functions on the way down.   If this next couple chapters, you learn to write programs non-linearly. Non-linear programs do not run every line of code top to bottom. In non-linear programs, sections of code may not run based on selection statements like  if  and  try . Non-linear programs can include loops. Inside loops are sections of code that run multiple times. Loops are defined by repetition structures like  for loops  and  while loops .   To start our discussion of non-linear programs, we will begin with  if statements .",
            "title": "Selection Statements"
        },
        {
            "location": "/07-If-Else-Try-Except/07.04-If-Else-Statements/",
            "text": "If Else Statements\n\n\nIf statements can include \nelse\n clauses. An \nelse\n clause is a section of code that runs if the if-statement is \nFalse\n.  If the if-statement is \nTrue\n, the code section under the else clause does not run. \n\n\nThe general form of an if / else statement is below:\n\n\nif <logical_condition>:\n    <code block 1>\nelse:\n    <code block 2>\n\n\n\n\nThe \nelse\n keyword needs to be on its own line and be at the same indentation level as the \nif\n keyword that the \nelse\n corresponds to. The keyword \nelse\n needs to be followed by a colon \n:\n. Any code that is included as part of the else statement must be indented the same amount. \n\n\nA sample if/else code section is below:\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\na\n \n=\n \n5\n\n\nif\n \na\n>\n10\n:\n\n    \nprint\n(\n'a is greater than 10'\n)\n\n\nelse\n:\n\n    \nprint\n(\n'a is less than 10'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na is less than 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSince \na=5\n assigns a value to \na\n that is less than 10, \na>10\n is \nFalse\n and the code under the \nif\n statement does not run. Therefore, the code under the \nelse\n statement does run, and \na is less than 10\n is printed. \n\n\nIf the value of \na\n is modified so that \na\n is greater than \n10\n, \na>10\n returns \nTrue\nthe code under the \nif\n statement \nwill\n run, and the code under the \nelse\n keyword \nwill not\n.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\na\n \n=\n \n20\n\n\nif\n \na\n>\n10\n:\n\n    \nprint\n(\n'a is greater than 10'\n)\n\n\nelse\n:\n\n    \nprint\n(\n'a is less than 10'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na is greater than 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nelif\n\n\nThe \nelse if\n statement can be added to an if statement to run different sections of code depending on which one of many conditions are \nTrue\n. The basic syntax of an else if section of code is:\n\n\nif <logical_condition>:\n    <code block 1>\nelif <logical_condition>:\n    <code block 2>\nelse:\n    <code block 3>\n\n\n\n\nThe keyword \nelif\n must be followed by a logical condition that evaluates as \nTrue\n or \nFalse\n followed by a colon \n:\n. The \n<code block>\n runs if the \nelif\n condition is \nTrue\n and is skipped if the \nelif\n condition is \nFalse\n.\n\n\nAn example section of code using \nif\n, \nelif\n and \nelse\n is below:\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\ncolor\n \n=\n \n'green'\n\n\nif\n \ncolor\n \n==\n \n'red'\n:\n\n    \nprint\n(\n'The color is red'\n)\n\n\nelif\n \ncolor\n \n==\n \n'green'\n:\n\n    \nprint\n(\n'The color is green'\n)\n\n\nelse\n:\n\n    \nprint\n(\n'The color is not red or green'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe color is green\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf we modify the code to assign the string \n'orange'\n to the variable \ncolor\n, the code under the \nif\n is not run, and the code under the \nelif\n is not run either. Only the code under the \nelse\n is executed.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\ncolor\n \n=\n \n'orange'\n\n\nif\n \ncolor\n \n==\n \n'red'\n:\n\n    \nprint\n(\n'The color is red'\n)\n\n\nelif\n \ncolor\n \n==\n \n'green'\n:\n\n    \nprint\n(\n'The color is green'\n)\n\n\nelse\n:\n\n    \nprint\n(\n'The color is not red or green'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe color is not red or green",
            "title": "If Else Statements"
        },
        {
            "location": "/07-If-Else-Try-Except/07.04-If-Else-Statements/#if-else-statements",
            "text": "If statements can include  else  clauses. An  else  clause is a section of code that runs if the if-statement is  False .  If the if-statement is  True , the code section under the else clause does not run.   The general form of an if / else statement is below:  if <logical_condition>:\n    <code block 1>\nelse:\n    <code block 2>  The  else  keyword needs to be on its own line and be at the same indentation level as the  if  keyword that the  else  corresponds to. The keyword  else  needs to be followed by a colon  : . Any code that is included as part of the else statement must be indented the same amount.   A sample if/else code section is below:   In\u00a0[2]:  \n      a   =   5  if   a > 10 : \n     print ( 'a is greater than 10' )  else : \n     print ( 'a is less than 10' )           a is less than 10      \nSince  a=5  assigns a value to  a  that is less than 10,  a>10  is  False  and the code under the  if  statement does not run. Therefore, the code under the  else  statement does run, and  a is less than 10  is printed.   If the value of  a  is modified so that  a  is greater than  10 ,  a>10  returns  True the code under the  if  statement  will  run, and the code under the  else  keyword  will not .    In\u00a0[3]:  \n      a   =   20  if   a > 10 : \n     print ( 'a is greater than 10' )  else : \n     print ( 'a is less than 10' )           a is greater than 10",
            "title": "If Else Statements"
        },
        {
            "location": "/07-If-Else-Try-Except/07.04-If-Else-Statements/#elif",
            "text": "The  else if  statement can be added to an if statement to run different sections of code depending on which one of many conditions are  True . The basic syntax of an else if section of code is:  if <logical_condition>:\n    <code block 1>\nelif <logical_condition>:\n    <code block 2>\nelse:\n    <code block 3>  The keyword  elif  must be followed by a logical condition that evaluates as  True  or  False  followed by a colon  : . The  <code block>  runs if the  elif  condition is  True  and is skipped if the  elif  condition is  False .  An example section of code using  if ,  elif  and  else  is below:   In\u00a0[4]:  \n      color   =   'green'  if   color   ==   'red' : \n     print ( 'The color is red' )  elif   color   ==   'green' : \n     print ( 'The color is green' )  else : \n     print ( 'The color is not red or green' )           The color is green      \nIf we modify the code to assign the string  'orange'  to the variable  color , the code under the  if  is not run, and the code under the  elif  is not run either. Only the code under the  else  is executed.   In\u00a0[5]:  \n      color   =   'orange'  if   color   ==   'red' : \n     print ( 'The color is red' )  elif   color   ==   'green' : \n     print ( 'The color is green' )  else : \n     print ( 'The color is not red or green' )           The color is not red or green",
            "title": "elif"
        },
        {
            "location": "/07-If-Else-Try-Except/07.05-Try-Except-Statements/",
            "text": "Try-Except Statements\n\n\nTry-except statements are another selection structure in Python. Like \nif\n, \nelif\n and \nelse\n statements, a try-except statements select a particular block of code to run based on a condition. Unlike \nif\n, \nelif\n and \nelse\n clauses, try-except blocks are not based on \nlogical conditions\n. Try-except blocks are based upon whether a line or section of code returns an error. \n\n\nTherefore, before we learn how to use try-except statements, we need to understand two types of errors in Python: syntax errors and exception errors.\n\n\nSyntax Errors and Exception Errors\n\n\nSyntax Errors\n\n\nA \nsyntax error\n is a type of error in Python that occur when the syntax in a line of code is not valid Python code. Syntax errors include quotes that are not closed and variable names that do not start with a letter.\n\n\nThe line of code below contains a syntax error. The string \n\"problem solving\n is missing a quotation mark \n\"\n.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nstring\n \n=\n \n\"problem solving\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  File \n\"<ipython-input-1-c1b051155f57>\"\n, line \n1\n\n\n    string = \"problem solving\n\n                            ^\n\nSyntaxError\n:\n EOL while scanning string literal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you encounter syntax errors in Python, the Python interpreter displays \nSyntaxError\n and often a cryptic message.\n\n\nEven if a line of code does not run when a program is executed, syntax errors in Python are not allowed. For instance, a line of code indented after the if-statement \nif 'a' == 'b:'\n will not be executed. But if the indented line of code contains a syntax error, the Python interpreter still flags the error as a syntax error and does not complete the program.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nif\n \n'a'\n \n==\n \n'b'\n:\n\n    \nstring\n \n=\n \n10\nproblems\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  File \n\"<ipython-input-2-a22f64681124>\"\n, line \n2\n\n\n    string = 10problems\n\n                      ^\n\nSyntaxError\n:\n invalid syntax\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nException Errors\n\n\nSyntax errors are lines of code that are not valid Python. Another type of error in Python is an \nexception error\n. Exception errors result when a \nvalid\n line of Python code \ncannot run\n.  Lines of code with exception errors contain \nvalid\n Python code, but the line of code still cannot run. \n\n\nFor example, the statement \nf = open('file.txt','r')\n is valid Python code. But if the file \nfile.txt\n does not exist, Python throws an exception error because  \nf = open('file.txt','r')\n code cannot be executed.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nf\n \n=\n \nopen\n(\n'file.txt'\n,\n'r'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---------------------------------------------------------------------------\n\n\nIOError\n                                   Traceback (most recent call last)\n\n<ipython-input-3-b0ee218ebbfc>\n in \n<module>\n()\n\n\n----> 1\n \nf \n=\n open\n(\n'file.txt'\n,\n'r'\n)\n\n\n\nIOError\n: [Errno 2] No such file or directory: 'file.txt'\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother valid line of Python code is \nprint(a[0])\n, but if \na\n is defined as an integer, \na\n can not be indexed and an exception error is shown.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\na\n \n=\n \n1\n\n\nprint\n(\na\n[\n5\n])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---------------------------------------------------------------------------\n\n\nTypeError\n                                 Traceback (most recent call last)\n\n<ipython-input-4-df093d7733e3>\n in \n<module>\n()\n\n\n      1\n a \n=\n \n1\n\n\n----> 2\n \nprint\n(\na\n[\n5\n]\n)\n\n\n\nTypeError\n: 'int' object has no attribute '__getitem__'\n\n\n\n\n\n\n\n\n\n\n\n\n\nTry except statements can be used to try run sections of Python code that \nmay\n return an exception error. The general syntax of a try except statement is below:\n\n\ntry:\n    <code to try>\nexcept:\n    <code to run instead>\n\n\n\n\nFor instance, if the file \nfile.txt\n does not exist, a line of code that tries to open \nfile.txt\n can be included in a \ntry\n statement.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\ntry\n:\n\n    \nf\n=\nopen\n(\n'file.txt'\n,\n'r'\n)\n\n\nexcept\n:\n\n    \nprint\n(\n'file does not exist'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfile does not exist\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSimilarly, we can wrap the code \na = 5\n and \nprint(a[0])\n in a try block and attempt to run it. If the line \na = 5\n and \nprint(a[0])\n throws an exception error, the code below \nexcept\n runs.\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\ntry\n:\n\n    \na\n \n=\n \n5\n\n    \nprint\n(\na\n[\n0\n])\n\n\nexcept\n:\n\n    \nprint\n(\n'variable a is not a list'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvariable a is not a list\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen the Python code in a try block does run and does not throw an exception error, the code in the \nexcept\n does not run.\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\ntry\n:\n\n    \na\n \n=\n \n'Solution'\n\n    \nprint\n(\na\n[\n0\n])\n\n\nexcept\n:\n\n    \nprint\n(\n'variable a is not a list'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS",
            "title": "Try-Except Statements"
        },
        {
            "location": "/07-If-Else-Try-Except/07.05-Try-Except-Statements/#try-except-statements",
            "text": "Try-except statements are another selection structure in Python. Like  if ,  elif  and  else  statements, a try-except statements select a particular block of code to run based on a condition. Unlike  if ,  elif  and  else  clauses, try-except blocks are not based on  logical conditions . Try-except blocks are based upon whether a line or section of code returns an error.   Therefore, before we learn how to use try-except statements, we need to understand two types of errors in Python: syntax errors and exception errors.",
            "title": "Try-Except Statements"
        },
        {
            "location": "/07-If-Else-Try-Except/07.05-Try-Except-Statements/#syntax-errors-and-exception-errors",
            "text": "",
            "title": "Syntax Errors and Exception Errors"
        },
        {
            "location": "/07-If-Else-Try-Except/07.05-Try-Except-Statements/#syntax-errors",
            "text": "A  syntax error  is a type of error in Python that occur when the syntax in a line of code is not valid Python code. Syntax errors include quotes that are not closed and variable names that do not start with a letter.  The line of code below contains a syntax error. The string  \"problem solving  is missing a quotation mark  \" .   In\u00a0[1]:  \n      string   =   \"problem solving              File  \"<ipython-input-1-c1b051155f57>\" , line  1      string = \"problem solving \n                            ^ SyntaxError :  EOL while scanning string literal      \nWhen you encounter syntax errors in Python, the Python interpreter displays  SyntaxError  and often a cryptic message.  Even if a line of code does not run when a program is executed, syntax errors in Python are not allowed. For instance, a line of code indented after the if-statement  if 'a' == 'b:'  will not be executed. But if the indented line of code contains a syntax error, the Python interpreter still flags the error as a syntax error and does not complete the program.   In\u00a0[2]:  \n      if   'a'   ==   'b' : \n     string   =   10 problems              File  \"<ipython-input-2-a22f64681124>\" , line  2      string = 10problems \n                      ^ SyntaxError :  invalid syntax",
            "title": "Syntax Errors"
        },
        {
            "location": "/07-If-Else-Try-Except/07.05-Try-Except-Statements/#exception-errors",
            "text": "Syntax errors are lines of code that are not valid Python. Another type of error in Python is an  exception error . Exception errors result when a  valid  line of Python code  cannot run .  Lines of code with exception errors contain  valid  Python code, but the line of code still cannot run.   For example, the statement  f = open('file.txt','r')  is valid Python code. But if the file  file.txt  does not exist, Python throws an exception error because   f = open('file.txt','r')  code cannot be executed.   In\u00a0[3]:  \n      f   =   open ( 'file.txt' , 'r' )            ---------------------------------------------------------------------------  IOError                                    Traceback (most recent call last) <ipython-input-3-b0ee218ebbfc>  in  <module> ()  ----> 1   f  =  open ( 'file.txt' , 'r' )  IOError : [Errno 2] No such file or directory: 'file.txt'      \nAnother valid line of Python code is  print(a[0]) , but if  a  is defined as an integer,  a  can not be indexed and an exception error is shown.   In\u00a0[4]:  \n      a   =   1  print ( a [ 5 ])            ---------------------------------------------------------------------------  TypeError                                  Traceback (most recent call last) <ipython-input-4-df093d7733e3>  in  <module> ()        1  a  =   1  ----> 2   print ( a [ 5 ] )  TypeError : 'int' object has no attribute '__getitem__'      \nTry except statements can be used to try run sections of Python code that  may  return an exception error. The general syntax of a try except statement is below:  try:\n    <code to try>\nexcept:\n    <code to run instead>  For instance, if the file  file.txt  does not exist, a line of code that tries to open  file.txt  can be included in a  try  statement.   In\u00a0[5]:  \n      try : \n     f = open ( 'file.txt' , 'r' )  except : \n     print ( 'file does not exist' )           file does not exist      \nSimilarly, we can wrap the code  a = 5  and  print(a[0])  in a try block and attempt to run it. If the line  a = 5  and  print(a[0])  throws an exception error, the code below  except  runs.   In\u00a0[6]:  \n      try : \n     a   =   5 \n     print ( a [ 0 ])  except : \n     print ( 'variable a is not a list' )           variable a is not a list      \nWhen the Python code in a try block does run and does not throw an exception error, the code in the  except  does not run.   In\u00a0[7]:  \n      try : \n     a   =   'Solution' \n     print ( a [ 0 ])  except : \n     print ( 'variable a is not a list' )           S",
            "title": "Exception Errors"
        },
        {
            "location": "/07-If-Else-Try-Except/07.06-Flowcharts/",
            "text": "Flowcharts\n\n\nFlowcharts graphically represent the flow of a program. There are four basic shapes used in a flow chart. Each shape has a specific use:\n\n\n\n\noval: start / end\n\n\nparallelogram: input / output\n\n\nrectangle: calculations\n\n\ndiamond: selection structures\n\n\n\n\n\n\nArrows connect the basic shapes in a flowchart. The shapes and arrows of a flowchart describe the flow of a program from start to end. Flowcharts typically flow from the top to the bottom or flow from the left to the right.\nBelow is the description of a simple program:\n\n\n\n\nThe program starts. Then the program prints out \"Output!\". Finally, the program ends.\n\n\n\n\nA flowchart that describes this simple program is below:\n\n\n\n\nThe Python code that corresponds to this flowchart is:\n\n\n# start\nprint(\"Output!\")\n# end\n\n\n\n\nA description of a program that includes a calculation is below:\n\n\n\n\nThe program starts. Next, the program asks a user for a number. Two is added to the number. Next, the resulting sum is printed. Finally, the program ends.\n\n\n\n\nA flowchart that describes this program is below:\n\n\n\n\nThe Python code that corresponds to this flow chart is:\n\n\n# start\nnum = input(\"Enter a number: \")\nnum = float(num)\nnum_plus_2 = num + 2\nprint(num_plus_2)\n# end\n\n\n\n\nThe description of another program is below:\n\n\n\n\nThe program starts. Next the program asks a user for a number. If the number is greater than zero, the program prints \"Greater than 0\", then the program ends.\n\n\n\n\nA flow chart that describes this program is below:\n\n\n\n\nThe Python code that corresponds to this flow chart is:\n\n\n# start\nnum = input(\"Enter a number: \")\nnum = float(num)\nif num>0:\n    print(\"Greater than 0\")\n# end\n\n\n\n\nThe description of a more complex program is below:\n\n\n\n\nThe program starts. Next, the program asks a user for a number. If the number is greater than zero, the program prints \"Greater than 0\". If the number is less than zero, the program prints \"Less than 0\". Then the program prints \"Done\" and the program ends.\n\n\n\n\nA flowchart that describes this program is below:\n\n\n\n\nThe Python code that corresponds to this flow chart is:\n\n\n# start\nnum = input('Enter a number: ')\nnum = float(num)\nif num>0:\n    print('num greater than zero')\nif num<0:\n    print('num less than zero')\nprint('Done')\n# end",
            "title": "Flowcharts"
        },
        {
            "location": "/07-If-Else-Try-Except/07.06-Flowcharts/#flowcharts",
            "text": "Flowcharts graphically represent the flow of a program. There are four basic shapes used in a flow chart. Each shape has a specific use:   oval: start / end  parallelogram: input / output  rectangle: calculations  diamond: selection structures    Arrows connect the basic shapes in a flowchart. The shapes and arrows of a flowchart describe the flow of a program from start to end. Flowcharts typically flow from the top to the bottom or flow from the left to the right.\nBelow is the description of a simple program:   The program starts. Then the program prints out \"Output!\". Finally, the program ends.   A flowchart that describes this simple program is below:   The Python code that corresponds to this flowchart is:  # start\nprint(\"Output!\")\n# end  A description of a program that includes a calculation is below:   The program starts. Next, the program asks a user for a number. Two is added to the number. Next, the resulting sum is printed. Finally, the program ends.   A flowchart that describes this program is below:   The Python code that corresponds to this flow chart is:  # start\nnum = input(\"Enter a number: \")\nnum = float(num)\nnum_plus_2 = num + 2\nprint(num_plus_2)\n# end  The description of another program is below:   The program starts. Next the program asks a user for a number. If the number is greater than zero, the program prints \"Greater than 0\", then the program ends.   A flow chart that describes this program is below:   The Python code that corresponds to this flow chart is:  # start\nnum = input(\"Enter a number: \")\nnum = float(num)\nif num>0:\n    print(\"Greater than 0\")\n# end  The description of a more complex program is below:   The program starts. Next, the program asks a user for a number. If the number is greater than zero, the program prints \"Greater than 0\". If the number is less than zero, the program prints \"Less than 0\". Then the program prints \"Done\" and the program ends.   A flowchart that describes this program is below:   The Python code that corresponds to this flow chart is:  # start\nnum = input('Enter a number: ')\nnum = float(num)\nif num>0:\n    print('num greater than zero')\nif num<0:\n    print('num less than zero')\nprint('Done')\n# end",
            "title": "Flowcharts"
        },
        {
            "location": "/07-If-Else-Try-Except/07.07-Summary/",
            "text": "Summary\n\n\nSelection structures in Python include \nif\n, \nelif\n, \nelse\n, \ntry\n and \nexcept\n. These selection structures allow certain blocks of code to run or not run based on logical conditions. Logical conditions are expressions or variables that can be evaluated as \nTrue\n or \nFalse\n.  You learned that Python uses indentation segment code after \nif\n, \nelif\n, and \nelse\n statements. The standard indentation in Python is four spaces.\n\n\nThe difference between syntax errors and exception errors was demonstrated in this chapter. \ntry\n/\nexcept\n blocks only check for exception errors. \n\n\nAt the end of the chapter, you learned how to use flowcharts to describe the flow of a program with four basic shapes and arrows.\n\n\nKey Terms and Concepts\n\n\nselection structures\n\n\nif\n\n\nlogical condition\n\n\nTrue\n\n\nFalse\n\n\nprogrammatic flow\n\n\nindentation\n\n\npass\n\n\nelse\n\n\nelse if\n\n\nelif\n\n\nexceptions\n\n\nsyntax error\n\n\nexception error\n\n\ntry\n\n\nexcept\n\n\nflow chart",
            "title": "Summary"
        },
        {
            "location": "/07-If-Else-Try-Except/07.07-Summary/#summary",
            "text": "Selection structures in Python include  if ,  elif ,  else ,  try  and  except . These selection structures allow certain blocks of code to run or not run based on logical conditions. Logical conditions are expressions or variables that can be evaluated as  True  or  False .  You learned that Python uses indentation segment code after  if ,  elif , and  else  statements. The standard indentation in Python is four spaces.  The difference between syntax errors and exception errors was demonstrated in this chapter.  try / except  blocks only check for exception errors.   At the end of the chapter, you learned how to use flowcharts to describe the flow of a program with four basic shapes and arrows.",
            "title": "Summary"
        },
        {
            "location": "/07-If-Else-Try-Except/07.07-Summary/#key-terms-and-concepts",
            "text": "selection structures  if  logical condition  True  False  programmatic flow  indentation  pass  else  else if  elif  exceptions  syntax error  exception error  try  except  flow chart",
            "title": "Key Terms and Concepts"
        },
        {
            "location": "/07-If-Else-Try-Except/07.08-Review-Questions/",
            "text": "Review Questions\n\n\nQ07.01 Create a program to ask a user for a temperature. If the temperature the user enters is below \n50\n, print back the user \"It is cold outside\". Hint: remember to convert the user's input to a number before comparing the user's input to \n50\n.\n\n\nQ07.02 Create a program that asks the user for their temperature. If the user enters a temperature above \n98.6\n, print back to the user \"You have a fever\".\n\n\nQ07.03 Create a program that chooses a random number number between 1 and 5. Ask the user for a number between 1 and 5. Compare the user's number to the random number. If the user guessed the random number print \"you guessed it!\", if the user did not guess the random number print back to the user \"try again\". You can use the code below to choose a random number \nn\n between 1 and 5.\n\n\nimport random\n\nn = random.randint(0,5)\n\n\n\n\nQ07.04 Create a program that asks a user for two numbers, x and y. If the x is greater than y, print back to the user \"x>y\". If x is less than y, print back to the user \"x<y\". If x is equal to y, print back to the user \"x=y\".\n\n\nQ07.05 Create a program that asks a user for one of three trig functions: sine, cosine or tangent. Calculate the sine, cosine or tangent of \n\\pi/4\n\\pi/4\n depending on the user's input and print the result of the calculation back to the user.\n\n\nQ07.06 Create a program that asks the user for two numbers (use two different input lines). If the second number the user enters is zero, print back to the user \"can't divide by zero\", otherwise divide the user's first number by the user's second number and print the result to the user.\n\n\nQ07.07 The table below shows a couple fruits and their associated color\n\n\n\n\n\n\n\n\nfruit\n\n\ncolor\n\n\n\n\n\n\n\n\n\n\nbanana\n\n\nyellow\n\n\n\n\n\n\napple\n\n\nred\n\n\n\n\n\n\nlemon\n\n\nyellow\n\n\n\n\n\n\nlime\n\n\ngreen\n\n\n\n\n\n\norange\n\n\norange\n\n\n\n\n\n\n\n\nCreate a program that asks a user to choose from a list of fruit. Print back to the user the color of the fruit they chose.\n\n\nQ07.08 The average size of a US congressional district is about 700,000 people. Ask the user for a state population and print back to the user the number of congress members in the state. For example, a state with 1.4 million people is represented by 2 members of congress. Each state has at least one member of congress by default. If the user enters a population less than \n700,000\n, tell the user their state only has 1 member of congress.\n\n\nQ07.08 In a college engineering class, final grades are related to percentages as follows:\n\n\n\n\n\n\n\n\npercentage range\n\n\ngrade\n\n\n\n\n\n\n\n\n\n\n90 - 100\n\n\nA\n\n\n\n\n\n\n80 - 89\n\n\nB\n\n\n\n\n\n\n70 - 79\n\n\nC\n\n\n\n\n\n\n65 - 69\n\n\nD\n\n\n\n\n\n\n0 - 64\n\n\nF\n\n\n\n\n\n\n\n\nBuild a program that asks a user for a final score (in percent) and prints back to the user their letter grade.\n\n\nErrors, Explanations, and Solutions\n\n\nRun the following code snippets. Explain the error in your own words. Rewrite the code snippet to solve the error.\n\n\nQ07.80\n\n\na = 1\nif a = 0:\n    print('zero')\nelse if a = 1:\n    print('one')\n\n\n\n\nQ07.81\n\n\na = 1\nif a == 0:\n    print('zero')\n\nelse print('one')\n\n\n\n\nQ07.82\n\n\nn = input('Enter a number')\n\nif n > 0:\n    print('positive')",
            "title": "Review Questions"
        },
        {
            "location": "/07-If-Else-Try-Except/07.08-Review-Questions/#review-questions",
            "text": "Q07.01 Create a program to ask a user for a temperature. If the temperature the user enters is below  50 , print back the user \"It is cold outside\". Hint: remember to convert the user's input to a number before comparing the user's input to  50 .  Q07.02 Create a program that asks the user for their temperature. If the user enters a temperature above  98.6 , print back to the user \"You have a fever\".  Q07.03 Create a program that chooses a random number number between 1 and 5. Ask the user for a number between 1 and 5. Compare the user's number to the random number. If the user guessed the random number print \"you guessed it!\", if the user did not guess the random number print back to the user \"try again\". You can use the code below to choose a random number  n  between 1 and 5.  import random\n\nn = random.randint(0,5)  Q07.04 Create a program that asks a user for two numbers, x and y. If the x is greater than y, print back to the user \"x>y\". If x is less than y, print back to the user \"x<y\". If x is equal to y, print back to the user \"x=y\".  Q07.05 Create a program that asks a user for one of three trig functions: sine, cosine or tangent. Calculate the sine, cosine or tangent of  \\pi/4 \\pi/4  depending on the user's input and print the result of the calculation back to the user.  Q07.06 Create a program that asks the user for two numbers (use two different input lines). If the second number the user enters is zero, print back to the user \"can't divide by zero\", otherwise divide the user's first number by the user's second number and print the result to the user.  Q07.07 The table below shows a couple fruits and their associated color     fruit  color      banana  yellow    apple  red    lemon  yellow    lime  green    orange  orange     Create a program that asks a user to choose from a list of fruit. Print back to the user the color of the fruit they chose.  Q07.08 The average size of a US congressional district is about 700,000 people. Ask the user for a state population and print back to the user the number of congress members in the state. For example, a state with 1.4 million people is represented by 2 members of congress. Each state has at least one member of congress by default. If the user enters a population less than  700,000 , tell the user their state only has 1 member of congress.  Q07.08 In a college engineering class, final grades are related to percentages as follows:     percentage range  grade      90 - 100  A    80 - 89  B    70 - 79  C    65 - 69  D    0 - 64  F     Build a program that asks a user for a final score (in percent) and prints back to the user their letter grade.",
            "title": "Review Questions"
        },
        {
            "location": "/07-If-Else-Try-Except/07.08-Review-Questions/#errors-explanations-and-solutions",
            "text": "Run the following code snippets. Explain the error in your own words. Rewrite the code snippet to solve the error.  Q07.80  a = 1\nif a = 0:\n    print('zero')\nelse if a = 1:\n    print('one')  Q07.81  a = 1\nif a == 0:\n    print('zero')\n\nelse print('one')  Q07.82  n = input('Enter a number')\n\nif n > 0:\n    print('positive')",
            "title": "Errors, Explanations, and Solutions"
        },
        {
            "location": "/08-Loops/08.00-Introduction/",
            "text": "Loops\n\n\nIntroduction\n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nuse a while loop \n\n\n\n\n\n\nuse a for loop\n\n\n\n\n\n\nuse the break statement\n\n\n\n\n\n\nuse the continue statement\n\n\n\n\n\n\nconstruct flowcharts that describe programs with loops",
            "title": "Introduction"
        },
        {
            "location": "/08-Loops/08.00-Introduction/#loops",
            "text": "",
            "title": "Loops"
        },
        {
            "location": "/08-Loops/08.00-Introduction/#introduction",
            "text": "By the end of this chapter you will be able to:    use a while loop     use a for loop    use the break statement    use the continue statement    construct flowcharts that describe programs with loops",
            "title": "Introduction"
        },
        {
            "location": "/08-Loops/08.01-For-Loops/",
            "text": "For Loops\n\n\nIn this chapter, you will learn about two kinds of repetition structures in Python: \nfor loops\n and \nwhile loops\n. This section describes for loops.\n\n\nFor Loops\n are a component of many programming languages. A \nFor Loop\n is a repetition structure where a section of code runs a specified number of times. \n\n\nSay we want to print out the statements:\n\n\nProblem solving in teams\nProblem solving in teams\nProblem solving in teams\n\n\n\n\nOne way to accomplish this task is by coding three print statements in a row:\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nprint\n(\n'Problem solving in teams'\n)\n\n\nprint\n(\n'Problem solving in teams'\n)\n\n\nprint\n(\n'Problem solving in teams'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem solving in teams\nProblem solving in teams\nProblem solving in teams\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother way to accomplish the same task is to use a for loop. The basic structure of a for loop in Python is below:\n\n\nfor <var> in range(<num>):\n    <code>\n\n\n\n\n\nWhere \n<var>\n can be any variable, \nrange(<num>)\n is the number of times the for loop runs and \n<code>\n are the lines of code that execute each time the for loop runs. Note the for loop starts with the keyword \nfor\n and includes a colon \n:\n. Both \nfor\n and the colon \n:\n are required. Also, note \n<code>\n is indented. Each line of code that runs as part of the for loop needs to be indented the same number of spaces. Standard indentation in Python is four spaces. \n\n\nThe example above can be rewritten using a for loop:\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nfor\n \ni\n \nin\n \nrange\n(\n3\n):\n\n    \nprint\n(\n'Problem solving in teams'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem solving in teams\nProblem solving in teams\nProblem solving in teams\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange()\n function\n\n\nPython's \nrange()\n function returns an iterable list of values starting at zero and ending at \nn-1\n. For example, when \nrange(3)\n is called, the values \n0, 1, 2\n are returned. Note \n3\n is not part of the output, even though the function input was \nrange(3)\n. We can be confirm the behavior of \nrange()\n with a for loop:\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nfor\n \ni\n \nin\n \nrange\n(\n3\n):\n\n    \nprint\n(\ni\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustomizing \nrange()\n\n\nPython's \nrange()\n function can be customized by supplying up to three arguments. The general format of the range function is below:\n\n\nrange(start,stop,step)\n\n\n\n\nWhen \nrange(3)\n is called, it produces the same output as \nrange(0,3,1)\n (\nstart=0\n,\nstop=3\n,\nstep=1\n). Remember Python counting starts at \n0\n and ends at \nn-1\n. If only two arguments are supplied, as in \nrange(0,3)\n, a \nstep=1\n is assumed.\n\n\nThe table below includes examples of the Python's \nrange()\n function and the associated output.\n\n\n\n\n\n\n\n\nrange()\n function\n\n\noutput\n\n\n\n\n\n\n\n\n\n\nrange(3)\n\n\n0, 1, 2\n\n\n\n\n\n\nrange(0,3)\n\n\n0, 1, 2\n\n\n\n\n\n\nrange(0,3,1)\n\n\n0, 1, 2\n\n\n\n\n\n\nrange(2,7,2)\n\n\n2, 4, 6\n\n\n\n\n\n\nrange(0,-5,-1)\n\n\n0, -1, -2, -3, -4\n\n\n\n\n\n\nrange(2,-3,1)\n\n\n(no output)\n\n\n\n\n\n\n\n\nA code section that uses a for loop and \nrange()\n with three arguments is below:\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nfor\n \ni\n \nin\n \nrange\n(\n5\n,\n9\n,\n1\n):\n\n    \nprint\n(\ni\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n6\n7\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor loops with lists\n\n\nFor loops can also be run using lists. If a list is used, the loop will run as many times as there are items in the list. The general syntax is:\n\n\nfor <var> in <list>:\n    <code>\n\n\n\n\nWhere \n<var>\n is a variable name assigned to the item in the list and \n<list>\n is the list object. Remember to include a colon \n:\n after the list.  \n<code>\n is the programming code that runs for each item in the list. \n\n\nAn example of a list in a for loop is  below:\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nmy_list\n \n=\n \n[\n'electrical'\n,\n'civil'\n,\n'mechanical'\n]\n\n\nfor\n \nitem\n \nin\n \nmy_list\n:\n\n    \nprint\n(\nitem\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nelectrical\ncivil\nmechanical\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe loop ran three times because there are three items in the list. Each time through the loop, the variable \nitem\n is set to one of the items in the list.\n\n\n\n\nfirst time through the loop, \nitem='electrical'\n\n\nsecond time through the loop \nitem='mechanical'\n \n\n\nthird time through the loop \nitem='civil'\n. \n\n\n\n\nFor loops with strings\n\n\nFor loops can also be run using strings. In Python, strings can be indexed just like lists. A loop defined by a string runs as many times as there are characters in the string. The general structure a for loop using a string is:\n\n\nfor <char> in <string>:\n    <code>\n\n\n\n\nWhere \n<char>\n is one of the characters in the string \n<string>\n. Just like for loops with \nrange()\n and for loops with lists, make sure to include a colon \n:\n after the list.  \n<code>\n is the programming code that runs for each character in the string. \n<code>\n needs to be indented\n\n\nAn example of a string in a for loop is below:\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nfor\n \nletter\n \nin\n \n\"Gabby\"\n:\n\n    \nprint\n(\nf\n\"looping over letters in name: \n{letter}\n\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlooping over letters in name: G\nlooping over letters in name: a\nlooping over letters in name: b\nlooping over letters in name: b\nlooping over letters in name: y",
            "title": "For Loops"
        },
        {
            "location": "/08-Loops/08.01-For-Loops/#for-loops",
            "text": "In this chapter, you will learn about two kinds of repetition structures in Python:  for loops  and  while loops . This section describes for loops.  For Loops  are a component of many programming languages. A  For Loop  is a repetition structure where a section of code runs a specified number of times.   Say we want to print out the statements:  Problem solving in teams\nProblem solving in teams\nProblem solving in teams  One way to accomplish this task is by coding three print statements in a row:   In\u00a0[1]:  \n      print ( 'Problem solving in teams' )  print ( 'Problem solving in teams' )  print ( 'Problem solving in teams' )           Problem solving in teams\nProblem solving in teams\nProblem solving in teams      \nAnother way to accomplish the same task is to use a for loop. The basic structure of a for loop in Python is below:  for <var> in range(<num>):\n    <code>  Where  <var>  can be any variable,  range(<num>)  is the number of times the for loop runs and  <code>  are the lines of code that execute each time the for loop runs. Note the for loop starts with the keyword  for  and includes a colon  : . Both  for  and the colon  :  are required. Also, note  <code>  is indented. Each line of code that runs as part of the for loop needs to be indented the same number of spaces. Standard indentation in Python is four spaces.   The example above can be rewritten using a for loop:   In\u00a0[2]:  \n      for   i   in   range ( 3 ): \n     print ( 'Problem solving in teams' )           Problem solving in teams\nProblem solving in teams\nProblem solving in teams",
            "title": "For Loops"
        },
        {
            "location": "/08-Loops/08.01-For-Loops/#range-function",
            "text": "Python's  range()  function returns an iterable list of values starting at zero and ending at  n-1 . For example, when  range(3)  is called, the values  0, 1, 2  are returned. Note  3  is not part of the output, even though the function input was  range(3) . We can be confirm the behavior of  range()  with a for loop:   In\u00a0[3]:  \n      for   i   in   range ( 3 ): \n     print ( i )           0\n1\n2",
            "title": "range() function"
        },
        {
            "location": "/08-Loops/08.01-For-Loops/#customizing-range",
            "text": "Python's  range()  function can be customized by supplying up to three arguments. The general format of the range function is below:  range(start,stop,step)  When  range(3)  is called, it produces the same output as  range(0,3,1)  ( start=0 , stop=3 , step=1 ). Remember Python counting starts at  0  and ends at  n-1 . If only two arguments are supplied, as in  range(0,3) , a  step=1  is assumed.  The table below includes examples of the Python's  range()  function and the associated output.     range()  function  output      range(3)  0, 1, 2    range(0,3)  0, 1, 2    range(0,3,1)  0, 1, 2    range(2,7,2)  2, 4, 6    range(0,-5,-1)  0, -1, -2, -3, -4    range(2,-3,1)  (no output)     A code section that uses a for loop and  range()  with three arguments is below:   In\u00a0[4]:  \n      for   i   in   range ( 5 , 9 , 1 ): \n     print ( i )           5\n6\n7\n8",
            "title": "Customizing range()"
        },
        {
            "location": "/08-Loops/08.01-For-Loops/#for-loops-with-lists",
            "text": "For loops can also be run using lists. If a list is used, the loop will run as many times as there are items in the list. The general syntax is:  for <var> in <list>:\n    <code>  Where  <var>  is a variable name assigned to the item in the list and  <list>  is the list object. Remember to include a colon  :  after the list.   <code>  is the programming code that runs for each item in the list.   An example of a list in a for loop is  below:   In\u00a0[5]:  \n      my_list   =   [ 'electrical' , 'civil' , 'mechanical' ]  for   item   in   my_list : \n     print ( item )           electrical\ncivil\nmechanical      \nThe loop ran three times because there are three items in the list. Each time through the loop, the variable  item  is set to one of the items in the list.   first time through the loop,  item='electrical'  second time through the loop  item='mechanical'    third time through the loop  item='civil' .",
            "title": "For loops with lists"
        },
        {
            "location": "/08-Loops/08.01-For-Loops/#for-loops-with-strings",
            "text": "For loops can also be run using strings. In Python, strings can be indexed just like lists. A loop defined by a string runs as many times as there are characters in the string. The general structure a for loop using a string is:  for <char> in <string>:\n    <code>  Where  <char>  is one of the characters in the string  <string> . Just like for loops with  range()  and for loops with lists, make sure to include a colon  :  after the list.   <code>  is the programming code that runs for each character in the string.  <code>  needs to be indented  An example of a string in a for loop is below:   In\u00a0[6]:  \n      for   letter   in   \"Gabby\" : \n     print ( f \"looping over letters in name:  {letter} \" )           looping over letters in name: G\nlooping over letters in name: a\nlooping over letters in name: b\nlooping over letters in name: b\nlooping over letters in name: y",
            "title": "For loops with strings"
        },
        {
            "location": "/08-Loops/08.02-While-Loops/",
            "text": "While Loops\n\n\nA \nwhile loop\n is a type of loop that runs as long as a logical condition is \nTrue\n. When the logical condition becomes \nFalse\n, the loop stops running. The general form of a while loop in Python is below:\n\n\nwhile <logical_condition>:\n    <code>\n\n\n\n\nThe keyword \nwhile\n must be included, as well as a \n<logical_condition>\n which can be evaluated as \nTrue\n or \nFalse\n. The \n<code>\n after the while statement must be indented. Each line of code runs in the while loop needs to be indented the same number of spaces. (Many code editors, including Jupyter notebooks, auto-indent after a while loop statement) If you add indentation manually, four space spaces is the Python standard.\n\n\nAn example of a while loop is below:\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\ni\n \n=\n \n0\n\n\nwhile\n \ni\n<\n4\n:\n\n    \nprint\n(\ni\n)\n\n    \ni\n \n=\n \ni\n+\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe first line \ni=0\n creates the variable \ni\n and assigns it the value \n0\n. The next line declares the logical condition needed to keep the loop running. The statement \ni<4\n is \nTrue\n or \nFalse\n depending on the variable \ni\n. Since \ni=0\n, the statement \ni<4\n is \nTrue\n and the while loop starts to run. The code inside while the loop prints the value of \ni\n then increases \ni\n by \n1\n. When \ni=4\n, the statement \ni<4\n is \nFalse\n and the while loop ends.\n\n\nUsing a while loop to validate user input\n\n\nWhile loops can be used to validate user input. Say you want to insist that a user inputs positive number. You can code this into a while loop that keeps repeating \n'Enter a positive number: '\n until the user enters valid input. \n\n\nThe code below continues to ask a user for a positive number until a positive number is entered. \n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nnum_input\n \n=\n \n-\n1\n\n\nwhile\n \nnum_input\n \n<\n \n0\n:\n\n    \nstr_input\n \n=\n \ninput\n(\n'Enter a positive number: '\n)\n\n    \nnum_input\n \n=\n \nfloat\n(\nstr_input\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnter a positive number: -1\nEnter a positive number: 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the section of code above, it is important to initialize the variable \nnum_input\n with a value that causes the statement \nnum_input < 0\n to evaluate as \nTrue\n. \nnum_input = -1\n causes the statement \nnum_input < 0\n to evaluate as \nTrue\n. Besides \nnum_input = -1\n, any other negative number would have worked.  If the while statement can't be evaluated as \nTrue\n or \nFalse\n, Python throws an error. Therefore, it is necessary to convert the user's input from a string to a float. The statement \n'5' < 0\n does not evaluate to \nTrue\n or \nFalse\n, because the string \n'5'\n can't be compared to the number \n0\n.",
            "title": "While Loops"
        },
        {
            "location": "/08-Loops/08.02-While-Loops/#while-loops",
            "text": "A  while loop  is a type of loop that runs as long as a logical condition is  True . When the logical condition becomes  False , the loop stops running. The general form of a while loop in Python is below:  while <logical_condition>:\n    <code>  The keyword  while  must be included, as well as a  <logical_condition>  which can be evaluated as  True  or  False . The  <code>  after the while statement must be indented. Each line of code runs in the while loop needs to be indented the same number of spaces. (Many code editors, including Jupyter notebooks, auto-indent after a while loop statement) If you add indentation manually, four space spaces is the Python standard.  An example of a while loop is below:   In\u00a0[1]:  \n      i   =   0  while   i < 4 : \n     print ( i ) \n     i   =   i + 1           0\n1\n2\n3      \nThe first line  i=0  creates the variable  i  and assigns it the value  0 . The next line declares the logical condition needed to keep the loop running. The statement  i<4  is  True  or  False  depending on the variable  i . Since  i=0 , the statement  i<4  is  True  and the while loop starts to run. The code inside while the loop prints the value of  i  then increases  i  by  1 . When  i=4 , the statement  i<4  is  False  and the while loop ends.",
            "title": "While Loops"
        },
        {
            "location": "/08-Loops/08.02-While-Loops/#using-a-while-loop-to-validate-user-input",
            "text": "While loops can be used to validate user input. Say you want to insist that a user inputs positive number. You can code this into a while loop that keeps repeating  'Enter a positive number: '  until the user enters valid input.   The code below continues to ask a user for a positive number until a positive number is entered.    In\u00a0[2]:  \n      num_input   =   - 1  while   num_input   <   0 : \n     str_input   =   input ( 'Enter a positive number: ' ) \n     num_input   =   float ( str_input )           Enter a positive number: -1\nEnter a positive number: 5      \nIn the section of code above, it is important to initialize the variable  num_input  with a value that causes the statement  num_input < 0  to evaluate as  True .  num_input = -1  causes the statement  num_input < 0  to evaluate as  True . Besides  num_input = -1 , any other negative number would have worked.  If the while statement can't be evaluated as  True  or  False , Python throws an error. Therefore, it is necessary to convert the user's input from a string to a float. The statement  '5' < 0  does not evaluate to  True  or  False , because the string  '5'  can't be compared to the number  0 .",
            "title": "Using a while loop to validate user input"
        },
        {
            "location": "/08-Loops/08.03-Break-and-Continue/",
            "text": "Break and Continue\n\n\nBreak\n and \ncontinue\n are two ways to modify the behavior of a for loop or while loop.\n\n\nBreak\n\n\nIn Python, the keyword \nbreak\n causes the program to exit a loop early. \nbreak\n causes the program to jump out of for loops even if the for loop hasn't run the specified number of times.\nbreak\n causes the program to jump out of while loops even if the logical condition that defines the loop is still \nTrue\n.\n\n\nAn example using \nbreak\n in a for loop is below.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nfor\n \ni\n \nin\n \nrange\n(\n100\n):\n\n    \nprint\n(\ni\n)\n\n    \nif\n \ni\n \n==\n \n3\n:\n\n        \nbreak\n\n\nprint\n(\n'Loop exited'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\nLoop exited\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen the loop hits \ni=3\n, \nbreak\n is encountered and the program exits the loop. \n\n\nAn example using \nbreak\n in a while loop is below.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nwhile\n \nTrue\n:\n\n    \nout\n \n=\n \ninput\n(\n'type q to exit the loop: '\n)\n\n    \nif\n \nout\n \n==\n \n'q'\n:\n\n        \nbreak\n\n\nprint\n(\n'Loop exited'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype q to exit the loop: 1\ntype q to exit the loop: 2\ntype q to exit the loop: q\nLoop exited\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nContinue\n\n\nIn Python, the keyword \ncontinue\n causes the program to stop running code in a loop and start back at the top of the loop. Remember the keyword \nbreak\n cause the program to \nexit\n a loop. \ncontinue\n is similar, but \ncontinue\n causes the program to stop the \ncurrent iteration\n of the loop and \nstart the next iteration at the top\n of the loop.\n\n\nA code section that uses \ncontinue\n in a for loop is below.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nfor\n \ni\n \nin\n \nrange\n(\n4\n):\n\n    \nif\n \ni\n==\n2\n:\n\n        \ncontinue\n\n    \nprint\n(\ni\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen the code section is run, the number \n2\n is not printed. This is because when \ni=2\n the program hits the  \ncontinue\n statement. Therefore, the line \nprint(i)\n isn't run when \ni=2\n. Then the program starts back up to the start of the loop with the next number \ni=3\n.",
            "title": "Break and Continue"
        },
        {
            "location": "/08-Loops/08.03-Break-and-Continue/#break-and-continue",
            "text": "Break  and  continue  are two ways to modify the behavior of a for loop or while loop.",
            "title": "Break and Continue"
        },
        {
            "location": "/08-Loops/08.03-Break-and-Continue/#break",
            "text": "In Python, the keyword  break  causes the program to exit a loop early.  break  causes the program to jump out of for loops even if the for loop hasn't run the specified number of times. break  causes the program to jump out of while loops even if the logical condition that defines the loop is still  True .  An example using  break  in a for loop is below.   In\u00a0[1]:  \n      for   i   in   range ( 100 ): \n     print ( i ) \n     if   i   ==   3 : \n         break  print ( 'Loop exited' )           0\n1\n2\n3\nLoop exited      \nWhen the loop hits  i=3 ,  break  is encountered and the program exits the loop.   An example using  break  in a while loop is below.   In\u00a0[2]:  \n      while   True : \n     out   =   input ( 'type q to exit the loop: ' ) \n     if   out   ==   'q' : \n         break  print ( 'Loop exited' )           type q to exit the loop: 1\ntype q to exit the loop: 2\ntype q to exit the loop: q\nLoop exited",
            "title": "Break"
        },
        {
            "location": "/08-Loops/08.03-Break-and-Continue/#continue",
            "text": "In Python, the keyword  continue  causes the program to stop running code in a loop and start back at the top of the loop. Remember the keyword  break  cause the program to  exit  a loop.  continue  is similar, but  continue  causes the program to stop the  current iteration  of the loop and  start the next iteration at the top  of the loop.  A code section that uses  continue  in a for loop is below.   In\u00a0[3]:  \n      for   i   in   range ( 4 ): \n     if   i == 2 : \n         continue \n     print ( i )           0\n1\n3      \nWhen the code section is run, the number  2  is not printed. This is because when  i=2  the program hits the   continue  statement. Therefore, the line  print(i)  isn't run when  i=2 . Then the program starts back up to the start of the loop with the next number  i=3 .",
            "title": "Continue"
        },
        {
            "location": "/08-Loops/08.04-Flowcharts-Describing-Loops/",
            "text": "Flowcharts Describing Loops\n\n\nFlowcharts show the flow of a program graphically. Flow charts were introduced in the previous chapter to describe how a programs that include \nif\n statements are illustrated graphically.\n\n\nThis chapter is about \nloops\n. Flowcharts can also be used to describe programs which contain \nfor loops\n and \nwhile loops\n.\n\n\nBasic Flow Chart Shapes\n\n\nLet's review the four basic flowchart shapes. Each shape represents a different type of operation.\n\n\n\n\noval: start and end\n\n\nparallelogram: input and output\n\n\nrectangle: calculations\n\n\ndiamond: selection structures\n\n\n\n\n\n\nThe basic shapes in a flowchart are connected by arrows. The shapes and arrows in a flowchart represent the flow of a program from start to end.\n\n\nFlowchart of a program that contains a for loop\n\n\nBelow is the description of a program that can be coded with a for loop:\n\n\n\n\nThe program starts. The program prints the word \"looping\" 10 times. Finally, the program ends.\n\n\n\n\nA flowchart that describes this program is below:\n\n\n\n\nThe Python code that corresponds to this flowchart is:\n\n\n# start\nfor i in range(10):\n    print(\"looping\")\n# end\n\n\n\n\nFlowchart of a program that contains a while loop\n\n\nBelow is the description of a program which can be coded with a while loop:\n\n\n\n\nThe program starts. The program asks the user for a positive number. If the number the user enters is negative, the program asks the user for a positive number again. If the number the user enters is positive, the program prints \"positive\". Finally, the program ends.\n\n\n\n\nA flowchart that describes this program is below:\n\n\n\n\nThe Python code that corresponds to this flow chart is:\n\n\n# start\nnum = -1\nwhile num < 0:\n    num = input(\"Enter a positive number: \")\n    num = float(num)\nprint(\"positive\")\n# end",
            "title": "Flowcharts Describing Loops"
        },
        {
            "location": "/08-Loops/08.04-Flowcharts-Describing-Loops/#flowcharts-describing-loops",
            "text": "Flowcharts show the flow of a program graphically. Flow charts were introduced in the previous chapter to describe how a programs that include  if  statements are illustrated graphically.  This chapter is about  loops . Flowcharts can also be used to describe programs which contain  for loops  and  while loops .",
            "title": "Flowcharts Describing Loops"
        },
        {
            "location": "/08-Loops/08.04-Flowcharts-Describing-Loops/#basic-flow-chart-shapes",
            "text": "Let's review the four basic flowchart shapes. Each shape represents a different type of operation.   oval: start and end  parallelogram: input and output  rectangle: calculations  diamond: selection structures    The basic shapes in a flowchart are connected by arrows. The shapes and arrows in a flowchart represent the flow of a program from start to end.",
            "title": "Basic Flow Chart Shapes"
        },
        {
            "location": "/08-Loops/08.04-Flowcharts-Describing-Loops/#flowchart-of-a-program-that-contains-a-for-loop",
            "text": "Below is the description of a program that can be coded with a for loop:   The program starts. The program prints the word \"looping\" 10 times. Finally, the program ends.   A flowchart that describes this program is below:   The Python code that corresponds to this flowchart is:  # start\nfor i in range(10):\n    print(\"looping\")\n# end",
            "title": "Flowchart of a program that contains a for loop"
        },
        {
            "location": "/08-Loops/08.04-Flowcharts-Describing-Loops/#flowchart-of-a-program-that-contains-a-while-loop",
            "text": "Below is the description of a program which can be coded with a while loop:   The program starts. The program asks the user for a positive number. If the number the user enters is negative, the program asks the user for a positive number again. If the number the user enters is positive, the program prints \"positive\". Finally, the program ends.   A flowchart that describes this program is below:   The Python code that corresponds to this flow chart is:  # start\nnum = -1\nwhile num < 0:\n    num = input(\"Enter a positive number: \")\n    num = float(num)\nprint(\"positive\")\n# end",
            "title": "Flowchart of a program that contains a while loop"
        },
        {
            "location": "/08-Loops/08.05-Summary/",
            "text": "Summary\n\n\nRepetition structures allow the same piece of code to run multiple times. \n\n\nIn this chapter, you learned how to write for loops and while loops in Python. You learned how to use Python's \nrange()\n function in a for loops and how to use a list or string in a for loop. For loops run a block of code a definite number of times. A while loop runs a block of code as long as a logical condition is true. The keywords \nbreak\n and \ncontinue\n cause for and while loops to exit early. \n\n\nAt the end of the chapter, you learned how to build flowcharts that describe programs with for loops and while loops.\n\n\nKey Terms and Concpets\n\n\nrepetition structure\n\n\nloop\n\n\nwhile loop\n\n\nfor loop\n\n\niterate\n\n\nbreak\n\n\ncontinue\n\n\ninfinite loop\n\n\nflowchart",
            "title": "Summary"
        },
        {
            "location": "/08-Loops/08.05-Summary/#summary",
            "text": "Repetition structures allow the same piece of code to run multiple times.   In this chapter, you learned how to write for loops and while loops in Python. You learned how to use Python's  range()  function in a for loops and how to use a list or string in a for loop. For loops run a block of code a definite number of times. A while loop runs a block of code as long as a logical condition is true. The keywords  break  and  continue  cause for and while loops to exit early.   At the end of the chapter, you learned how to build flowcharts that describe programs with for loops and while loops.",
            "title": "Summary"
        },
        {
            "location": "/08-Loops/08.05-Summary/#key-terms-and-concpets",
            "text": "repetition structure  loop  while loop  for loop  iterate  break  continue  infinite loop  flowchart",
            "title": "Key Terms and Concpets"
        },
        {
            "location": "/08-Loops/08.06-Review-Questions/",
            "text": "Review Questions\n\n\nFor Loops\n\n\nQ08.01 Create a for loops to print out the numbers 1 to 10.\n\n\nQ08.02 Create a for loop to print out the number -1 to -10 starting at -1 and ending at -10.\n\n\nQ08.03 Create a for loop to print out all the letters in the word \n'love'\n\n\nQ08.04 Use a for loop to sum the elements in the list \n[1,3,5,8,12]\n. Print the sum to the user.\n\n\nQ08.05 Create the Fibonacci sequence using a for loop. Print out the first 20 terms of the Fibonacci sequence on one line.\n\n\nQ08.06 (a) Use a for loop to print out the numbers 1 to 30\n\n\n(b) Use a for loop to print out all the numbers 1 to 30, but leave out any number which is divisible by 3, such as 3,6 and 9.\n\n\n(c) Use a for loop to print out all the numbers 1 to 30, but leave out any number which is divisible by 5, such as 5,10 and 15.\n\n\n(d) Use a for loop to print out all the numbers 1 to 30, but insert the word \nfizz\n for any number that is divisible by 3, insert the word \nbuzz\n for any number that is divisible by 5 and insert the word \nfizz buzz\n for any numbers that are both divisible by 3 and 5, like 15.\n\n\nQ08.07 Imagine you can see the future of investing and over the next four years, the interest rate of return on investments is going to be 0.02, 0.03, 0.015, 0.06. Prompt the user for an initial investment with Python's \ninput(_)\n function and use the formula below to calculate how much the investment will be worth after four years.\n\n\nnew balance = old balance + old balance \n\\times\n\\times\n interest rate\n\n\nNote the first \"old balance\" is the person's initial investment.\n\n\nQ08.08 A geometric series is a series that has a common ratio between the terms. The sum of the geometric series that starts at \n\\frac{1}{2}\n\\frac{1}{2}\n and has a common ratio of \n\\frac{1}{2}\n\\frac{1}{2}\n approaches the value 1. \n\n\nThe formula that shows the sum of a geometric series which approaches 1 is below.\n\n\n\n\n 1 = \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{8} + \\frac{1}{16} + ... \n\n\n 1 = \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{8} + \\frac{1}{16} + ... \n\n\n\n\nUse the geometric series above to approximate the value of 1 after 10 terms are added. Print out how far off the geometric series approximation is to 1.\n\n\nQ08.09 A Taylor Series is an infinite series of mathematical terms that when summed together approximate a mathematical function. A Taylor Series can be used to approximate \ne^x\ne^x\n, \nsine\nsine\n, and \ncosine\ncosine\n.\n\n\nTaylor Series expansion for the function  \ne^x\ne^x\n is below:\n\n\n\n\n  {e^x} = \\sum\\limits_{n = 0}^\\infty  {\\frac{{{x^n}}}{{n!}}}  = 1 + x + \\frac{{{x^2}}}{{2!}} + \\frac{{{x^3}}}{{3!}} + \\frac{{{x^4}}}{{4!}} + ... \n\n\n  {e^x} = \\sum\\limits_{n = 0}^\\infty  {\\frac{{{x^n}}}{{n!}}}  = 1 + x + \\frac{{{x^2}}}{{2!}} + \\frac{{{x^3}}}{{3!}} + \\frac{{{x^4}}}{{4!}} + ... \n\n\n\n\nWrite a program that asks a user for a number \nx\nx\n, then calculates \ne^x\ne^x\n using the Taylor Series expansion. Calculate 20 terms.\n\n\nWhile Loops\n\n\nQ08.40 Use a while loop to sum the elements in the list \n[1,3,5,8,12]\n. Print the sum to the user. \n\n\nQ08.41 Use a while loop to print out the numbers between 1 and 100 that have whole number square roots.\n\n\nQ08.42 Create a program that prompts a user for test scores. Continue to prompt the user for additional test scores until the user types \n'q'\n. When the user types \n'q'\n, the program stops asking the user for test scores and prints out the following statistics about the test scores the user entered:\n\n\n\n\nmean\n\n\nmedian\n\n\nstandard deviation\n\n\n\n\nQ08.43 Use while loop to validate user input. Ask the user to enter a value between 0 and 1. Print back to the user \"Try again\" if the user's input is invalid. Print \"Your number works!\" when the user enters valid input.\n\n\nQ08.44 Use a while loop to validate user input. Ask the user to enter a day of the week. Keep asking the user for a day of the week until they enter one. When the user enters a day of the week, print back to the \"Yup, it's \n<day of the week>\n\".\n\n\nQ08.45 Write a program to play the game higher/lower. Tell the user you have picked a random integer between 1 and 20. \n\n\nThe code below creates a random integer \nn\n between 1 and 20:\n\n\nfrom random import randint\nn = (randint(1, 20))\n\n\n\n\n(a) Ask the user to enter a number (one time) and tell the user if the number random is higher or lower. Print \nhigher\n if the random number is higher than the user's guess, print \nlower\n if the random number is lower than the user's guess. Print \nYou guessed it: <random number>\n if the user guesses the random number.\n\n\n(b) Modify your program so that the program keeps printing \nhigher\n or \nlower\n after each guess until the user guesses the random number. When the user guesses the random number print \nYou guessed it: <random number>\n.\n\n\n(c) Extend your higher/lower game to record the number of guesses the user enters to guess the random number. Then the user guesses the random number print \nYou guessed: <random number\n in \n<number of tries>\n.\n\n\nQ08.46 A Taylor Series is an infinite series of mathematical terms that when summed together approximate a mathematical function. A Taylor Series can be used to approximate \ne^x\ne^x\n, \nsine\nsine\n, and \ncosine\ncosine\n.\n\n\nTaylor Series expansion for the function  \ne^x\ne^x\n is below:\n\n\n\n\n  {e^x} = \\sum\\limits_{n = 0}^\\infty  {\\frac{{{x^n}}}{{n!}}}  = 1 + x + \\frac{{{x^2}}}{{2!}} + \\frac{{{x^3}}}{{3!}} + \\frac{{{x^4}}}{{4!}} + ... \n\n\n  {e^x} = \\sum\\limits_{n = 0}^\\infty  {\\frac{{{x^n}}}{{n!}}}  = 1 + x + \\frac{{{x^2}}}{{2!}} + \\frac{{{x^3}}}{{3!}} + \\frac{{{x^4}}}{{4!}} + ... \n\n\n\n\nWrite a program that asks a user for a number \nx\nx\n, then calculates \ne^x\ne^x\n using the Taylor Series expansion. Continue to add terms to the Taylor Series until the result from the Taylor series is less than 0.001 off the value of \ne^x\ne^x\n calculated with Python's \nmath.exp()\n function. \n\n\nErrors, Explanations, and Solutions\n\n\nRun the following code snippets. Explain the error in your own words. Rewrite the code snippet to solve the error.\n\n\nQ08.80\n\n\nn = [1 2 3]\nfor n[1] == 2:\n    n = n + 1\nend\n\n\n\n\nQ08.81\n\n\nwhile x in [1, 2, 3]:\n    print(x)\n\n\n\n\nQ08.82\n\n\nn = 1\nwhile 1 == n\n    print('valid')\n    n = n +1\n\n\n\n\nQ08.83\n\n\nfor i in range(3):\nprint(i)",
            "title": "Review Questions"
        },
        {
            "location": "/08-Loops/08.06-Review-Questions/#review-questions",
            "text": "",
            "title": "Review Questions"
        },
        {
            "location": "/08-Loops/08.06-Review-Questions/#for-loops",
            "text": "Q08.01 Create a for loops to print out the numbers 1 to 10.  Q08.02 Create a for loop to print out the number -1 to -10 starting at -1 and ending at -10.  Q08.03 Create a for loop to print out all the letters in the word  'love'  Q08.04 Use a for loop to sum the elements in the list  [1,3,5,8,12] . Print the sum to the user.  Q08.05 Create the Fibonacci sequence using a for loop. Print out the first 20 terms of the Fibonacci sequence on one line.  Q08.06 (a) Use a for loop to print out the numbers 1 to 30  (b) Use a for loop to print out all the numbers 1 to 30, but leave out any number which is divisible by 3, such as 3,6 and 9.  (c) Use a for loop to print out all the numbers 1 to 30, but leave out any number which is divisible by 5, such as 5,10 and 15.  (d) Use a for loop to print out all the numbers 1 to 30, but insert the word  fizz  for any number that is divisible by 3, insert the word  buzz  for any number that is divisible by 5 and insert the word  fizz buzz  for any numbers that are both divisible by 3 and 5, like 15.  Q08.07 Imagine you can see the future of investing and over the next four years, the interest rate of return on investments is going to be 0.02, 0.03, 0.015, 0.06. Prompt the user for an initial investment with Python's  input(_)  function and use the formula below to calculate how much the investment will be worth after four years.  new balance = old balance + old balance  \\times \\times  interest rate  Note the first \"old balance\" is the person's initial investment.  Q08.08 A geometric series is a series that has a common ratio between the terms. The sum of the geometric series that starts at  \\frac{1}{2} \\frac{1}{2}  and has a common ratio of  \\frac{1}{2} \\frac{1}{2}  approaches the value 1.   The formula that shows the sum of a geometric series which approaches 1 is below.    1 = \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{8} + \\frac{1}{16} + ...    1 = \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{8} + \\frac{1}{16} + ...    Use the geometric series above to approximate the value of 1 after 10 terms are added. Print out how far off the geometric series approximation is to 1.  Q08.09 A Taylor Series is an infinite series of mathematical terms that when summed together approximate a mathematical function. A Taylor Series can be used to approximate  e^x e^x ,  sine sine , and  cosine cosine .  Taylor Series expansion for the function   e^x e^x  is below:     {e^x} = \\sum\\limits_{n = 0}^\\infty  {\\frac{{{x^n}}}{{n!}}}  = 1 + x + \\frac{{{x^2}}}{{2!}} + \\frac{{{x^3}}}{{3!}} + \\frac{{{x^4}}}{{4!}} + ...     {e^x} = \\sum\\limits_{n = 0}^\\infty  {\\frac{{{x^n}}}{{n!}}}  = 1 + x + \\frac{{{x^2}}}{{2!}} + \\frac{{{x^3}}}{{3!}} + \\frac{{{x^4}}}{{4!}} + ...    Write a program that asks a user for a number  x x , then calculates  e^x e^x  using the Taylor Series expansion. Calculate 20 terms.",
            "title": "For Loops"
        },
        {
            "location": "/08-Loops/08.06-Review-Questions/#while-loops",
            "text": "Q08.40 Use a while loop to sum the elements in the list  [1,3,5,8,12] . Print the sum to the user.   Q08.41 Use a while loop to print out the numbers between 1 and 100 that have whole number square roots.  Q08.42 Create a program that prompts a user for test scores. Continue to prompt the user for additional test scores until the user types  'q' . When the user types  'q' , the program stops asking the user for test scores and prints out the following statistics about the test scores the user entered:   mean  median  standard deviation   Q08.43 Use while loop to validate user input. Ask the user to enter a value between 0 and 1. Print back to the user \"Try again\" if the user's input is invalid. Print \"Your number works!\" when the user enters valid input.  Q08.44 Use a while loop to validate user input. Ask the user to enter a day of the week. Keep asking the user for a day of the week until they enter one. When the user enters a day of the week, print back to the \"Yup, it's  <day of the week> \".  Q08.45 Write a program to play the game higher/lower. Tell the user you have picked a random integer between 1 and 20.   The code below creates a random integer  n  between 1 and 20:  from random import randint\nn = (randint(1, 20))  (a) Ask the user to enter a number (one time) and tell the user if the number random is higher or lower. Print  higher  if the random number is higher than the user's guess, print  lower  if the random number is lower than the user's guess. Print  You guessed it: <random number>  if the user guesses the random number.  (b) Modify your program so that the program keeps printing  higher  or  lower  after each guess until the user guesses the random number. When the user guesses the random number print  You guessed it: <random number> .  (c) Extend your higher/lower game to record the number of guesses the user enters to guess the random number. Then the user guesses the random number print  You guessed: <random number  in  <number of tries> .  Q08.46 A Taylor Series is an infinite series of mathematical terms that when summed together approximate a mathematical function. A Taylor Series can be used to approximate  e^x e^x ,  sine sine , and  cosine cosine .  Taylor Series expansion for the function   e^x e^x  is below:     {e^x} = \\sum\\limits_{n = 0}^\\infty  {\\frac{{{x^n}}}{{n!}}}  = 1 + x + \\frac{{{x^2}}}{{2!}} + \\frac{{{x^3}}}{{3!}} + \\frac{{{x^4}}}{{4!}} + ...     {e^x} = \\sum\\limits_{n = 0}^\\infty  {\\frac{{{x^n}}}{{n!}}}  = 1 + x + \\frac{{{x^2}}}{{2!}} + \\frac{{{x^3}}}{{3!}} + \\frac{{{x^4}}}{{4!}} + ...    Write a program that asks a user for a number  x x , then calculates  e^x e^x  using the Taylor Series expansion. Continue to add terms to the Taylor Series until the result from the Taylor series is less than 0.001 off the value of  e^x e^x  calculated with Python's  math.exp()  function.",
            "title": "While Loops"
        },
        {
            "location": "/08-Loops/08.06-Review-Questions/#errors-explanations-and-solutions",
            "text": "Run the following code snippets. Explain the error in your own words. Rewrite the code snippet to solve the error.  Q08.80  n = [1 2 3]\nfor n[1] == 2:\n    n = n + 1\nend  Q08.81  while x in [1, 2, 3]:\n    print(x)  Q08.82  n = 1\nwhile 1 == n\n    print('valid')\n    n = n +1  Q08.83  for i in range(3):\nprint(i)",
            "title": "Errors, Explanations, and Solutions"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.00-Introduction/",
            "text": "Matricies and Arrays\n\n\nIntroduction\n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nCreate NumPy arrays\n\n\n\n\n\n\nModify NumPy arrays\n\n\n\n\n\n\nIndex NumPy arrays\n\n\n\n\n\n\nRun mathematical operations on  NumPy arrays\n\n\n\n\n\n\nSolve a system of linear equations using matrices",
            "title": "Introduction"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.00-Introduction/#matricies-and-arrays",
            "text": "",
            "title": "Matricies and Arrays"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.00-Introduction/#introduction",
            "text": "By the end of this chapter you will be able to:    Create NumPy arrays    Modify NumPy arrays    Index NumPy arrays    Run mathematical operations on  NumPy arrays    Solve a system of linear equations using matrices",
            "title": "Introduction"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.01-Installing-NumPy/",
            "text": "Installing NumPy\n\n\nNumPy is a Python package used for numerical computation. NumPy's core data type is the array. NumPy fuctions operate on arrays. NumPy is one of the foundational packages for scientific computing with Python.\n\n\nBefore NumPy's functions and methods can be used, NumPy must be installed. Depending on which distribution of Python you use, the installation method is slightly different.\n\n\nInstall NumPy on Anaconda\n\n\nIf you installed the Anaconda distribution of Python, NumPy comes pre-installed and no further installation steps are necessary. \n\n\nIf you use a version of Python from python.org or a version of Python that came with your operating system, the \nAnaconda Prompt\n and \nconda\n or \npip\n can be used to install NumPy.\n\n\nInstall NumPy with the Anaconda Prompt\n\n\nTo install NumPy, open the \nAnaconda Prompt\n and type:\n\n\n> conda install numpy\n\n\n\n\nType \ny\n for yes when prompted.\n\n\nInstall NumPy with pip\n\n\nTo install NumPy with \npip\n, bring up a terminal window and type:\n\n\n$ pip install numpy\n\n\n\n\nThis command installs NumPy in the current working Python environment.\n\n\nVerify NumPy installation\n\n\nTo verify NumPy is installed, invoke the NumPy's version at the Python REPL. Import NumPy and call the \n.__version__\n attribute common to most Python packages.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nnp\n.\nversion\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[1]:\n\n\n\n\n\n\n\n\n'1.14.3'",
            "title": "Installing NumPy"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.01-Installing-NumPy/#installing-numpy",
            "text": "NumPy is a Python package used for numerical computation. NumPy's core data type is the array. NumPy fuctions operate on arrays. NumPy is one of the foundational packages for scientific computing with Python.  Before NumPy's functions and methods can be used, NumPy must be installed. Depending on which distribution of Python you use, the installation method is slightly different.",
            "title": "Installing NumPy"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.01-Installing-NumPy/#install-numpy-on-anaconda",
            "text": "If you installed the Anaconda distribution of Python, NumPy comes pre-installed and no further installation steps are necessary.   If you use a version of Python from python.org or a version of Python that came with your operating system, the  Anaconda Prompt  and  conda  or  pip  can be used to install NumPy.",
            "title": "Install NumPy on Anaconda"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.01-Installing-NumPy/#install-numpy-with-the-anaconda-prompt",
            "text": "To install NumPy, open the  Anaconda Prompt  and type:  > conda install numpy  Type  y  for yes when prompted.",
            "title": "Install NumPy with the Anaconda Prompt"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.01-Installing-NumPy/#install-numpy-with-pip",
            "text": "To install NumPy with  pip , bring up a terminal window and type:  $ pip install numpy  This command installs NumPy in the current working Python environment.",
            "title": "Install NumPy with pip"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.01-Installing-NumPy/#verify-numpy-installation",
            "text": "To verify NumPy is installed, invoke the NumPy's version at the Python REPL. Import NumPy and call the  .__version__  attribute common to most Python packages.   In\u00a0[1]:  \n      import   numpy   as   np  np . version         Out[1]:   '1.14.3'",
            "title": "Verify NumPy installation"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.02-NumPy/",
            "text": "NumPy\n\n\nNumPy is a Python package used for numerical calculations, working with arrays of homogeneous values, and scientific computing. This section introduces NumPy and arrays then explains the difference between Python lists and NumPy arrays.\n\n\nPython Lists and NumPy Arrays\n\n\nIn previous chapters, NumPy was used some of the functions and methods the package provides. NumPy is used to construct homogeneous arrays and perform mathematical operations on arrays. A NumPy array is different from a Python list. The data types stored in a Python list can all be different.\n\n\npython_list =[ 1, -0.038, 'gear', True]\n\n\n\n\nThe Python list above contains four different data types: \n1\n is an integer, \n-0.038\n is a float, \n'gear'\n is a string, and \n'True'\n is a boolean.\n\n\nThe code below prints the data type of each value store in \npython_list\n.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\npython_list\n \n=\n \n[\n1\n,\n \n-\n0.038\n,\n \n'gear'\n,\n \nTrue\n]\n\n\nfor\n \nitem\n \nin\n \npython_list\n:\n\n    \nprint\n(\ntype\n(\nitem\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<class 'int'>\n<class 'float'>\n<class 'str'>\n<class 'bool'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe values stored in a NumPy array must all share the same data type. Consider the NumPy array below:\n\n\nnp.array([1.0, 3.1, 5e-04, 0.007])\n\n\n\n\nAll four values stored in the NumPy array above share the same data type: \n1.0\n, \n3.1\n, \n5e-04\n, and \n0.007\n are all floats.\n\n\nThe code below prints the data type of each value stored in the NumPy array above.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nnp_array\n \n=\n \n[\n1\n,\n \n-\n0.038\n,\n \n'gear'\n,\n \nTrue\n]\n\n\nfor\n \nvalue\n \nin\n \nnp\n.\narray\n([\n1.0\n,\n \n3.1\n,\n \n5e-04\n,\n \n0.007\n]):\n\n    \nprint\n(\ntype\n(\nvalue\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<class 'numpy.float64'>\n<class 'numpy.float64'>\n<class 'numpy.float64'>\n<class 'numpy.float64'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf the same four elements stored in the previous Python list are stored in a NumPy array, NumPy forces all of the four items in the list to conform to the same data type. \n\n\nIn the next code section, all four items are converted to type \n'<U32'\n, which is a string data type in NumPy (the \nU\n refers Unicode strings; all strings in Python are Unicode by default).\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nnp\n.\narray\n([\n1\n,\n \n-\n0.038\n,\n \n'gear'\n,\n \nTrue\n])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[3]:\n\n\n\n\n\n\n\n\narray(['1', '-0.038', 'gear', 'True'], dtype='<U32')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNumPy arrays can also be two-dimensional, three-dimensional, or up to n-dimensional. Computer resources limit array size, but the data type stored in each array is limited to the same type.\nNumPy arrays are useful because mathematical operations can be run on an entire array simultaneously. If a numbers are stored in a regular Python list, when the list is multiplied by a scalar, the list extends and repeats- instead of multiplying each number in the list by the scalar.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nlst\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n]\n\n\nlst\n*\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[4]:\n\n\n\n\n\n\n\n\n[1, 2, 3, 4, 1, 2, 3, 4]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo multiply each element of a Python list by the scalar number \n2\n, a loop can be used:\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nlst\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n]\n\n\nfor\n \ni\n,\n \nitem\n \nin\n \nenumerate\n(\nlst\n):\n\n    \nlst\n[\ni\n]\n \n=\n \nlst\n[\ni\n]\n*\n2\n\n\nlst\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[5]:\n\n\n\n\n\n\n\n\n[2, 4, 6, 8]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe method above is relatively cumbersome and is also quite \ncomputationally expensive\n. An operation that is computationally expensive is an operation that takes a lot of processing time or storage resources like RAM or CPU bandwidth.\n\n\nAnother way of completing the same action as the loop above is to use a NumPy array. \n\n\nAn entire NumPy array can be multiplied by a scalar in one step. The scalar multiplication operation below produces an array with each element multiplied by the scalar \n2\n.\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nnparray\n=\n \nnp\n.\narray\n([\n1\n,\n2\n,\n3\n,\n4\n])\n\n\n2\n*\nnparray\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[6]:\n\n\n\n\n\n\n\n\narray([2, 4, 6, 8])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf we have a very long list of numbers, we can compare the amount of time it takes each of the two computation methods above to complete the same operation. We'll compare the Python list calculation to the NumPy array calculation.\n\n\nJupyter notebooks have a nice built-in way to time how a line of code takes to execute. In a Jupyter notebook, when a line starts with \n%timeit\n followed by code, the notebook runs the line of code multiple times and outputs an average of the time spent to execute the line of code.\n\n\nWe can use \n%timit\n to compare a mathematical operation on a Python list using a for loop to the same mathematical operation on a NumPy array.\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nlst\n \n=\n \nlist\n(\nrange\n(\n10000\n))\n\n\n%\ntimeit\n for i, item in enumerate(lst): lst[i] = lst[i]*2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.47 ms \u00b1 1.41 ms per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\nnparray\n=\n \nnp\n.\narange\n(\n0\n,\n10000\n,\n1\n)\n\n\n%\ntimeit\n 2*nparray\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n11.9 \u00b5s \u00b1 155 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith 10,000 integers, the Python list and for loop takes an average of single milliseconds, while the NumPy array completes the same operation in tens of microseconds. This is a speed increase of over 100x by using the NumPy array (1 millisecond = 1000 microseconds).\n\n\nFor larger lists of numbers, the speed increase using NumPy is considerable.",
            "title": "NumPy"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.02-NumPy/#numpy",
            "text": "NumPy is a Python package used for numerical calculations, working with arrays of homogeneous values, and scientific computing. This section introduces NumPy and arrays then explains the difference between Python lists and NumPy arrays.",
            "title": "NumPy"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.02-NumPy/#python-lists-and-numpy-arrays",
            "text": "In previous chapters, NumPy was used some of the functions and methods the package provides. NumPy is used to construct homogeneous arrays and perform mathematical operations on arrays. A NumPy array is different from a Python list. The data types stored in a Python list can all be different.  python_list =[ 1, -0.038, 'gear', True]  The Python list above contains four different data types:  1  is an integer,  -0.038  is a float,  'gear'  is a string, and  'True'  is a boolean.  The code below prints the data type of each value store in  python_list .   In\u00a0[1]:  \n      python_list   =   [ 1 ,   - 0.038 ,   'gear' ,   True ]  for   item   in   python_list : \n     print ( type ( item ))           <class 'int'>\n<class 'float'>\n<class 'str'>\n<class 'bool'>      \nThe values stored in a NumPy array must all share the same data type. Consider the NumPy array below:  np.array([1.0, 3.1, 5e-04, 0.007])  All four values stored in the NumPy array above share the same data type:  1.0 ,  3.1 ,  5e-04 , and  0.007  are all floats.  The code below prints the data type of each value stored in the NumPy array above.   In\u00a0[2]:  \n      import   numpy   as   np  np_array   =   [ 1 ,   - 0.038 ,   'gear' ,   True ]  for   value   in   np . array ([ 1.0 ,   3.1 ,   5e-04 ,   0.007 ]): \n     print ( type ( value ))           <class 'numpy.float64'>\n<class 'numpy.float64'>\n<class 'numpy.float64'>\n<class 'numpy.float64'>      \nIf the same four elements stored in the previous Python list are stored in a NumPy array, NumPy forces all of the four items in the list to conform to the same data type.   In the next code section, all four items are converted to type  '<U32' , which is a string data type in NumPy (the  U  refers Unicode strings; all strings in Python are Unicode by default).   In\u00a0[3]:  \n      np . array ([ 1 ,   - 0.038 ,   'gear' ,   True ])         Out[3]:   array(['1', '-0.038', 'gear', 'True'], dtype='<U32')      \nNumPy arrays can also be two-dimensional, three-dimensional, or up to n-dimensional. Computer resources limit array size, but the data type stored in each array is limited to the same type.\nNumPy arrays are useful because mathematical operations can be run on an entire array simultaneously. If a numbers are stored in a regular Python list, when the list is multiplied by a scalar, the list extends and repeats- instead of multiplying each number in the list by the scalar.   In\u00a0[4]:  \n      lst   =   [ 1 ,   2 ,   3 ,   4 ]  lst * 2         Out[4]:   [1, 2, 3, 4, 1, 2, 3, 4]      \nTo multiply each element of a Python list by the scalar number  2 , a loop can be used:   In\u00a0[5]:  \n      lst   =   [ 1 ,   2 ,   3 ,   4 ]  for   i ,   item   in   enumerate ( lst ): \n     lst [ i ]   =   lst [ i ] * 2  lst         Out[5]:   [2, 4, 6, 8]      \nThe method above is relatively cumbersome and is also quite  computationally expensive . An operation that is computationally expensive is an operation that takes a lot of processing time or storage resources like RAM or CPU bandwidth.  Another way of completing the same action as the loop above is to use a NumPy array.   An entire NumPy array can be multiplied by a scalar in one step. The scalar multiplication operation below produces an array with each element multiplied by the scalar  2 .   In\u00a0[6]:  \n      nparray =   np . array ([ 1 , 2 , 3 , 4 ])  2 * nparray         Out[6]:   array([2, 4, 6, 8])      \nIf we have a very long list of numbers, we can compare the amount of time it takes each of the two computation methods above to complete the same operation. We'll compare the Python list calculation to the NumPy array calculation.  Jupyter notebooks have a nice built-in way to time how a line of code takes to execute. In a Jupyter notebook, when a line starts with  %timeit  followed by code, the notebook runs the line of code multiple times and outputs an average of the time spent to execute the line of code.  We can use  %timit  to compare a mathematical operation on a Python list using a for loop to the same mathematical operation on a NumPy array.   In\u00a0[7]:  \n      lst   =   list ( range ( 10000 ))  % timeit  for i, item in enumerate(lst): lst[i] = lst[i]*2          4.47 ms \u00b1 1.41 ms per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)         In\u00a0[8]:  \n      nparray =   np . arange ( 0 , 10000 , 1 )  % timeit  2*nparray          11.9 \u00b5s \u00b1 155 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)      \nWith 10,000 integers, the Python list and for loop takes an average of single milliseconds, while the NumPy array completes the same operation in tens of microseconds. This is a speed increase of over 100x by using the NumPy array (1 millisecond = 1000 microseconds).  For larger lists of numbers, the speed increase using NumPy is considerable.",
            "title": "Python Lists and NumPy Arrays"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/",
            "text": "Array Creation\n\n\nNumPy arrays are created with the \nnp.array()\n function. The arguments provided to \nnp.array()\n needs to be a list or iterable. An example is below. Note how the list \n[1,2,3]\n is passed into the function with square brackets at either end.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nnp\n.\narray\n([\n1\n,\n2\n,\n3\n])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[1]:\n\n\n\n\n\n\n\n\narray([1, 2, 3])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe data type can be passed into the \nnp.array()\n function as a second optional positional arguments. Available data types include \n'int64'\n, \n'float'\n, \n'complex'\n and \n'>U32'\n (string data type).\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nnp\n.\narray\n([\n1\n,\n2\n,\n3\n],\ndtype\n=\n'float'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\narray([1., 2., 3.])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe data type store in a NumPy array can be determined using the \n.dtype\n method. For instance, an array of \nfloats\n returns \nfloat64\n.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nmy_array\n \n=\n \nnp\n.\narray\n([\n1\n,\n2\n,\n3\n],\ndtype\n=\n'float'\n)\n\n\nmy_array\n.\ndtype\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[3]:\n\n\n\n\n\n\n\n\ndtype('float64')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArrays of Regularly Spaced Numbers\n\n\nThere are multiple ways to create arrays of regularly spaced numbers with NumPy\n\n\nnp.arange()\n\n\nNumPy's \nnp.arange()\n function creates a NumPy array according the arguments \nstart\n, \nstop\n,\nstep\n.\n\n\nmy_array = np.arange(start, stop, step)\n\n\n\n\nThe \nnp.arange()\n function is useful for creating an array of regularly spaced numbers where you know the step size. \n\n\nConsider creating a NumPy array of even numbers between \n0\n and \n10\n. Note that just like counting in Python, counting in NumPy starts at \n0\n and ends at \nn-1\n.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nnp\n.\narange\n(\n0\n,\n10\n+\n2\n,\n2\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[4]:\n\n\n\n\n\n\n\n\narray([ 0,  2,  4,  6,  8, 10])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnp.linspace()\n\n\nNumPy's \nnp.linspace()\n function creates a NumPy array according the arguments \nstart\n, \nstop\n,\nnumber of elements\n.\n\n\nmy_array = np.linspace(start, stop, number of elements)\n\n\n\n\nThe \nnp.linspace()\n function is useful for creating an array of regularly spaced numbers where the spacing is not known, but the number of values is. Consider creating a NumPy array of 10 numbers between \n0\n and \n2pi\n.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nnp\n.\nlinspace\n(\n0\n,\n2\n*\nnp\n.\npi\n,\n10\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[5]:\n\n\n\n\n\n\n\n\narray([0.        , 0.6981317 , 1.3962634 , 2.0943951 , 2.7925268 ,\n       3.4906585 , 4.1887902 , 4.88692191, 5.58505361, 6.28318531])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnp.logspace()\n\n\nNumPy's \nnp.logspace()\n function creates a NumPy array according the arguments \nstart\n, \nstop\n,\nnumber of elements\n, but unlike \nnp.linspace()\n, \nnp.logspace()\n produces a logarithmically spaced array.\n\n\nmy_array = np.logspace(start, stop, number of elements, base=<num>)\n\n\n\n\nThis function is useful for creating an array of logarithmically spaced numbers where the spacing interval is not known but the number of values is. Consider creating a NumPy array of 4 logarithmically spaced numbers between \n10\n and \n100\n. The function call is \nnp.logspace(1, 2, 4)\n. The \nstart\n is \n10^1 = 10\n10^1 = 10\n and the \nstop\n is \n10^2 = 100\n10^2 = 100\n. Be careful about putting large numbers in for \nstop\n because the argument is the power of 10, not the stop value.\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nnp\n.\nlogspace\n(\n1\n,\n \n2\n,\n \n4\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[6]:\n\n\n\n\n\n\n\n\narray([ 10.        ,  21.5443469 ,  46.41588834, 100.        ])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnp.zeros()\n\n\nNumPy's \nnp.zeros()\n function creates a NumPy array containing all  zeros of a specific size. \nnp.zeros()\n is useful when the size of an array is known, but the values that will go into the array have not been created yet.\n\n\nmy_array = np.zeros((rows,cols))\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nnp\n.\nzeros\n((\n5\n,\n5\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[7]:\n\n\n\n\n\n\n\n\narray([[0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.]])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnp.ones()\n\n\nNumPy's \nnp.ones()\n function creates a NumPy array containing all 1's of a specific size. Like \nnp.zeros()\n, \nnp.ones()\n is useful when the size of an array is known, but the values that will go into the array have not been created yet.\n\n\nmy_array = np.ones((rows,cols))\n\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\nnp\n.\nones\n((\n3\n,\n5\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[8]:\n\n\n\n\n\n\n\n\narray([[1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.]])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArrays of Random Numbers\n\n\nNumPy has functions to create arrays of many different types of random numbers in the \nnp.random\n module. A few of the common random number types are detailed below.\n\n\nArray of Random Integers\n\n\nArrays of random integers can be created with NumPy's \nnp.random.randint()\n function. The general syntax is:\n\n\nnp.random.randint(lower limit, upper limit, number of values)\n\n\n\n\nTo create an array of 5 different random numbers, each random number between 1 and 10:\n\n\n\n\n\nIn\u00a0[9]:\n\n\n\n    \n\n\nnp\n.\nrandom\n.\nrandint\n(\n0\n,\n10\n,\n5\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[9]:\n\n\n\n\n\n\n\n\narray([6, 7, 2, 3, 0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray dimensions can be provided as the third argument. A 5 \n\\times\n\\times\n 5 array of random numbers between 1 and 10:\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nnp\n.\nrandom\n.\nrandint\n(\n0\n,\n10\n,[\n5\n,\n5\n])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[10]:\n\n\n\n\n\n\n\n\narray([[7, 2, 1, 7, 7],\n       [7, 5, 7, 1, 0],\n       [9, 1, 1, 4, 3],\n       [3, 3, 4, 0, 7],\n       [0, 8, 6, 8, 0]])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray of Random Floats\n\n\nArrays of random floating point numbers can be created with NumPy's \nnp.random.rand()\n function. The general syntax is:\n\n\nnp.random.rand(number of values)\n\n\n\n\nTo create an array of 5 different random numbers between 0 and 1:\n\n\n\n\n\nIn\u00a0[11]:\n\n\n\n    \n\n\nnp\n.\nrandom\n.\nrand\n(\n5\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[11]:\n\n\n\n\n\n\n\n\narray([0.87496687, 0.53720722, 0.46532805, 0.34379277, 0.40271602])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRandom Array Choice from  a List\n\n\nnp.random.choice(list of choices, number of choices)\n\n\n\n\nTo choose three numbers at random from a list of \n[1,5,9,11]\n use:\n\n\n\n\n\nIn\u00a0[12]:\n\n\n\n    \n\n\nlst\n \n=\n \n[\n1\n,\n5\n,\n9\n,\n11\n]\n\n\nnp\n.\nrandom\n.\nchoice\n(\nlst\n,\n3\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[12]:\n\n\n\n\n\n\n\n\narray([11,  1, 11])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRandom Array with a Normal Distribution\n\n\nnp.random.randn()\n returns an array of  random numbers with a normal distribution, assuming a mean of 0 and variance of 1.  \n\n\nnp.random.randn(number of values)\n\n\n\n\n\n\n\n\nIn\u00a0[13]:\n\n\n\n    \n\n\nnp\n.\nrandom\n.\nrandn\n(\n10\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[13]:\n\n\n\n\n\n\n\n\narray([-0.8587019 ,  0.51022209,  1.52989165, -0.62763827,  0.42359871,\n       -0.12794222, -0.05960913,  0.1018347 , -0.13226924,  1.21221629])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo specify a mean \nmu\n and a standard deviation \nsigma\n, the function can be wrapped with:\n\n\n\n\n\nIn\u00a0[14]:\n\n\n\n    \n\n\nmu\n \n=\n \n70\n\n\nsigma\n \n=\n \n6.6\n\n\nsigma\n \n*\n \nnp\n.\nrandom\n.\nrandn\n(\n10\n)\n \n+\n \nmu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[14]:\n\n\n\n\n\n\n\n\narray([83.08982467, 63.75617079, 54.80340275, 65.64987114, 60.86298488,\n       71.15108776, 72.68180092, 67.74486107, 62.88712717, 71.53153691])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMatplotlib's \nplt.hist()\n function can be used to quickly plot a normal distribution created with NumPy's \nnp.random.randn()\n function.\n\n\n\n\n\nIn\u00a0[15]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\nmu\n \n=\n \n70\n\n\nsigma\n \n=\n \n6.6\n\n\nsample\n \n=\n \nsigma\n \n*\n \nnp\n.\nrandom\n.\nrandn\n(\n1000\n)\n \n+\n \nmu\n\n\nplt\n.\nhist\n(\nsample\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2-D Arrays\n\n\nnp.meshgrid()\n\n\nNumPy's \nnp.meshgrid()\n function takes in two positional arguments which are 1D NumPy arrays. The two input arrays do not have to contain the same number of elements. The outputs of the \nnp.meshgrid()\n function are two 2D arrays. One of the 2D arrays has the same values in each row; the other 2D array has the same values in each column. \n\n\nnp.meshgrid(array1,array2)\n\n\n\n\n\n\n\n\nIn\u00a0[16]:\n\n\n\n    \n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n6\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n0\n,\n11\n,\n2\n)\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\ny\n)\n\n\nprint\n(\nX\n)\n\n\nprint\n(\nY\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[[0 1 2 3 4 5]\n [0 1 2 3 4 5]\n [0 1 2 3 4 5]\n [0 1 2 3 4 5]\n [0 1 2 3 4 5]\n [0 1 2 3 4 5]]\n[[ 0  0  0  0  0  0]\n [ 2  2  2  2  2  2]\n [ 4  4  4  4  4  4]\n [ 6  6  6  6  6  6]\n [ 8  8  8  8  8  8]\n [10 10 10 10 10 10]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnp.mgrid[]\n\n\nNumPy's \nnp.mgrid[]\n function is similar to \nnp.meshgrid()\n, but has a \"MATLAB-like\" syntax and behavior. \n\n\nUse square brackets \n[ ]\n after the \nnp.mgrid\n function name. Separate the two \"lists\" passed as input arguments with a comma and use the \nstart:stop:step\n indexing method. The outputs of the \nnp.mgrid[]\n function are two 2D arrays. The first 2D array have the same values in each row; the second 2D array has the same values in each column. \n\n\nnp.mgrid[start:stop:step, start:stop:step]\n\n\n\n\n\n\n\n\nIn\u00a0[17]:\n\n\n\n    \n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmgrid\n[\n0\n:\n5\n,\n0\n:\n11\n:\n2\n]\n\n\nprint\n(\nX\n)\n\n\nprint\n(\nY\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[[0 0 0 0 0 0]\n [1 1 1 1 1 1]\n [2 2 2 2 2 2]\n [3 3 3 3 3 3]\n [4 4 4 4 4 4]]\n[[ 0  2  4  6  8 10]\n [ 0  2  4  6  8 10]\n [ 0  2  4  6  8 10]\n [ 0  2  4  6  8 10]\n [ 0  2  4  6  8 10]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSection Summary\n\n\nBelow is a list of NumPy function descriptions used in this section.\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnp.array([list,of,numbers])\n\n\nArray from a list\n\n\n\n\n\n\nnp.arange(start,stop,step)\n\n\nArray with know step\n\n\n\n\n\n\nnp.linspace(start, stop, num)\n\n\nArray with known num\n\n\n\n\n\n\nnp.logspace(start,stop,num)\n\n\nLogorithmically spaced array\n\n\n\n\n\n\nnp.zeros((rows,cols))\n\n\nArray of zeros\n\n\n\n\n\n\nnp.ones((rows,cols))\n\n\nArray of ones\n\n\n\n\n\n\nnp.random.randint(start, stop, num)\n\n\nRandom integers\n\n\n\n\n\n\nnp.random.rand(num)\n\n\nRandom float 0 to 1\n\n\n\n\n\n\nnp.random.choice(list,num)\n\n\nRandome choice from a list\n\n\n\n\n\n\nnp.random.randn(num)\n\n\nRandom normal distribution\n\n\n\n\n\n\nnp.meshgrid(array1,array2)\n\n\nTwo 2D arrays from two 1D arrays\n\n\n\n\n\n\nnp.mgrid[start:stop:step, start:stop:step]\n\n\nMATLAB meshgrid",
            "title": "Array Creation"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#array-creation",
            "text": "NumPy arrays are created with the  np.array()  function. The arguments provided to  np.array()  needs to be a list or iterable. An example is below. Note how the list  [1,2,3]  is passed into the function with square brackets at either end.   In\u00a0[1]:  \n      import   numpy   as   np  np . array ([ 1 , 2 , 3 ])         Out[1]:   array([1, 2, 3])      \nThe data type can be passed into the  np.array()  function as a second optional positional arguments. Available data types include  'int64' ,  'float' ,  'complex'  and  '>U32'  (string data type).   In\u00a0[2]:  \n      import   numpy   as   np  np . array ([ 1 , 2 , 3 ], dtype = 'float' )         Out[2]:   array([1., 2., 3.])      \nThe data type store in a NumPy array can be determined using the  .dtype  method. For instance, an array of  floats  returns  float64 .   In\u00a0[3]:  \n      import   numpy   as   np  my_array   =   np . array ([ 1 , 2 , 3 ], dtype = 'float' )  my_array . dtype         Out[3]:   dtype('float64')",
            "title": "Array Creation"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#arrays-of-regularly-spaced-numbers",
            "text": "There are multiple ways to create arrays of regularly spaced numbers with NumPy",
            "title": "Arrays of Regularly Spaced Numbers"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#nparange",
            "text": "NumPy's  np.arange()  function creates a NumPy array according the arguments  start ,  stop , step .  my_array = np.arange(start, stop, step)  The  np.arange()  function is useful for creating an array of regularly spaced numbers where you know the step size.   Consider creating a NumPy array of even numbers between  0  and  10 . Note that just like counting in Python, counting in NumPy starts at  0  and ends at  n-1 .   In\u00a0[4]:  \n      np . arange ( 0 , 10 + 2 , 2 )         Out[4]:   array([ 0,  2,  4,  6,  8, 10])",
            "title": "np.arange()"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#nplinspace",
            "text": "NumPy's  np.linspace()  function creates a NumPy array according the arguments  start ,  stop , number of elements .  my_array = np.linspace(start, stop, number of elements)  The  np.linspace()  function is useful for creating an array of regularly spaced numbers where the spacing is not known, but the number of values is. Consider creating a NumPy array of 10 numbers between  0  and  2pi .   In\u00a0[5]:  \n      np . linspace ( 0 , 2 * np . pi , 10 )         Out[5]:   array([0.        , 0.6981317 , 1.3962634 , 2.0943951 , 2.7925268 ,\n       3.4906585 , 4.1887902 , 4.88692191, 5.58505361, 6.28318531])",
            "title": "np.linspace()"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#nplogspace",
            "text": "NumPy's  np.logspace()  function creates a NumPy array according the arguments  start ,  stop , number of elements , but unlike  np.linspace() ,  np.logspace()  produces a logarithmically spaced array.  my_array = np.logspace(start, stop, number of elements, base=<num>)  This function is useful for creating an array of logarithmically spaced numbers where the spacing interval is not known but the number of values is. Consider creating a NumPy array of 4 logarithmically spaced numbers between  10  and  100 . The function call is  np.logspace(1, 2, 4) . The  start  is  10^1 = 10 10^1 = 10  and the  stop  is  10^2 = 100 10^2 = 100 . Be careful about putting large numbers in for  stop  because the argument is the power of 10, not the stop value.   In\u00a0[6]:  \n      np . logspace ( 1 ,   2 ,   4 )         Out[6]:   array([ 10.        ,  21.5443469 ,  46.41588834, 100.        ])",
            "title": "np.logspace()"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#npzeros",
            "text": "NumPy's  np.zeros()  function creates a NumPy array containing all  zeros of a specific size.  np.zeros()  is useful when the size of an array is known, but the values that will go into the array have not been created yet.  my_array = np.zeros((rows,cols))    In\u00a0[7]:  \n      np . zeros (( 5 , 5 ))         Out[7]:   array([[0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.]])",
            "title": "np.zeros()"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#npones",
            "text": "NumPy's  np.ones()  function creates a NumPy array containing all 1's of a specific size. Like  np.zeros() ,  np.ones()  is useful when the size of an array is known, but the values that will go into the array have not been created yet.  my_array = np.ones((rows,cols))    In\u00a0[8]:  \n      np . ones (( 3 , 5 ))         Out[8]:   array([[1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.]])",
            "title": "np.ones()"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#arrays-of-random-numbers",
            "text": "NumPy has functions to create arrays of many different types of random numbers in the  np.random  module. A few of the common random number types are detailed below.",
            "title": "Arrays of Random Numbers"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#array-of-random-integers",
            "text": "Arrays of random integers can be created with NumPy's  np.random.randint()  function. The general syntax is:  np.random.randint(lower limit, upper limit, number of values)  To create an array of 5 different random numbers, each random number between 1 and 10:   In\u00a0[9]:  \n      np . random . randint ( 0 , 10 , 5 )         Out[9]:   array([6, 7, 2, 3, 0])      \nArray dimensions can be provided as the third argument. A 5  \\times \\times  5 array of random numbers between 1 and 10:   In\u00a0[10]:  \n      np . random . randint ( 0 , 10 ,[ 5 , 5 ])         Out[10]:   array([[7, 2, 1, 7, 7],\n       [7, 5, 7, 1, 0],\n       [9, 1, 1, 4, 3],\n       [3, 3, 4, 0, 7],\n       [0, 8, 6, 8, 0]])",
            "title": "Array of Random Integers"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#array-of-random-floats",
            "text": "Arrays of random floating point numbers can be created with NumPy's  np.random.rand()  function. The general syntax is:  np.random.rand(number of values)  To create an array of 5 different random numbers between 0 and 1:   In\u00a0[11]:  \n      np . random . rand ( 5 )         Out[11]:   array([0.87496687, 0.53720722, 0.46532805, 0.34379277, 0.40271602])",
            "title": "Array of Random Floats"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#random-array-choice-from-a-list",
            "text": "np.random.choice(list of choices, number of choices)  To choose three numbers at random from a list of  [1,5,9,11]  use:   In\u00a0[12]:  \n      lst   =   [ 1 , 5 , 9 , 11 ]  np . random . choice ( lst , 3 )         Out[12]:   array([11,  1, 11])",
            "title": "Random Array Choice from  a List"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#random-array-with-a-normal-distribution",
            "text": "np.random.randn()  returns an array of  random numbers with a normal distribution, assuming a mean of 0 and variance of 1.    np.random.randn(number of values)    In\u00a0[13]:  \n      np . random . randn ( 10 )         Out[13]:   array([-0.8587019 ,  0.51022209,  1.52989165, -0.62763827,  0.42359871,\n       -0.12794222, -0.05960913,  0.1018347 , -0.13226924,  1.21221629])       To specify a mean  mu  and a standard deviation  sigma , the function can be wrapped with:   In\u00a0[14]:  \n      mu   =   70  sigma   =   6.6  sigma   *   np . random . randn ( 10 )   +   mu         Out[14]:   array([83.08982467, 63.75617079, 54.80340275, 65.64987114, 60.86298488,\n       71.15108776, 72.68180092, 67.74486107, 62.88712717, 71.53153691])      \nMatplotlib's  plt.hist()  function can be used to quickly plot a normal distribution created with NumPy's  np.random.randn()  function.   In\u00a0[15]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline  mu   =   70  sigma   =   6.6  sample   =   sigma   *   np . random . randn ( 1000 )   +   mu  plt . hist ( sample )  plt . show ()",
            "title": "Random Array with a Normal Distribution"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#2-d-arrays",
            "text": "",
            "title": "2-D Arrays"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#npmeshgrid",
            "text": "NumPy's  np.meshgrid()  function takes in two positional arguments which are 1D NumPy arrays. The two input arrays do not have to contain the same number of elements. The outputs of the  np.meshgrid()  function are two 2D arrays. One of the 2D arrays has the same values in each row; the other 2D array has the same values in each column.   np.meshgrid(array1,array2)    In\u00a0[16]:  \n      x   =   np . arange ( 0 , 6 )  y   =   np . arange ( 0 , 11 , 2 )  X ,   Y   =   np . meshgrid ( x , y )  print ( X )  print ( Y )           [[0 1 2 3 4 5]\n [0 1 2 3 4 5]\n [0 1 2 3 4 5]\n [0 1 2 3 4 5]\n [0 1 2 3 4 5]\n [0 1 2 3 4 5]]\n[[ 0  0  0  0  0  0]\n [ 2  2  2  2  2  2]\n [ 4  4  4  4  4  4]\n [ 6  6  6  6  6  6]\n [ 8  8  8  8  8  8]\n [10 10 10 10 10 10]]",
            "title": "np.meshgrid()"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#npmgrid",
            "text": "NumPy's  np.mgrid[]  function is similar to  np.meshgrid() , but has a \"MATLAB-like\" syntax and behavior.   Use square brackets  [ ]  after the  np.mgrid  function name. Separate the two \"lists\" passed as input arguments with a comma and use the  start:stop:step  indexing method. The outputs of the  np.mgrid[]  function are two 2D arrays. The first 2D array have the same values in each row; the second 2D array has the same values in each column.   np.mgrid[start:stop:step, start:stop:step]    In\u00a0[17]:  \n      X ,   Y   =   np . mgrid [ 0 : 5 , 0 : 11 : 2 ]  print ( X )  print ( Y )           [[0 0 0 0 0 0]\n [1 1 1 1 1 1]\n [2 2 2 2 2 2]\n [3 3 3 3 3 3]\n [4 4 4 4 4 4]]\n[[ 0  2  4  6  8 10]\n [ 0  2  4  6  8 10]\n [ 0  2  4  6  8 10]\n [ 0  2  4  6  8 10]\n [ 0  2  4  6  8 10]]",
            "title": "np.mgrid[]"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.03-Array-Creation/#section-summary",
            "text": "Below is a list of NumPy function descriptions used in this section.     Function  Description      np.array([list,of,numbers])  Array from a list    np.arange(start,stop,step)  Array with know step    np.linspace(start, stop, num)  Array with known num    np.logspace(start,stop,num)  Logorithmically spaced array    np.zeros((rows,cols))  Array of zeros    np.ones((rows,cols))  Array of ones    np.random.randint(start, stop, num)  Random integers    np.random.rand(num)  Random float 0 to 1    np.random.choice(list,num)  Randome choice from a list    np.random.randn(num)  Random normal distribution    np.meshgrid(array1,array2)  Two 2D arrays from two 1D arrays    np.mgrid[start:stop:step, start:stop:step]  MATLAB meshgrid",
            "title": "Section Summary"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.04-Array-Indexing/",
            "text": "Array Indexing\n\n\nElements in NumPy arrays can be accessed by \nindexing\n. Indexing is an operation that pulls out a select set of values from an array. The \nindex\n of a value in an array is that value's \nlocation\n within the array. There is a difference between \nthe value\n and \nwhere the value is stored\n in an array. \n\n\nAn array with 3 values is created in the code section below.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\na\n \n=\n \nnp\n.\narray\n([\n2\n,\n4\n,\n6\n])\n\n\n\n\n\n\n\n\n\n\n\nThe array above contains three values: \n2\n, \n4\n and \n6\n. Each of these values has a different index. \n\n\nRemember counting in Python starts at \n0\n and ends at \nn-1\n.\n\n\nThe value \n2\n has an index of 0. \n2\n is in the 0 location of the array. The value \n4\n has an index of \n1\n and the value \n6\n has an index of \n2\n. The table below shows the index of each value in the array.\n\n\n\n\n\n\n\n\nIndex (or location)\n\n\nValue\n\n\n\n\n\n\n\n\n\n\n0\n\n\n2\n\n\n\n\n\n\n1\n\n\n4\n\n\n\n\n\n\n2\n\n\n6\n\n\n\n\n\n\n\n\nIndividual values stored in an array can be accessed with indexing. \n\n\nThe general form to index a NumPy array is:\n\n\n<value> = <array>[index]\n\n\n\n\nWhere \n<value>\n is the value stored in the array, \n<array>\n is the array object name and \n[index]\n specifies the index or location of that value. \n\n\nIn the array above, the value 6 is stored at index 2.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\na\n \n=\n \nnp\n.\narray\n([\n2\n,\n4\n,\n6\n])\n\n\nvalue\n \n=\n \na\n[\n2\n]\n\n\nprint\n(\nvalue\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMulti-dimensional Array Indexing\n\n\nMulti-dimensional arrays can be indexed as well. A simple 2-D array is defined by a list of lists.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\na\n \n=\n \nnp\n.\narray\n([[\n2\n,\n3\n,\n4\n],[\n6\n,\n7\n,\n8\n]])\n\n\nprint\n(\na\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[[2 3 4]\n [6 7 8]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nValues in a 2-D array can be accessed using the general notation below:\n\n\n<value> = <array>[row,col]\n\n\n\n\nWhere \n<value>\n is the value pulled out of the 2-D array and \n[row,col]\n specifies the row and column index of the value. Remember Python counting starts at \n0\n, so the first row is row zero and the first column is column zero.\n\n\nWe can access the value \n8\n in the array above by calling the row and column index \n[1,2]\n for the 2nd row (remember row 0 is the first row) and the 3rd column (remember column 0 is the first column).\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\na\n \n=\n \nnp\n.\narray\n([[\n2\n,\n3\n,\n4\n],[\n6\n,\n7\n,\n8\n]])\n\n\nvalue\n \n=\n \na\n[\n1\n,\n2\n]\n\n\nprint\n(\nvalue\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssigning Values with Indexing\n\n\nArray indexing is used to \naccess\n values in an array. And array indexing can also be used for \nassigning\n values of an array.\n\n\nThe general form used to assign a value to a particular index or location in an array is below:\n\n\n<array>[index] = <value>\n\n\n\n\nWhere \n<value>\n is the new value going into the array and \n[index]\n is the location the new value will occupy. \n\n\nThe code below puts the value \n10\n into the second index or location of the array \na\n.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\na\n \n=\n \nnp\n.\narray\n([\n2\n,\n4\n,\n6\n])\n\n\na\n[\n2\n]\n \n=\n \n10\n\n\nprint\n(\na\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[ 2  4 10]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nValues can also be assigned to a particular location in a 2-D arrays using the form:\n\n\n<array>[row,col] = <value>\n\n\n\n\nThe code example below shows the value \n20\n assigned to the 2nd column and 3rd row of the array.\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\na\n \n=\n \nnp\n.\narray\n([[\n2\n,\n3\n,\n4\n],[\n6\n,\n7\n,\n8\n]])\n\n\nprint\n(\na\n)\n\n\na\n[\n1\n,\n2\n]\n=\n20\n\n\nprint\n(\na\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[[2 3 4]\n [6 7 8]]\n[[ 2  3  4]\n [ 6  7 20]]",
            "title": "Array Indexing"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.04-Array-Indexing/#array-indexing",
            "text": "Elements in NumPy arrays can be accessed by  indexing . Indexing is an operation that pulls out a select set of values from an array. The  index  of a value in an array is that value's  location  within the array. There is a difference between  the value  and  where the value is stored  in an array.   An array with 3 values is created in the code section below.   In\u00a0[1]:  \n      import   numpy   as   np  a   =   np . array ([ 2 , 4 , 6 ])      \nThe array above contains three values:  2 ,  4  and  6 . Each of these values has a different index.   Remember counting in Python starts at  0  and ends at  n-1 .  The value  2  has an index of 0.  2  is in the 0 location of the array. The value  4  has an index of  1  and the value  6  has an index of  2 . The table below shows the index of each value in the array.     Index (or location)  Value      0  2    1  4    2  6     Individual values stored in an array can be accessed with indexing.   The general form to index a NumPy array is:  <value> = <array>[index]  Where  <value>  is the value stored in the array,  <array>  is the array object name and  [index]  specifies the index or location of that value.   In the array above, the value 6 is stored at index 2.   In\u00a0[1]:  \n      import   numpy   as   np  a   =   np . array ([ 2 , 4 , 6 ])  value   =   a [ 2 ]  print ( value )           6",
            "title": "Array Indexing"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.04-Array-Indexing/#multi-dimensional-array-indexing",
            "text": "Multi-dimensional arrays can be indexed as well. A simple 2-D array is defined by a list of lists.   In\u00a0[3]:  \n      import   numpy   as   np  a   =   np . array ([[ 2 , 3 , 4 ],[ 6 , 7 , 8 ]])  print ( a )           [[2 3 4]\n [6 7 8]]      \nValues in a 2-D array can be accessed using the general notation below:  <value> = <array>[row,col]  Where  <value>  is the value pulled out of the 2-D array and  [row,col]  specifies the row and column index of the value. Remember Python counting starts at  0 , so the first row is row zero and the first column is column zero.  We can access the value  8  in the array above by calling the row and column index  [1,2]  for the 2nd row (remember row 0 is the first row) and the 3rd column (remember column 0 is the first column).   In\u00a0[4]:  \n      import   numpy   as   np  a   =   np . array ([[ 2 , 3 , 4 ],[ 6 , 7 , 8 ]])  value   =   a [ 1 , 2 ]  print ( value )           8",
            "title": "Multi-dimensional Array Indexing"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.04-Array-Indexing/#assigning-values-with-indexing",
            "text": "Array indexing is used to  access  values in an array. And array indexing can also be used for  assigning  values of an array.  The general form used to assign a value to a particular index or location in an array is below:  <array>[index] = <value>  Where  <value>  is the new value going into the array and  [index]  is the location the new value will occupy.   The code below puts the value  10  into the second index or location of the array  a .   In\u00a0[5]:  \n      import   numpy   as   np  a   =   np . array ([ 2 , 4 , 6 ])  a [ 2 ]   =   10  print ( a )           [ 2  4 10]      \nValues can also be assigned to a particular location in a 2-D arrays using the form:  <array>[row,col] = <value>  The code example below shows the value  20  assigned to the 2nd column and 3rd row of the array.   In\u00a0[6]:  \n      import   numpy   as   np  a   =   np . array ([[ 2 , 3 , 4 ],[ 6 , 7 , 8 ]])  print ( a )  a [ 1 , 2 ] = 20  print ( a )           [[2 3 4]\n [6 7 8]]\n[[ 2  3  4]\n [ 6  7 20]]",
            "title": "Assigning Values with Indexing"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.05-Array-Slicing/",
            "text": "Array Slicing\n\n\nMultiple values stored within an array can be accessed simultaneously with array \nslicing\n. To pull out a section or slice of an array, the colon operator \n:\n is used when calling the index. The general form is:\n\n\n<slice> = <array>[start:stop]\n\n\n\n\nWhere \n<slice>\n is the slice or section of the array object \n<array>\n. The index of the slice is specified in \n[start:stop]\n. Remember Python counting starts at \n0\n and ends at \nn-1\n. The index \n[0:2]\n pulls the first two values out of an array. The index \n[1:3]\n pulls the second and third values out of an array.\n\n\nAn example of array slicing the first two elements out of an array is below.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\na\n \n=\n \nnp\n.\narray\n([\n2\n,\n \n4\n,\n \n6\n])\n\n\nb\n \n=\n \na\n[\n0\n:\n2\n]\n\n\nprint\n(\nb\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[2 4]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA blank stands in for the last index. The slicing operation \n[1:]\n pulls out the 2nd through the last values of an array.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\na\n \n=\n \nnp\n.\narray\n([\n2\n,\n \n4\n,\n \n6\n,\n \n8\n])\n\n\nb\n \n=\n \na\n[\n1\n:]\n\n\nprint\n(\nb\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[4 6 8]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA blank also stands in for the first index. The slicing operation \n[:3]\n pulls out the first through third values of an array.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\na\n \n=\n \nnp\n.\narray\n([\n2\n,\n \n4\n,\n \n6\n,\n \n8\n])\n\n\nb\n \n=\n \na\n[:\n3\n]\n\n\nprint\n(\nb\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[2 4 6]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSlicing 2D Arrays\n\n\n2D NumPy arrays can be sliced with the general form:\n\n\n<slice> = <array>[start_row:end_row, start_col:end_col]\n\n\n\n\nThe code section below creates a two row by four column array and indexes out the first two rows and the first three columns.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\na\n \n=\n \nnp\n.\narray\n([[\n2\n,\n \n4\n,\n \n6\n,\n \n8\n],\n \n[\n10\n,\n \n20\n,\n \n30\n,\n \n40\n]])\n\n\nb\n \n=\n \na\n[\n0\n:\n2\n,\n \n0\n:\n3\n]\n\n\nprint\n(\nb\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[[ 2  4  6]\n [10 20 30]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAgain, a blank represents the first index or the last index. The colon operator also represents \"all\". \n\n\nThe code section below slices out the first two rows and all columns from array \na\n.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\na\n \n=\n \nnp\n.\narray\n([[\n2\n,\n \n4\n,\n \n6\n,\n \n8\n],\n \n[\n10\n,\n \n20\n,\n \n30\n,\n \n40\n]])\n\n\nb\n \n=\n \na\n[:\n2\n,\n \n:]\n  \n#[first two rows, all columns]\n\n\nprint\n(\nb\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[[ 2  4  6  8]\n [10 20 30 40]]",
            "title": "Array Slicing"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.05-Array-Slicing/#array-slicing",
            "text": "Multiple values stored within an array can be accessed simultaneously with array  slicing . To pull out a section or slice of an array, the colon operator  :  is used when calling the index. The general form is:  <slice> = <array>[start:stop]  Where  <slice>  is the slice or section of the array object  <array> . The index of the slice is specified in  [start:stop] . Remember Python counting starts at  0  and ends at  n-1 . The index  [0:2]  pulls the first two values out of an array. The index  [1:3]  pulls the second and third values out of an array.  An example of array slicing the first two elements out of an array is below.   In\u00a0[1]:  \n      import   numpy   as   np  a   =   np . array ([ 2 ,   4 ,   6 ])  b   =   a [ 0 : 2 ]  print ( b )           [2 4]      \nA blank stands in for the last index. The slicing operation  [1:]  pulls out the 2nd through the last values of an array.   In\u00a0[2]:  \n      import   numpy   as   np  a   =   np . array ([ 2 ,   4 ,   6 ,   8 ])  b   =   a [ 1 :]  print ( b )           [4 6 8]      \nA blank also stands in for the first index. The slicing operation  [:3]  pulls out the first through third values of an array.   In\u00a0[3]:  \n      import   numpy   as   np  a   =   np . array ([ 2 ,   4 ,   6 ,   8 ])  b   =   a [: 3 ]  print ( b )           [2 4 6]",
            "title": "Array Slicing"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.05-Array-Slicing/#slicing-2d-arrays",
            "text": "2D NumPy arrays can be sliced with the general form:  <slice> = <array>[start_row:end_row, start_col:end_col]  The code section below creates a two row by four column array and indexes out the first two rows and the first three columns.   In\u00a0[4]:  \n      import   numpy   as   np  a   =   np . array ([[ 2 ,   4 ,   6 ,   8 ],   [ 10 ,   20 ,   30 ,   40 ]])  b   =   a [ 0 : 2 ,   0 : 3 ]  print ( b )           [[ 2  4  6]\n [10 20 30]]      \nAgain, a blank represents the first index or the last index. The colon operator also represents \"all\".   The code section below slices out the first two rows and all columns from array  a .   In\u00a0[5]:  \n      import   numpy   as   np  a   =   np . array ([[ 2 ,   4 ,   6 ,   8 ],   [ 10 ,   20 ,   30 ,   40 ]])  b   =   a [: 2 ,   :]    #[first two rows, all columns]  print ( b )           [[ 2  4  6  8]\n [10 20 30 40]]",
            "title": "Slicing 2D Arrays"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.06-Array-Opperations/",
            "text": "Array Operations\n\n\nMathematical operations can be completed using NumPy arrays. \n\n\nScalar Addition\n\n\nScalars can be added and subtracted from arrays and arrays can be added and subtracted from each other:\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\na\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n2\n,\n \n3\n])\n\n\nb\n \n=\n \na\n \n+\n \n2\n\n\nprint\n(\nb\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[3 4 5]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\na\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n2\n,\n \n3\n])\n\n\nb\n \n=\n \nnp\n.\narray\n([\n2\n,\n \n4\n,\n \n6\n])\n\n\nc\n \n=\n \na\n \n+\n \nb\n\n\nprint\n(\nc\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[3 6 9]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScalar Multiplication\n\n\nNumPy arrays can be multiplied and divided by scalar integers and floats:\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\na\n \n=\n \nnp\n.\narray\n([\n1\n,\n2\n,\n3\n])\n\n\nb\n \n=\n \n3\n*\na\n\n\nprint\n(\nb\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[3 6 9]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\na\n \n=\n \nnp\n.\narray\n([\n10\n,\n20\n,\n30\n])\n\n\nb\n \n=\n \na\n/\n2\n\n\nprint\n(\nb\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[ 5. 10. 15.]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray Multiplication\n\n\nNumPy array can be multiplied by each other using matrix multiplication. These matrix multiplication methods include element-wise multiplication, the dot product, and the cross product.\n\n\nElement-wise Multiplication\n\n\nThe standard multiplication sign in Python \n*\n produces element-wise multiplication on NumPy arrays.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\na\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n2\n,\n \n3\n])\n\n\nb\n \n=\n \nnp\n.\narray\n([\n4\n,\n \n5\n,\n \n6\n])\n\n\na\n \n*\n \nb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[5]:\n\n\n\n\n\n\n\n\narray([ 4, 10, 18])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDot Product\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\na\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n2\n,\n \n3\n])\n\n\nb\n \n=\n \nnp\n.\narray\n([\n4\n,\n \n5\n,\n \n6\n])\n\n\nnp\n.\ndot\n(\na\n,\nb\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[6]:\n\n\n\n\n\n\n\n\n32\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCross Product\n\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\na\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n2\n,\n \n3\n])\n\n\nb\n \n=\n \nnp\n.\narray\n([\n4\n,\n \n5\n,\n \n6\n])\n\n\nnp\n.\ncross\n(\na\n,\n \nb\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[7]:\n\n\n\n\n\n\n\n\narray([-3,  6, -3])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExponents and Logarithms\n\n\nnp.exp()\n\n\nNumPy's \nnp.exp()\n function produces element-wise \ne^x\ne^x\n exponentiation.\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\na\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n2\n,\n \n3\n])\n\n\nnp\n.\nexp\n(\na\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[8]:\n\n\n\n\n\n\n\n\narray([ 2.71828183,  7.3890561 , 20.08553692])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLogarithms\n\n\nNumPy has three logarithmic functions.\n\n\n\n\nnp.log()\n - natural logarithm (log base \ne\ne\n)\n\n\nnp.log2()\n - logarithm base 2\n\n\nnp.log10()\n - logarithm base 10\n\n\n\n\n\nIn\u00a0[9]:\n\n\n\n    \n\n\nnp\n.\nlog\n(\nnp\n.\ne\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[9]:\n\n\n\n\n\n\n\n\n1.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nnp\n.\nlog2\n(\n16\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[10]:\n\n\n\n\n\n\n\n\n4.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[11]:\n\n\n\n    \n\n\nnp\n.\nlog10\n(\n1000\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[11]:\n\n\n\n\n\n\n\n\n3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrigonometry\n\n\nNumPy also contains all of the standard trigonometry functions which operate on arrays. \n\n\n\n\nnp.sin()\n - sin\n\n\nnp.cos()\n - cosine\n\n\nnp.tan()\n - tangent\n\n\nnp.asin()\n - arc sine\n\n\nnp.acos()\n - arc cosine\n\n\nnp.atan()\n - arc tangent\n\n\nnp.hypot()\n - given sides of a triangle, returns hypotenuse\n\n\n\n\n\nIn\u00a0[12]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nnp\n.\nset_printoptions\n(\n4\n)\n\n\n\n\na\n \n=\n \nnp\n.\narray\n([\n0\n,\n \nnp\n.\npi\n/\n4\n,\n \nnp\n.\npi\n/\n3\n,\n \nnp\n.\npi\n/\n2\n])\n\n\nprint\n(\nnp\n.\nsin\n(\na\n))\n\n\nprint\n(\nnp\n.\ncos\n(\na\n))\n\n\nprint\n(\nnp\n.\ntan\n(\na\n))\n\n\nprint\n(\nf\n\"Sides 3 and 4, hypotenuse {np.hypot(3,4)}\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[0.     0.7071 0.866  1.    ]\n[1.0000e+00 7.0711e-01 5.0000e-01 6.1232e-17]\n[0.0000e+00 1.0000e+00 1.7321e+00 1.6331e+16]\nSides 3 and 4, hypotenuse 5.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNumPy contains functions to convert arrays of angles between degrees and radians.\n\n\n\n\ndeg2rad()\n - convert from degrees to radians\n\n\nrad2deg()\n - convert from radians to degrees\n\n\n\n\n\n\n\n\nIn\u00a0[13]:\n\n\n\n    \n\n\na\n \n=\n \nnp\n.\narray\n([\nnp\n.\npi\n,\n2\n*\nnp\n.\npi\n])\n\n\nnp\n.\nrad2deg\n(\na\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[13]:\n\n\n\n\n\n\n\n\narray([180., 360.])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[14]:\n\n\n\n    \n\n\na\n \n=\n \nnp\n.\narray\n([\n0\n,\n90\n,\n \n180\n,\n \n270\n])\n\n\nnp\n.\ndeg2rad\n(\na\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[14]:\n\n\n\n\n\n\n\n\narray([0.    , 1.5708, 3.1416, 4.7124])",
            "title": "Array Operations"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.06-Array-Opperations/#array-operations",
            "text": "Mathematical operations can be completed using NumPy arrays.",
            "title": "Array Operations"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.06-Array-Opperations/#scalar-addition",
            "text": "Scalars can be added and subtracted from arrays and arrays can be added and subtracted from each other:   In\u00a0[1]:  \n      import   numpy   as   np  a   =   np . array ([ 1 ,   2 ,   3 ])  b   =   a   +   2  print ( b )           [3 4 5]         In\u00a0[2]:  \n      a   =   np . array ([ 1 ,   2 ,   3 ])  b   =   np . array ([ 2 ,   4 ,   6 ])  c   =   a   +   b  print ( c )           [3 6 9]",
            "title": "Scalar Addition"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.06-Array-Opperations/#scalar-multiplication",
            "text": "NumPy arrays can be multiplied and divided by scalar integers and floats:   In\u00a0[3]:  \n      a   =   np . array ([ 1 , 2 , 3 ])  b   =   3 * a  print ( b )           [3 6 9]         In\u00a0[4]:  \n      a   =   np . array ([ 10 , 20 , 30 ])  b   =   a / 2  print ( b )           [ 5. 10. 15.]",
            "title": "Scalar Multiplication"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.06-Array-Opperations/#array-multiplication",
            "text": "NumPy array can be multiplied by each other using matrix multiplication. These matrix multiplication methods include element-wise multiplication, the dot product, and the cross product.",
            "title": "Array Multiplication"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.06-Array-Opperations/#element-wise-multiplication",
            "text": "The standard multiplication sign in Python  *  produces element-wise multiplication on NumPy arrays.   In\u00a0[5]:  \n      a   =   np . array ([ 1 ,   2 ,   3 ])  b   =   np . array ([ 4 ,   5 ,   6 ])  a   *   b         Out[5]:   array([ 4, 10, 18])",
            "title": "Element-wise Multiplication"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.06-Array-Opperations/#dot-product",
            "text": "In\u00a0[6]:  \n      a   =   np . array ([ 1 ,   2 ,   3 ])  b   =   np . array ([ 4 ,   5 ,   6 ])  np . dot ( a , b )         Out[6]:   32",
            "title": "Dot Product"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.06-Array-Opperations/#cross-product",
            "text": "In\u00a0[7]:  \n      a   =   np . array ([ 1 ,   2 ,   3 ])  b   =   np . array ([ 4 ,   5 ,   6 ])  np . cross ( a ,   b )         Out[7]:   array([-3,  6, -3])",
            "title": "Cross Product"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.06-Array-Opperations/#exponents-and-logarithms",
            "text": "",
            "title": "Exponents and Logarithms"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.06-Array-Opperations/#npexp",
            "text": "NumPy's  np.exp()  function produces element-wise  e^x e^x  exponentiation.   In\u00a0[8]:  \n      a   =   np . array ([ 1 ,   2 ,   3 ])  np . exp ( a )         Out[8]:   array([ 2.71828183,  7.3890561 , 20.08553692])",
            "title": "np.exp()"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.06-Array-Opperations/#logarithms",
            "text": "NumPy has three logarithmic functions.   np.log()  - natural logarithm (log base  e e )  np.log2()  - logarithm base 2  np.log10()  - logarithm base 10   In\u00a0[9]:  \n      np . log ( np . e )          Out[9]:   1.0         In\u00a0[10]:  \n      np . log2 ( 16 )         Out[10]:   4.0         In\u00a0[11]:  \n      np . log10 ( 1000 )         Out[11]:   3.0",
            "title": "Logarithms"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.06-Array-Opperations/#trigonometry",
            "text": "NumPy also contains all of the standard trigonometry functions which operate on arrays.    np.sin()  - sin  np.cos()  - cosine  np.tan()  - tangent  np.asin()  - arc sine  np.acos()  - arc cosine  np.atan()  - arc tangent  np.hypot()  - given sides of a triangle, returns hypotenuse   In\u00a0[12]:  \n      import   numpy   as   np  np . set_printoptions ( 4 )   a   =   np . array ([ 0 ,   np . pi / 4 ,   np . pi / 3 ,   np . pi / 2 ])  print ( np . sin ( a ))  print ( np . cos ( a ))  print ( np . tan ( a ))  print ( f \"Sides 3 and 4, hypotenuse {np.hypot(3,4)}\" )           [0.     0.7071 0.866  1.    ]\n[1.0000e+00 7.0711e-01 5.0000e-01 6.1232e-17]\n[0.0000e+00 1.0000e+00 1.7321e+00 1.6331e+16]\nSides 3 and 4, hypotenuse 5.0      \nNumPy contains functions to convert arrays of angles between degrees and radians.   deg2rad()  - convert from degrees to radians  rad2deg()  - convert from radians to degrees     In\u00a0[13]:  \n      a   =   np . array ([ np . pi , 2 * np . pi ])  np . rad2deg ( a )         Out[13]:   array([180., 360.])         In\u00a0[14]:  \n      a   =   np . array ([ 0 , 90 ,   180 ,   270 ])  np . deg2rad ( a )         Out[14]:   array([0.    , 1.5708, 3.1416, 4.7124])",
            "title": "Trigonometry"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.07-Systems-of-Linear-Equations/",
            "text": "Systems of Linear Equations\n\n\nSystems of linear equations can be solved with arrays and NumPy.\nA system of linear equations is shown below:\n\n\n\n\n 8x + 3y -2z = 9 \n\n\n 8x + 3y -2z = 9 \n\n\n\n\n\n\n -4x + 7y + 5z = 15 \n\n\n -4x + 7y + 5z = 15 \n\n\n\n\n$$ 3x + 4y - 12z = 35 $$\nNumPy's \nnp.linalg.solve()\n function can be used to solve this system of equations for the variables \nx\nx\n, \ny\ny\n and \nz\nz\n. \n\n\nThe steps to solve the system of linear equations with \nnp.linalg.solve()\n are below:\n\n\n\n\nCreate NumPy array \nA\n as a 3 by 3 array of the coefficients\n\n\nCreate a NumPy array \nb\n as the right-hand side of the equations\n\n\nSolve for the values of \nx\nx\n, \ny\ny\n and \nz\nz\n using \nnp.linalg.solve(A, b)\n. \n\n\n\n\nThe resulting array has three entries. One entry for each variable. \n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nA\n \n=\n \nnp\n.\narray\n([[\n8\n,\n \n3\n,\n \n-\n2\n],\n \n[\n-\n4\n,\n \n7\n,\n \n5\n],\n \n[\n3\n,\n \n4\n,\n \n-\n12\n]])\n\n\nb\n \n=\n \nnp\n.\narray\n([\n9\n,\n \n15\n,\n \n35\n])\n\n\nx\n \n=\n \nnp\n.\nlinalg\n.\nsolve\n(\nA\n,\n \nb\n)\n\n\nx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[1]:\n\n\n\n\n\n\n\n\narray([-0.58226371,  3.22870478, -1.98599767])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can plug the valuse of \nx\nx\n, \ny\ny\n and \nz\nz\n back into one of the equations to check the answer. \n\n\nx\nx\n is the first entry of the array, \ny\ny\n is the second entry of the array, and \nz\nz\n is the third entry of the array.\n\n\nx\nx\n = \nx[0]\n\n\ny\ny\n = \nx[1]\n\n\nz\nz\n = \nx[2]\n\n\nWhen these values are plugged into the equation from above:\n\n\n\n\n 8x + 3y -2z = 9 \n\n\n 8x + 3y -2z = 9 \n\n\n\n\nThe answer should be \n9.0\n.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\n8\n \n \nx\n[\n0\n]\n \n+\n \n3\n \n \nx\n[\n1\n]\n \n-\n \n2\n \n*\n \nx\n[\n2\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\n9.0",
            "title": "Systems of Linear Equations"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.07-Systems-of-Linear-Equations/#systems-of-linear-equations",
            "text": "Systems of linear equations can be solved with arrays and NumPy.\nA system of linear equations is shown below:    8x + 3y -2z = 9    8x + 3y -2z = 9      -4x + 7y + 5z = 15    -4x + 7y + 5z = 15    $$ 3x + 4y - 12z = 35 $$\nNumPy's  np.linalg.solve()  function can be used to solve this system of equations for the variables  x x ,  y y  and  z z .   The steps to solve the system of linear equations with  np.linalg.solve()  are below:   Create NumPy array  A  as a 3 by 3 array of the coefficients  Create a NumPy array  b  as the right-hand side of the equations  Solve for the values of  x x ,  y y  and  z z  using  np.linalg.solve(A, b) .    The resulting array has three entries. One entry for each variable.    In\u00a0[1]:  \n      import   numpy   as   np  A   =   np . array ([[ 8 ,   3 ,   - 2 ],   [ - 4 ,   7 ,   5 ],   [ 3 ,   4 ,   - 12 ]])  b   =   np . array ([ 9 ,   15 ,   35 ])  x   =   np . linalg . solve ( A ,   b )  x         Out[1]:   array([-0.58226371,  3.22870478, -1.98599767])      \nWe can plug the valuse of  x x ,  y y  and  z z  back into one of the equations to check the answer.   x x  is the first entry of the array,  y y  is the second entry of the array, and  z z  is the third entry of the array.  x x  =  x[0]  y y  =  x[1]  z z  =  x[2]  When these values are plugged into the equation from above:    8x + 3y -2z = 9    8x + 3y -2z = 9    The answer should be  9.0 .   In\u00a0[2]:  \n      8     x [ 0 ]   +   3     x [ 1 ]   -   2   *   x [ 2 ]         Out[2]:   9.0",
            "title": "Systems of Linear Equations"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.08-Summary/",
            "text": "Summary\n\n\nIn this chapter, you learned how to work with NumPy arrays. NumPy is a Python package used for numerical calculations and arrays. An array is a data structure only contains objects that share the same data type. Arrays are faster than lists in large-scale numerical calculations. \n\n\nYou learned how to create arrays in a variety of ways:\n\n\n\n\nCreate an array from a Python list with \nnp.array()\n\n\nCreate an array of regularly spaced numbers with \nnp.arange()\n, \nnp.linspace()\n, and \nnp.logspace\n\n\nCreate an array of random numbers with \nnp.random.ranint()\n, \nnp.random.rand()\n, and \nnp.random.randn()\n\n\nCreate two 2D arrays from two 1D arrays with \nnp.meshgrid()\n and \nnp.mgrid()\n\n\n\n\nYou learned how to index and slice arrays. Slicing NumPy arrays share the same syntax used to slice Python lists and strings.\n\n\nAt the end of the chapter, you learned how to run mathematical operations on arrays. NumPy's mathematical functions operate on arrays like Python's math functions operate on integers and floats. NumPy has additional functions like \nnp.dot()\n and \nnp.cross()\n that cannot be applied to scalars. NumPy's \nnp.linalg.solve()\n function can be used to solve systems of linear equations.\n\n\nKey Terms and Concepts\n\n\nNumPy\n\n\narray\n\n\nscalar\n\n\ncomputationally expensive\n\n\nslice\n\n\nindex\n\n\ndata type\n\n\nhomogenous\n\n\nhomogenous data type\n\n\nelement-wise\n\n\nsystem of linear equations\n\n\nattribute\n\n\nscientific computing\n\n\nUnicode\n\n\niterable\n\n\nlogarithmically spaced numbers\n\n\nnormal distribution\n\n\nmeshgrid\n\n\nmatrix multiplication methods\n\n\ndot product\n\n\ncross product",
            "title": "Summary"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.08-Summary/#summary",
            "text": "In this chapter, you learned how to work with NumPy arrays. NumPy is a Python package used for numerical calculations and arrays. An array is a data structure only contains objects that share the same data type. Arrays are faster than lists in large-scale numerical calculations.   You learned how to create arrays in a variety of ways:   Create an array from a Python list with  np.array()  Create an array of regularly spaced numbers with  np.arange() ,  np.linspace() , and  np.logspace  Create an array of random numbers with  np.random.ranint() ,  np.random.rand() , and  np.random.randn()  Create two 2D arrays from two 1D arrays with  np.meshgrid()  and  np.mgrid()   You learned how to index and slice arrays. Slicing NumPy arrays share the same syntax used to slice Python lists and strings.  At the end of the chapter, you learned how to run mathematical operations on arrays. NumPy's mathematical functions operate on arrays like Python's math functions operate on integers and floats. NumPy has additional functions like  np.dot()  and  np.cross()  that cannot be applied to scalars. NumPy's  np.linalg.solve()  function can be used to solve systems of linear equations.",
            "title": "Summary"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.08-Summary/#key-terms-and-concepts",
            "text": "NumPy  array  scalar  computationally expensive  slice  index  data type  homogenous  homogenous data type  element-wise  system of linear equations  attribute  scientific computing  Unicode  iterable  logarithmically spaced numbers  normal distribution  meshgrid  matrix multiplication methods  dot product  cross product",
            "title": "Key Terms and Concepts"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.10-Review-Questions/",
            "text": "Review Questions\n\n\nArray Creation\n\n\nQ09.01 Create an array of the numbers 1, 5, 19, 30\n\n\nQ09.02 Create an array of the numbers -3, 15, 0.001, 6.02e23$\n\n\nQ09.03 Create an array of integers between -10 and 10\n\n\nQ09.04 Create an array of 10 angles between 0 and 2\n\\pi\n\\pi\n\n\nQ09.05 Create an array of logarithmically spaced numbers between 1 and 1 million\n\n\nQ09.06 Create an array of 20 random integers between 1 and 10\n\n\nQ09.07 Create an array of 30 random numbers with a normal distribution\n\n\nQ09.08 Create an array of 30 random numbers with a normal distribution that has an mean \n\\mu\n\\mu\n of 78.5 and a standard deviation \n\\sigma\n\\sigma\n of 5.2\n\n\nQ09.09 Create an array of 18 random floating point numbers between 0 and 1\n\n\nQ09.09 Create an array of 18 random floating point numbers between -1 and 0\n\n\nQ09.09 Create an array of 18 random floating point numbers between 0 and 10\n\n\nMeshgrids\n\n\nQ09.40 Create two 2D arrays from the two 1D arrays below using NumPy's \nnp.meshgrid()\n function. \n\n\n\nx = [0.0, 0.1., 0.2, 0.3, 0.4, 0.5]\n\ny = [0, 2, 4, 6]\n\n\n\n\nQ09.41 Create a meshgrid of the two arrays below:\n\n\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\ny = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n\n\nUse element-wise multiplication to multiple each element in one of the resulting 2D arrays with the other resulting 2D array to build a multiplication table.\n\n\nArray Operations\n\n\nQ09.50 Create the two arrays below and perform each calculation.\n\n\na = [2 4 6]\n\n\nb = [-1 0 1]\n\n\n(a) \na + b\na + b\n\n\n(b) \n1.5a -2b\n1.5a -2b\n\n\n(c) \n0.5ab\n0.5ab\n\n\n(d) \n\\frac{b^2}{a}\n\\frac{b^2}{a}\n\n\nQ09.51 Create an array of angles between 0 and 2\n\\pi\n\\pi\n radians in increments of \n\\pi/2 radians\n\\pi/2 radians\n.\n\n\n(a) Calculate the sine of each angle in the array\n\n\n(b) Calculate the cosine of each angle in the array\n\n\n(c) Convert each angle in the array to degrees\n\n\nQ09.52 Create the two arrays below and then perform the following operations.\n\n\nF1 = [-1, 0, 2]\n\n\nF2 = [5, -2, 0]\n\n\n(a) Calculate the dot product of F1 and F2\n\n\n(b) Calculate cross product of F1 and F2\n\n\n(c) Calculate the element-wise product (element-wise multiplication of F1 and F2)\n\n\nLinear Algebra\n\n\nQ09.70 Use the system of linear equations below to calculate the values of \nx\nx\n and \ny\ny\n.\n\n\n\n\n 4x - 2y = -42 \n\n\n 4x - 2y = -42 \n\n\n\n\n\n\n -6x + y = 31 \n\n\n -6x + y = 31 \n\n\n\n\nQ09.70 Use the system of linear equations below to calculate the values of \nx\nx\n, \ny\ny\n and \nz\nz\n.\n\n\n\n\n \\frac{x}{2} +2y - z = 5 \n\n\n \\frac{x}{2} +2y - z = 5 \n\n\n\n\n\n\n x + 3y - 4z = -1 \n\n\n x + 3y - 4z = -1 \n\n\n\n\n\n\n -x - 3y + 2z = -5 \n\n\n -x - 3y + 2z = -5",
            "title": "Review Questions"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.10-Review-Questions/#review-questions",
            "text": "",
            "title": "Review Questions"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.10-Review-Questions/#array-creation",
            "text": "Q09.01 Create an array of the numbers 1, 5, 19, 30  Q09.02 Create an array of the numbers -3, 15, 0.001, 6.02e23$  Q09.03 Create an array of integers between -10 and 10  Q09.04 Create an array of 10 angles between 0 and 2 \\pi \\pi  Q09.05 Create an array of logarithmically spaced numbers between 1 and 1 million  Q09.06 Create an array of 20 random integers between 1 and 10  Q09.07 Create an array of 30 random numbers with a normal distribution  Q09.08 Create an array of 30 random numbers with a normal distribution that has an mean  \\mu \\mu  of 78.5 and a standard deviation  \\sigma \\sigma  of 5.2  Q09.09 Create an array of 18 random floating point numbers between 0 and 1  Q09.09 Create an array of 18 random floating point numbers between -1 and 0  Q09.09 Create an array of 18 random floating point numbers between 0 and 10",
            "title": "Array Creation"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.10-Review-Questions/#meshgrids",
            "text": "Q09.40 Create two 2D arrays from the two 1D arrays below using NumPy's  np.meshgrid()  function.   \nx = [0.0, 0.1., 0.2, 0.3, 0.4, 0.5]\n\ny = [0, 2, 4, 6]  Q09.41 Create a meshgrid of the two arrays below:  \nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\ny = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  Use element-wise multiplication to multiple each element in one of the resulting 2D arrays with the other resulting 2D array to build a multiplication table.",
            "title": "Meshgrids"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.10-Review-Questions/#array-operations",
            "text": "Q09.50 Create the two arrays below and perform each calculation.  a = [2 4 6]  b = [-1 0 1]  (a)  a + b a + b  (b)  1.5a -2b 1.5a -2b  (c)  0.5ab 0.5ab  (d)  \\frac{b^2}{a} \\frac{b^2}{a}  Q09.51 Create an array of angles between 0 and 2 \\pi \\pi  radians in increments of  \\pi/2 radians \\pi/2 radians .  (a) Calculate the sine of each angle in the array  (b) Calculate the cosine of each angle in the array  (c) Convert each angle in the array to degrees  Q09.52 Create the two arrays below and then perform the following operations.  F1 = [-1, 0, 2]  F2 = [5, -2, 0]  (a) Calculate the dot product of F1 and F2  (b) Calculate cross product of F1 and F2  (c) Calculate the element-wise product (element-wise multiplication of F1 and F2)",
            "title": "Array Operations"
        },
        {
            "location": "/09-Matricies-and-Arrays/09.10-Review-Questions/#linear-algebra",
            "text": "Q09.70 Use the system of linear equations below to calculate the values of  x x  and  y y .    4x - 2y = -42    4x - 2y = -42      -6x + y = 31    -6x + y = 31    Q09.70 Use the system of linear equations below to calculate the values of  x x ,  y y  and  z z .    \\frac{x}{2} +2y - z = 5    \\frac{x}{2} +2y - z = 5      x + 3y - 4z = -1    x + 3y - 4z = -1      -x - 3y + 2z = -5    -x - 3y + 2z = -5",
            "title": "Linear Algebra"
        },
        {
            "location": "/10-Symbolic-Math/10.00-Introduction/",
            "text": "Symbolic Math\n\n\nIntroduction\n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nDefine Python variables as symbolic math variables\n\n\n\n\n\n\nDefine mathematical expressions and equations using symbolic math variables\n\n\n\n\n\n\nSolve for symbolic math variables in terms of other symbolic math variables\n\n\n\n\n\n\nDerive numerical solutions using symbolic math variable substitution\n\n\n\n\n\n\nSolve linear and quadratic equations using symbolic math\n\n\n\n\n\n\nSolve systems of equations using symbolic math",
            "title": "Introduction"
        },
        {
            "location": "/10-Symbolic-Math/10.00-Introduction/#symbolic-math",
            "text": "",
            "title": "Symbolic Math"
        },
        {
            "location": "/10-Symbolic-Math/10.00-Introduction/#introduction",
            "text": "By the end of this chapter you will be able to:    Define Python variables as symbolic math variables    Define mathematical expressions and equations using symbolic math variables    Solve for symbolic math variables in terms of other symbolic math variables    Derive numerical solutions using symbolic math variable substitution    Solve linear and quadratic equations using symbolic math    Solve systems of equations using symbolic math",
            "title": "Introduction"
        },
        {
            "location": "/10-Symbolic-Math/10.01-SymPy/",
            "text": "SymPy\n\n\nSymPy \nhttp://www.sympy.org\n is a Python library for \nsymbolic math\n.  \n\n\nIn symbolic math, symbols are used to represent mathematical expressions. An example of a symbolic math expression is below.\n\n\n\n\n x^{2} + y^{2} = z \n\n\n x^{2} + y^{2} = z \n\n\n\n\nThe expression contains the symbols \nx\nx\n, \ny\ny\n, and \nz\nz\n.\n\n\nIf we define a second symbolic math expression:\n\n\n\n\n x = a + b \n\n\n x = a + b \n\n\n\n\nthen we can substitue in \na + b\na + b\n for \nx\nx\n.\n\n\nThe result is the expression:\n\n\n\n\n (a + b)^{2} + y^{2} = z \n\n\n (a + b)^{2} + y^{2} = z \n\n\n\n\n\n\n a^{2} + 2ab + b^{2} + y^{2} = z \n\n\n a^{2} + 2ab + b^{2} + y^{2} = z \n\n\n\n\nSolving for \ny\ny\n in terms of \na\na\n,\nb\nb\n and \nz\nz\n, results in:\n\n\n\n\n y = \\sqrt{z - a^{2} - 2ab - b^{2}} \n\n\n y = \\sqrt{z - a^{2} - 2ab - b^{2}} \n\n\n\n\nIn the symbolic math substitution above, symbolic math variables were rearranged, grouped and inserted. None of the variables were equal to a specific number, like 5 or 0.001, but you can still solve for one variable in terms on the other variables.\nIf we have numerical values for \nz\nz\n, \na\na\n and \nb\nb\n, we can use Python to calculate the value of \ny\ny\n. \n\n\nBut if we don't have numerical values for \nz\nz\n, \na\na\n and \nb\nb\n, Python and the SymPy package can be used to rearrange terms and solve for one variable in terms of the other.\n\n\nWorking with mathematical symbols in a programmatic way instead of working with numerical values in a programmatic way is called \nsymbolic math\n.\nTo work with symbolic math in Python, the SymPy library needs to be installed. SymPy comes pre-installed with the Anaconda distribution of Python. If you are not using the Anaconda distribution of Python, SymPy can be installed with the \nAnaconda Prompt\n. Use the command:\n\n\n> conda install sympy",
            "title": "SymPy"
        },
        {
            "location": "/10-Symbolic-Math/10.01-SymPy/#sympy",
            "text": "SymPy  http://www.sympy.org  is a Python library for  symbolic math .    In symbolic math, symbols are used to represent mathematical expressions. An example of a symbolic math expression is below.    x^{2} + y^{2} = z    x^{2} + y^{2} = z    The expression contains the symbols  x x ,  y y , and  z z .  If we define a second symbolic math expression:    x = a + b    x = a + b    then we can substitue in  a + b a + b  for  x x .  The result is the expression:    (a + b)^{2} + y^{2} = z    (a + b)^{2} + y^{2} = z      a^{2} + 2ab + b^{2} + y^{2} = z    a^{2} + 2ab + b^{2} + y^{2} = z    Solving for  y y  in terms of  a a , b b  and  z z , results in:    y = \\sqrt{z - a^{2} - 2ab - b^{2}}    y = \\sqrt{z - a^{2} - 2ab - b^{2}}    In the symbolic math substitution above, symbolic math variables were rearranged, grouped and inserted. None of the variables were equal to a specific number, like 5 or 0.001, but you can still solve for one variable in terms on the other variables.\nIf we have numerical values for  z z ,  a a  and  b b , we can use Python to calculate the value of  y y .   But if we don't have numerical values for  z z ,  a a  and  b b , Python and the SymPy package can be used to rearrange terms and solve for one variable in terms of the other.  Working with mathematical symbols in a programmatic way instead of working with numerical values in a programmatic way is called  symbolic math .\nTo work with symbolic math in Python, the SymPy library needs to be installed. SymPy comes pre-installed with the Anaconda distribution of Python. If you are not using the Anaconda distribution of Python, SymPy can be installed with the  Anaconda Prompt . Use the command:  > conda install sympy",
            "title": "SymPy"
        },
        {
            "location": "/10-Symbolic-Math/10.02-Defining-Varaibles/",
            "text": "Defining Varaibles\n\n\nBefore we can construct symbolic math expressions or symbolic math equations, we first need to create symbolic math variables, also called symbolic math \nsymbols\n.\n\n\nTo define symbolic math variables with SymPy,  first import the \nsymbols()\n function from the SymPy module:\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nfrom\n \nsympy\n \nimport\n \nsymbols\n\n\n\n\n\n\n\n\n\n\n\nSymbolic math symbols are declared using SymPy's \nsymbols()\n function. A string is passed to the \nsymbols()\n function as an input argument and the output is assigned to a SymPy symbols object (not a string).\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nx\n \n=\n \nsymbols\n(\n'x'\n)\n\n\ny\n \n=\n \nsymbols\n(\n'y'\n)\n\n\n\n\n\n\n\n\n\n\n\nSymPy's \nsymbol()\n function can define multiple symbols in the same line of code. Note the input arguments passed to the \nsymbols()\n function is a string, entries separated by a space (no comma) and surrounded by quotes. The output of the \nsymbols()\n function are SymPy symbol objects. Commas separate these output objects (no quotation marks).\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nx\n,\n \ny\n \n=\n \nsymbols\n(\n'x y'\n)",
            "title": "Defining Varaibles"
        },
        {
            "location": "/10-Symbolic-Math/10.02-Defining-Varaibles/#defining-varaibles",
            "text": "Before we can construct symbolic math expressions or symbolic math equations, we first need to create symbolic math variables, also called symbolic math  symbols .  To define symbolic math variables with SymPy,  first import the  symbols()  function from the SymPy module:   In\u00a0[1]:  \n      from   sympy   import   symbols      \nSymbolic math symbols are declared using SymPy's  symbols()  function. A string is passed to the  symbols()  function as an input argument and the output is assigned to a SymPy symbols object (not a string).   In\u00a0[2]:  \n      x   =   symbols ( 'x' )  y   =   symbols ( 'y' )      \nSymPy's  symbol()  function can define multiple symbols in the same line of code. Note the input arguments passed to the  symbols()  function is a string, entries separated by a space (no comma) and surrounded by quotes. The output of the  symbols()  function are SymPy symbol objects. Commas separate these output objects (no quotation marks).   In\u00a0[3]:  \n      x ,   y   =   symbols ( 'x y' )",
            "title": "Defining Varaibles"
        },
        {
            "location": "/10-Symbolic-Math/10.03-Expressions-and-Substitutions/",
            "text": "Expressions and Substitutions\n\n\nSymbolic math variables can be combined into symbolic math expressions. Once in an expression, symbolic math variables can be exchanged with substituion.\n\n\nExpressions\n\n\nA symbolic math expression is a combination of symbolic math variables with numbers and mathematical operators (such as \n+\n,\n-\n,\n/\n and \n*\n. The standard Python rules for calculating numbers apply in SymPy symbolic math expressions.\n\n\nAfter the symbols \nx\n and \ny\n are created, a symbolic math expression using \nx\n and \ny\n can be created.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nfrom\n \nsympy\n \nimport\n \nsymbols\n\n\nx\n,\n \ny\n \n=\n \nsymbols\n(\n'x y'\n)\n\n\nexpr\n \n=\n \n2\n*\nx\n \n+\n \ny\n\n\n\n\n\n\n\n\n\n\n\n\n\nSubstitution\n\n\nUse SymPy's \n.subs()\n method to insert a numerical value into a symbolic math expression. The first argument of the \n.subs()\n method is the variable and the second argument is the numerical value. In the expression above:\n\n\n\n\n 2x +y \n\n\n 2x +y \n\n\n\n\nIf we substitute\n\n\n\n\n x = 2 \n\n\n x = 2 \n\n\n\n\nThe resulting expression should be\n\n\n$$ 2(2) + y $$\n$$ 4 +y $$\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nexpr\n.\nsubs\n(\nx\n,\n \n2\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\ny + 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe \n.subs()\n method does not replace variables in place, it only completes a one-time substitution. If \nexpr\n is called after the \n.subs()\n method is applied, the original \nexpr\n expression is returned.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nexpr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[3]:\n\n\n\n\n\n\n\n\n2*x + y\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo make the substitution permanent, a new expression object needs to be assigned to the output of the \n.subs()\n method.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nexpr\n \n=\n \n2\n*\nx\n \n+\n \ny\n\n\nexpr2\n \n=\n \nexpr\n.\nsubs\n(\nx\n,\n \n2\n)\n\n\nexpr2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[4]:\n\n\n\n\n\n\n\n\ny + 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSymPy variables can also be substituted into SymPy expressions. In the code section below, the symbol \nz\nz\n is substituted for the symbol \nx\nx\n (\nz\nz\n replaces \nx\nx\n).\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nx\n,\n \ny\n,\n \nz\n \n=\n \nsymbols\n(\n'x y z'\n)\n\n\nexpr\n \n=\n \n2\n*\nx\n \n+\n \ny\n\n\nexpr2\n \n=\n \nexpr\n.\nsubs\n(\nx\n,\n \nz\n)\n\n\nexpr2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[5]:\n\n\n\n\n\n\n\n\ny + 2*z\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExpressions can also be substituted into other expressions. Consider the following:\n\n\n\n\n 2x + y \n\n\n 2x + y \n\n\n\n\nsubstitute in \n\n\n\n\n y = 2x^2 + z^{-3} \n\n\n y = 2x^2 + z^{-3} \n\n\n\n\nresults in\n\n\n\n\n 2x + 2x^2 + z^{-3} \n\n\n 2x + 2x^2 + z^{-3} \n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nx\n,\n \ny\n,\n \nz\n \n=\n \nsymbols\n(\n'x y z'\n)\n\n\nexpr\n \n=\n \n2\n*\nx\n \n+\n \ny\n\n\nexpr2\n \n=\n \nexpr\n.\nsubs\n(\ny\n,\n \n2\n*\nx\n**\n2\n \n+\n \nz\n**\n(\n-\n3\n))\n\n\nexpr2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[6]:\n\n\n\n\n\n\n\n\n2*x**2 + 2*x + z**(-3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA practical example involving symbolic math variables, expressions and substitutions could include a large equation and several replacements.\n\n\n\n\n n_0e^{-Q_v/RT} \n\n\n n_0e^{-Q_v/RT} \n\n\n\n\n\n\n n_0 = 3.48 \\times 10^{-6} \n\n\n n_0 = 3.48 \\times 10^{-6} \n\n\n\n\n\n\n Q_v = 12,700 \n\n\n Q_v = 12,700 \n\n\n\n\n\n\n R = 8.31 \n\n\n R = 8.31 \n\n\n\n\n$$ T = 1000 + 273 $$\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nfrom\n \nsympy\n \nimport\n \nsymbols\n,\n \nexp\n\n\nn0\n,\n \nQv\n,\n \nR\n,\n \nT\n \n=\n \nsymbols\n(\n'n0 Qv R T'\n)\n\n\nexpr\n \n=\n \nn0\nexp\n(\n-\nQv\n/\n(\nR\nT\n))\n\n\n\n\n\n\n\n\n\n\n\nMultiply SymPy \nsubs()\n methods can be chained together to substitute multiple variables in one line of code.\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\nexpr\n.\nsubs\n(\nn0\n,\n \n3.48e-6\n)\n.\nsubs\n(\nQv\n,\n12700\n)\n.\nsubs\n(\nR\n,\n \n8031\n)\n.\nsubs\n(\nT\n,\n \n1000\n+\n273\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[8]:\n\n\n\n\n\n\n\n\n3.48e-6*exp(-12700/10223463)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo evaluate an expression as a floating point number, use SymPy's \n.evalf()\n method.\n\n\n\n\n\nIn\u00a0[9]:\n\n\n\n    \n\n\nexpr2\n \n=\n \nexpr\n.\nsubs\n(\nn0\n,\n \n3.48e-6\n)\n.\nsubs\n(\nQv\n,\n12700\n)\n.\nsubs\n(\nR\n,\n \n8031\n)\n.\nsubs\n(\nT\n,\n \n1000\n+\n273\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nexpr2\n.\nevalf\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[10]:\n\n\n\n\n\n\n\n\n3.47567968697765e-6",
            "title": "Expressions and Substitutions"
        },
        {
            "location": "/10-Symbolic-Math/10.03-Expressions-and-Substitutions/#expressions-and-substitutions",
            "text": "Symbolic math variables can be combined into symbolic math expressions. Once in an expression, symbolic math variables can be exchanged with substituion.",
            "title": "Expressions and Substitutions"
        },
        {
            "location": "/10-Symbolic-Math/10.03-Expressions-and-Substitutions/#expressions",
            "text": "A symbolic math expression is a combination of symbolic math variables with numbers and mathematical operators (such as  + , - , /  and  * . The standard Python rules for calculating numbers apply in SymPy symbolic math expressions.  After the symbols  x  and  y  are created, a symbolic math expression using  x  and  y  can be created.   In\u00a0[1]:  \n      from   sympy   import   symbols  x ,   y   =   symbols ( 'x y' )  expr   =   2 * x   +   y",
            "title": "Expressions"
        },
        {
            "location": "/10-Symbolic-Math/10.03-Expressions-and-Substitutions/#substitution",
            "text": "Use SymPy's  .subs()  method to insert a numerical value into a symbolic math expression. The first argument of the  .subs()  method is the variable and the second argument is the numerical value. In the expression above:    2x +y    2x +y    If we substitute    x = 2    x = 2    The resulting expression should be  $$ 2(2) + y $$\n$$ 4 +y $$   In\u00a0[2]:  \n      expr . subs ( x ,   2 )         Out[2]:   y + 4      \nThe  .subs()  method does not replace variables in place, it only completes a one-time substitution. If  expr  is called after the  .subs()  method is applied, the original  expr  expression is returned.   In\u00a0[3]:  \n      expr         Out[3]:   2*x + y      \nTo make the substitution permanent, a new expression object needs to be assigned to the output of the  .subs()  method.   In\u00a0[4]:  \n      expr   =   2 * x   +   y  expr2   =   expr . subs ( x ,   2 )  expr2         Out[4]:   y + 4      \nSymPy variables can also be substituted into SymPy expressions. In the code section below, the symbol  z z  is substituted for the symbol  x x  ( z z  replaces  x x ).   In\u00a0[5]:  \n      x ,   y ,   z   =   symbols ( 'x y z' )  expr   =   2 * x   +   y  expr2   =   expr . subs ( x ,   z )  expr2         Out[5]:   y + 2*z      \nExpressions can also be substituted into other expressions. Consider the following:    2x + y    2x + y    substitute in     y = 2x^2 + z^{-3}    y = 2x^2 + z^{-3}    results in    2x + 2x^2 + z^{-3}    2x + 2x^2 + z^{-3}      In\u00a0[6]:  \n      x ,   y ,   z   =   symbols ( 'x y z' )  expr   =   2 * x   +   y  expr2   =   expr . subs ( y ,   2 * x ** 2   +   z ** ( - 3 ))  expr2         Out[6]:   2*x**2 + 2*x + z**(-3)       A practical example involving symbolic math variables, expressions and substitutions could include a large equation and several replacements.    n_0e^{-Q_v/RT}    n_0e^{-Q_v/RT}      n_0 = 3.48 \\times 10^{-6}    n_0 = 3.48 \\times 10^{-6}      Q_v = 12,700    Q_v = 12,700      R = 8.31    R = 8.31    $$ T = 1000 + 273 $$   In\u00a0[7]:  \n      from   sympy   import   symbols ,   exp  n0 ,   Qv ,   R ,   T   =   symbols ( 'n0 Qv R T' )  expr   =   n0 exp ( - Qv / ( R T ))      \nMultiply SymPy  subs()  methods can be chained together to substitute multiple variables in one line of code.   In\u00a0[8]:  \n      expr . subs ( n0 ,   3.48e-6 ) . subs ( Qv , 12700 ) . subs ( R ,   8031 ) . subs ( T ,   1000 + 273 )         Out[8]:   3.48e-6*exp(-12700/10223463)      \nTo evaluate an expression as a floating point number, use SymPy's  .evalf()  method.   In\u00a0[9]:  \n      expr2   =   expr . subs ( n0 ,   3.48e-6 ) . subs ( Qv , 12700 ) . subs ( R ,   8031 ) . subs ( T ,   1000 + 273 )         In\u00a0[10]:  \n      expr2 . evalf ()         Out[10]:   3.47567968697765e-6",
            "title": "Substitution"
        },
        {
            "location": "/10-Symbolic-Math/10.04-Equations/",
            "text": "Equations\n\n\nYou can define equations using SymPy using symbolic math variables. \nEquations\n in SymPy are different than \nexpressions\n. An expression does not have equality. An expression is a collection of symbols and operators, but expressions are not equal to anything. Equations have equality. An equation can be thought of as an expression equal to something else.\n\n\nA code section that defines the equation \n4x + 2 = 0\n4x + 2 = 0\n is below. Note all equations defined in SymPy are assumed to equal zero.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nfrom\n \nsympy\n \nimport\n \nsymbols\n,\n \nEq\n\n\nx\n \n=\n \nsymbols\n(\n'x'\n)\n\n\neq1\n \n=\n \nEq\n(\n4\n*\nx\n+\n2\n)\n\n\n\n\n\n\n\n\n\n\n\nIf you want to define the equation \n2y - x = 5\n2y - x = 5\n, which is not equal to zero, you just have to subtract the right hand side of the equation from the left hand side of the equation first.\n\n\n\n\n2y - x = 5\n\n\n2y - x = 5\n\n\n\n\n2y - x -5 = 0\n2y - x -5 = 0\n<span><span class=\"MathJax_Preview\">2y - x -5 = 0</span><script type=\"math/tex\">2y - x -5 = 0\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nx\n,\n \ny\n \n=\n \nsymbols\n(\n'x y'\n)\n\n\neq2\n \n=\n \n2\n*\ny\n \n-\n \nx\n \n-\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\nSubstitutions in Equations\n\n\nSymbols and expressions can be substituted into equations. In the code section below, the variable \nz\nz\n is substituted in for the variable \nx\nx\n (\nz\nz\n replaces \nx\nx\n).\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nx\n,\n \ny\n,\n \nz\n \n=\n \nsymbols\n(\n'x y z'\n)\n\n\neq2\n \n=\n \n2\n*\ny\n \n-\n \nx\n \n-\n5\n\n\neq3\n \n=\n \neq2\n.\nsubs\n(\nx\n,\nz\n)\n\n\neq3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[3]:\n\n\n\n\n\n\n\n\n2*y - z - 5",
            "title": "Equations"
        },
        {
            "location": "/10-Symbolic-Math/10.04-Equations/#equations",
            "text": "You can define equations using SymPy using symbolic math variables.  Equations  in SymPy are different than  expressions . An expression does not have equality. An expression is a collection of symbols and operators, but expressions are not equal to anything. Equations have equality. An equation can be thought of as an expression equal to something else.  A code section that defines the equation  4x + 2 = 0 4x + 2 = 0  is below. Note all equations defined in SymPy are assumed to equal zero.   In\u00a0[1]:  \n      from   sympy   import   symbols ,   Eq  x   =   symbols ( 'x' )  eq1   =   Eq ( 4 * x + 2 )      \nIf you want to define the equation  2y - x = 5 2y - x = 5 , which is not equal to zero, you just have to subtract the right hand side of the equation from the left hand side of the equation first.   2y - x = 5  2y - x = 5   2y - x -5 = 0 2y - x -5 = 0 <span><span class=\"MathJax_Preview\">2y - x -5 = 0</span><script type=\"math/tex\">2y - x -5 = 0    In\u00a0[2]:  \n      x ,   y   =   symbols ( 'x y' )  eq2   =   2 * y   -   x   - 5",
            "title": "Equations"
        },
        {
            "location": "/10-Symbolic-Math/10.04-Equations/#substitutions-in-equations",
            "text": "Symbols and expressions can be substituted into equations. In the code section below, the variable  z z  is substituted in for the variable  x x  ( z z  replaces  x x ).   In\u00a0[3]:  \n      x ,   y ,   z   =   symbols ( 'x y z' )  eq2   =   2 * y   -   x   - 5  eq3   =   eq2 . subs ( x , z )  eq3         Out[3]:   2*y - z - 5",
            "title": "Substitutions in Equations"
        },
        {
            "location": "/10-Symbolic-Math/10.05-Solving-Equations/",
            "text": "Solving Equations\n\n\nSymPy's \nsolve()\n function can be used to solve equations and expressions that contain symbolic math variables.\n\n\nEquations with one solution\n\n\nA simple equation that contains one variable like \nx-4-2 = 0\nx-4-2 = 0\n can be solved using the solve function. When only one value is part of the solution, the solution is in the form of a list.\n\n\nThe code section below demonstrates SymPy's \nsolve()\n function when an expression is defined with symbolic math variables.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nfrom\n \nsympy\n \nimport\n \nsymbols\n,\n \nsolve\n\n\nx\n \n=\n \nsymbols\n(\n'x'\n)\n\n\nexpr\n \n=\n \nx\n-\n4\n-\n2\n\n\nsol\n \n=\n \nsolve\n(\nexpr\n)\n\n\nsol\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[1]:\n\n\n\n\n\n\n\n\n[6]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo pull the value out of the list, regular list indexing can be used.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nnum\n \n=\n \nsol\n[\n0\n]\n\n\nnum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code section below demonstrates SymPy's solve() function when an equation is defined with symbolic math variables. \n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nfrom\n \nsympy\n \nimport\n \nsymbols\n,\n \nEq\n,\n \nsolve\n\n\ny\n \n=\n \nsymbols\n(\n'y'\n)\n\n\neq1\n \n=\n \nEq\n(\ny\n \n+\n \n3\n \n+\n \n8\n)\n\n\nsol\n \n=\n \nsolve\n(\neq1\n)\n\n\nsol\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[3]:\n\n\n\n\n\n\n\n\n[-11]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEquations with two solutions\n\n\nQuadratic equations, like \nx^2 - 5x + 6 = 0\nx^2 - 5x + 6 = 0\n, have two solutions. SymPy's \nsolve()\n function can be used to solve an equation with two solutions. When an equation has two solutions, SymPy outputs a list. The elements in the list are the two solutions.\n\n\nThe code section below shows how SymPy's \nsolve()\n function solves an equation with two solutions.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nfrom\n \nsympy\n \nimport\n \nsymbols\n,\n \nEq\n,\n \nsolve\n\n\ny\n \n=\n \nsymbols\n(\n'x'\n)\n\n\neq1\n \n=\n \nEq\n(\nx\n*\n2\n \n-\n5\nx\n \n+\n \n6\n)\n\n\nsol\n \n=\n \nsolve\n(\neq1\n)\n\n\nsol\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[4]:\n\n\n\n\n\n\n\n\n[2, 3]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you specify the keyword argument \ndict=True\n to SymPy's \nsolve()\n function, the output is still a list, but inside the list is a dictionary that shows which variable was solved for.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nfrom\n \nsympy\n \nimport\n \nsymbols\n,\n \nEq\n,\n \nsolve\n\n\ny\n \n=\n \nsymbols\n(\n'x'\n)\n\n\neq1\n \n=\n \nEq\n(\nx\n*\n2\n \n-\n5\nx\n \n+\n \n6\n)\n\n\nsol\n \n=\n \nsolve\n(\neq1\n,\n \ndict\n=\nTrue\n)\n\n\nsol\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[5]:\n\n\n\n\n\n\n\n\n[{x: 2}, {x: 3}]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nsol\n[\n0\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[6]:\n\n\n\n\n\n\n\n\n{x: 2}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nsol\n[\n1\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[7]:\n\n\n\n\n\n\n\n\n{x: 3}",
            "title": "Solving Equations"
        },
        {
            "location": "/10-Symbolic-Math/10.05-Solving-Equations/#solving-equations",
            "text": "SymPy's  solve()  function can be used to solve equations and expressions that contain symbolic math variables.",
            "title": "Solving Equations"
        },
        {
            "location": "/10-Symbolic-Math/10.05-Solving-Equations/#equations-with-one-solution",
            "text": "A simple equation that contains one variable like  x-4-2 = 0 x-4-2 = 0  can be solved using the solve function. When only one value is part of the solution, the solution is in the form of a list.  The code section below demonstrates SymPy's  solve()  function when an expression is defined with symbolic math variables.   In\u00a0[1]:  \n      from   sympy   import   symbols ,   solve  x   =   symbols ( 'x' )  expr   =   x - 4 - 2  sol   =   solve ( expr )  sol         Out[1]:   [6]      \nTo pull the value out of the list, regular list indexing can be used.   In\u00a0[2]:  \n      num   =   sol [ 0 ]  num         Out[2]:   6      \nThe code section below demonstrates SymPy's solve() function when an equation is defined with symbolic math variables.    In\u00a0[3]:  \n      from   sympy   import   symbols ,   Eq ,   solve  y   =   symbols ( 'y' )  eq1   =   Eq ( y   +   3   +   8 )  sol   =   solve ( eq1 )  sol         Out[3]:   [-11]",
            "title": "Equations with one solution"
        },
        {
            "location": "/10-Symbolic-Math/10.05-Solving-Equations/#equations-with-two-solutions",
            "text": "Quadratic equations, like  x^2 - 5x + 6 = 0 x^2 - 5x + 6 = 0 , have two solutions. SymPy's  solve()  function can be used to solve an equation with two solutions. When an equation has two solutions, SymPy outputs a list. The elements in the list are the two solutions.  The code section below shows how SymPy's  solve()  function solves an equation with two solutions.   In\u00a0[4]:  \n      from   sympy   import   symbols ,   Eq ,   solve  y   =   symbols ( 'x' )  eq1   =   Eq ( x * 2   - 5 x   +   6 )  sol   =   solve ( eq1 )  sol         Out[4]:   [2, 3]      \nIf you specify the keyword argument  dict=True  to SymPy's  solve()  function, the output is still a list, but inside the list is a dictionary that shows which variable was solved for.   In\u00a0[5]:  \n      from   sympy   import   symbols ,   Eq ,   solve  y   =   symbols ( 'x' )  eq1   =   Eq ( x * 2   - 5 x   +   6 )  sol   =   solve ( eq1 ,   dict = True )  sol         Out[5]:   [{x: 2}, {x: 3}]         In\u00a0[6]:  \n      sol [ 0 ]         Out[6]:   {x: 2}         In\u00a0[7]:  \n      sol [ 1 ]         Out[7]:   {x: 3}",
            "title": "Equations with two solutions"
        },
        {
            "location": "/10-Symbolic-Math/10.06-Solving-Two-Equations-for-Two-Unknowns/",
            "text": "Solving Two Equations for Two Unknows\n\n\nSolving two equations for two unknown can be accomplished using SymPy. Consider the following set of two equations with two variables:\n\n\n\n\n x + y - 5 = 0 \n\n\n x + y - 5 = 0 \n\n\n\n\n\n\n x - y + 3 = 0 \n\n\n x - y + 3 = 0 \n\n\n\n\nTo solve this system of two equations for the two unknowns, \nx\nx\n and \ny\ny\n, first import the SymPy package. From the SymPy package, the functions \nsymbols\n, \nEq\n and \nsolve\n are needed.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nfrom\n \nsympy\n \nimport\n \nsymbols\n,\n \nEq\n,\n \nsolve\n\n\n\n\n\n\n\n\n\n\n\nNext, create two SymPy symbols objects, \nx\nx\n and \ny\ny\n. As shown in a previous section, the string passed as an input argument to the \nsymbols()\n function, \n'x y'\n, does not have any commas. The outputs of the \nsymbols()\n function are the two symbol objects \nx\n and \ny\n. These outputs must be separated by a comma and are not surrounded by quotes.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nx\n,\n \ny\n \n=\n \nsymbols\n(\n'x y'\n)\n\n\n\n\n\n\n\n\n\n\n\nNow define the two equations as SymPy equation objects.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\neq1\n \n=\n \nEq\n(\nx\n \n+\n \ny\n \n-\n \n5\n)\n\n\neq2\n \n=\n \nEq\n(\nx\n \n-\n \ny\n \n+\n \n3\n)\n\n\n\n\n\n\n\n\n\n\n\nWe can use SymPy's \nsolve()\n function to compute the value of \nx\nx\n and \ny\ny\n. The first argument passed to the \nsolve()\n function is a tuple of the two equations \n(eq1, eq2)\n. The second argument passed to the \nsolve()\n function is a tuple of the variables we want to solve for \n(x, y)\n.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nsolve\n((\neq1\n,\neq2\n),\n \n(\nx\n,\n \ny\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[4]:\n\n\n\n\n\n\n\n\n{x: 1, y: 4}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe solution is in the form of a Python dictionary. The dictionary keys are the variables and the dictionary values are the numerical solutions. \n\n\nWe can access the solution out of the solution dictionary using regular dictionary indexing.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nsol_dict\n \n=\n \nsolve\n((\neq1\n,\neq2\n),\n \n(\nx\n,\n \ny\n))\n\n\nprint\n(\nf\n'x = \n{sol_dict[x]}\n'\n)\n\n\nprint\n(\nf\n'y = \n{sol_dict[y]}\n'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx = 1\ny = 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolve a statics problem with SymPy\n\n\nConsider the following engineering statics problem which can be solved with symbolic math and SymPy.\n\n\nGIVEN:\n\n\nA weight of 22 lbs is hung from a ring. The ring is supported by two cords. The first cord, cord CE, is 30 degrees above the horizontal and to the right. The second cord, cord BD, is 45 degrees to the left and above the horizontal. \n\n\nw\nw\n = 22 lb\n\n\nT_{CE}\nT_{CE}\n @ +30 degrees CCW relative to +x-axis\n\n\nT_{BD}\nT_{BD}\n @ +45 degress CW relative to -x-axis\n\n\nFIND:\n\n\nmagnitude of \nT_{CE}\nT_{CE}\n and \nT_{BD}\nT_{BD}\n \n\n\nSOLUTION:\n\n\nTo solve for the magnitude of \nT_{CE}\nT_{CE}\n and \nT_{BD}\nT_{BD}\n, you need to solve to two equations for two unknowns.\n\n\nTo accomplish this with SymPy, first import NumPy and SymPy.  The SymPy functions \nsymbols\n, \nEq\n and \nsolve\n are needed.\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nfrom\n \nsympy\n \nimport\n \nsymbols\n,\n \nEq\n,\n \nsolve\n\n\n\n\n\n\n\n\n\n\n\nNext, define the symbolic math variables. Multiple symbolic math variables can be defined at the same time. Remember the argument names (on the right-hand side of the assignment operator \n=\n) need to be enclosed in quotes\n'  '\n and separated by spaces, no commas. The object names (on the left-hand side of the assignment operator \n=\n) are separated with commas, no quotes.\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nTce\n,\n \nTbd\n \n=\n \nsymbols\n(\n'Tce Tbd'\n)\n\n\n\n\n\n\n\n\n\n\n\nTwo equations based on the sum of the forces need to be defined. \n\n\nAssuming the ring is in static equilibrium:\n\n\n\n\n \\Sigma \\vec{F} = 0 \n\n\n \\Sigma \\vec{F} = 0 \n\n\n\n\n\n\n \\Sigma F_{x} = 0 \n\n\n \\Sigma F_{x} = 0 \n\n\n\n\n\n\n \\Sigma F_{y} = 0 \n\n\n \\Sigma F_{y} = 0 \n\n\n\n\nThe three forces opperating on the ring are defined as:\n\n\n\n\n {T_{ce}} = tension \\ in \\ cable \\ CE \\ \n\n\n {T_{ce}} = tension \\ in \\ cable \\ CE \\ \n\n\n\n\n\n\n \\vec{T_{ce}} = T_{ce} cos(30)\\hat{i} + T_{ce} sin(30)\\hat{j} \n\n\n \\vec{T_{ce}} = T_{ce} cos(30)\\hat{i} + T_{ce} sin(30)\\hat{j} \n\n\n\n\n\n\n {T_{bd}} = tension \\ in \\ cable \\ BD \n\n\n {T_{bd}} = tension \\ in \\ cable \\ BD \n\n\n\n\n\n\n \\vec{T_{bd}} = - T_{bd} cos(45)\\hat{i} + T_{bd} sin(45)\\hat{j} \n\n\n \\vec{T_{bd}} = - T_{bd} cos(45)\\hat{i} + T_{bd} sin(45)\\hat{j} \n\n\n\n\n\n\n \\vec{w} = 0 \\hat{i} - 22 \\hat{j} \n\n\n \\vec{w} = 0 \\hat{i} - 22 \\hat{j} \n\n\n\n\nTaking \n\\Sigma F_{x} = 0\n\\Sigma F_{x} = 0\n (sum of the \n\\hat{i}\n\\hat{i}\n terms):\n\n\n\n\n T_{ce} cos(30) - T_{bd} cos(45) = 0 \n\n\n T_{ce} cos(30) - T_{bd} cos(45) = 0 \n\n\n\n\nTaking \n\\Sigma F_{y} = 0\n\\Sigma F_{y} = 0\n (sum of the \n\\hat{j}\n\\hat{j}\n terms):\n\n\n$$ T_{ce} sin(30) + T_{bd} sin(45) - 22 = 0 $$\nThe first equation, based on the sum of the forces in the x-direction (the \n\\hat{i}\n\\hat{i}\n terms) is:\n\n\n\n\n T_{ce} cos(30) - T_{bd} cos(45) = 0 \n\n\n T_{ce} cos(30) - T_{bd} cos(45) = 0 \n\n\n\n\nThis equation can be represented as a SymPy equation object. Note the right-hand side of the equation is \n0\n. SymPy equation objects are instantiated with expressions equal to zero. If the expression was not equal to zero, simply subtract both sides by the term on the right-hand side of the equals sign and use the resulting expression (equal to zero) to create the SymPy equation object.\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\neq1\n=\nEq\n(\nTce\nnp\n.\ncos\n(\nnp\n.\nradians\n(\n30\n))\n \n-\n \nTbd\nnp\n.\ncos\n(\nnp\n.\nradians\n(\n45\n)))\n\n\nprint\n(\neq1\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEq(-0.707106781186548*Tbd + 0.866025403784439*Tce, 0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe second equation, based on the sum of the forces in the y-direction is:\n\n\n\n\n T_{ce} sin(30) + T_{bd} sin(45) - 22 = 0 \n\n\n T_{ce} sin(30) + T_{bd} sin(45) - 22 = 0 \n\n\n\n\nDefine this equation as a SymPy equation object as well:\n\n\n\n\n\nIn\u00a0[9]:\n\n\n\n    \n\n\neq2\n=\nEq\n(\nTce\nnp\n.\nsin\n(\nnp\n.\nradians\n(\n30\n))\n \n+\n \nTbd\nnp\n.\nsin\n(\nnp\n.\nradians\n(\n45\n))\n-\n22\n)\n\n\nprint\n(\neq2\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEq(0.707106781186547*Tbd + 0.5*Tce - 22, 0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow solve the two equations for \nT_{ce}\nT_{ce}\n and \nT_{bd}\nT_{bd}\n with SymPy's \nsolve()\n method. The first argument passed to the \nsolve()\n method is a tuple of equations to solve, the argument passed to the \nsolve()\n method is a tuple of the variables to solve for.\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nsolve\n((\neq1\n,\neq2\n),(\nTce\n,\n \nTbd\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[10]:\n\n\n\n\n\n\n\n\n{Tce: 16.1051177665153, Tbd: 19.7246603876972}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe solution is saved in a Python dictionary. The dictionary keys are the variable names and the dictionary values are the numerical solutions. \n\n\nThe numerical solutions can be pulled out of the dictionary using regular Python dictionary access. Note \nTce\n and \nTbd\n are SymPy symbols objects, not strings.\n\n\n\n\n\nIn\u00a0[11]:\n\n\n\n    \n\n\nsol_dict\n \n=\n \nsolve\n((\neq1\n,\neq2\n),(\nTce\n,\n \nTbd\n))\n\n\nprint\n(\nf\n'Tce = \n{sol_dict[Tce]}\n'\n)\n\n\nprint\n(\nf\n'Tce = \n{sol_dict[Tbd]}\n'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTce = 16.1051177665153\nTce = 19.7246603876972\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe same problem can be solved again, but with \nw\nw\n kept as a variable.\n\n\n\n\n\nIn\u00a0[12]:\n\n\n\n    \n\n\nw\n,\n \nTce\n,\n \nTbd\n \n=\n \nsymbols\n(\n'w, Tab, Tac'\n)\n\n\neq1\n=\nEq\n(\nTce\nnp\n.\ncos\n(\nnp\n.\nradians\n(\n30\n))\n \n-\n \nTbd\nnp\n.\ncos\n(\nnp\n.\nradians\n(\n45\n)))\n\n\neq2\n=\nEq\n(\nTce\nnp\n.\nsin\n(\nnp\n.\nradians\n(\n30\n))\n \n+\n \nTbd\nnp\n.\nsin\n(\nnp\n.\nradians\n(\n45\n))\n-\nw\n)\n\n\nsolve\n((\neq1\n,\neq2\n),(\nTce\n,\nTbd\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[12]:\n\n\n\n\n\n\n\n\n{Tab: 0.732050807568878*w, Tac: 0.896575472168054*w}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe result is a solution is in terms of the variable \nw\nw\n.",
            "title": "Solving Two Equations for Two Unknows"
        },
        {
            "location": "/10-Symbolic-Math/10.06-Solving-Two-Equations-for-Two-Unknowns/#solving-two-equations-for-two-unknows",
            "text": "Solving two equations for two unknown can be accomplished using SymPy. Consider the following set of two equations with two variables:    x + y - 5 = 0    x + y - 5 = 0      x - y + 3 = 0    x - y + 3 = 0    To solve this system of two equations for the two unknowns,  x x  and  y y , first import the SymPy package. From the SymPy package, the functions  symbols ,  Eq  and  solve  are needed.   In\u00a0[1]:  \n      import   numpy   as   np  from   sympy   import   symbols ,   Eq ,   solve      \nNext, create two SymPy symbols objects,  x x  and  y y . As shown in a previous section, the string passed as an input argument to the  symbols()  function,  'x y' , does not have any commas. The outputs of the  symbols()  function are the two symbol objects  x  and  y . These outputs must be separated by a comma and are not surrounded by quotes.   In\u00a0[2]:  \n      x ,   y   =   symbols ( 'x y' )      \nNow define the two equations as SymPy equation objects.   In\u00a0[3]:  \n      eq1   =   Eq ( x   +   y   -   5 )  eq2   =   Eq ( x   -   y   +   3 )      \nWe can use SymPy's  solve()  function to compute the value of  x x  and  y y . The first argument passed to the  solve()  function is a tuple of the two equations  (eq1, eq2) . The second argument passed to the  solve()  function is a tuple of the variables we want to solve for  (x, y) .   In\u00a0[4]:  \n      solve (( eq1 , eq2 ),   ( x ,   y ))         Out[4]:   {x: 1, y: 4}      \nThe solution is in the form of a Python dictionary. The dictionary keys are the variables and the dictionary values are the numerical solutions.   We can access the solution out of the solution dictionary using regular dictionary indexing.   In\u00a0[5]:  \n      sol_dict   =   solve (( eq1 , eq2 ),   ( x ,   y ))  print ( f 'x =  {sol_dict[x]} ' )  print ( f 'y =  {sol_dict[y]} ' )           x = 1\ny = 4",
            "title": "Solving Two Equations for Two Unknows"
        },
        {
            "location": "/10-Symbolic-Math/10.06-Solving-Two-Equations-for-Two-Unknowns/#solve-a-statics-problem-with-sympy",
            "text": "Consider the following engineering statics problem which can be solved with symbolic math and SymPy.",
            "title": "Solve a statics problem with SymPy"
        },
        {
            "location": "/10-Symbolic-Math/10.06-Solving-Two-Equations-for-Two-Unknowns/#given",
            "text": "A weight of 22 lbs is hung from a ring. The ring is supported by two cords. The first cord, cord CE, is 30 degrees above the horizontal and to the right. The second cord, cord BD, is 45 degrees to the left and above the horizontal.   w w  = 22 lb  T_{CE} T_{CE}  @ +30 degrees CCW relative to +x-axis  T_{BD} T_{BD}  @ +45 degress CW relative to -x-axis",
            "title": "GIVEN:"
        },
        {
            "location": "/10-Symbolic-Math/10.06-Solving-Two-Equations-for-Two-Unknowns/#find",
            "text": "magnitude of  T_{CE} T_{CE}  and  T_{BD} T_{BD}",
            "title": "FIND:"
        },
        {
            "location": "/10-Symbolic-Math/10.06-Solving-Two-Equations-for-Two-Unknowns/#solution",
            "text": "To solve for the magnitude of  T_{CE} T_{CE}  and  T_{BD} T_{BD} , you need to solve to two equations for two unknowns.  To accomplish this with SymPy, first import NumPy and SymPy.  The SymPy functions  symbols ,  Eq  and  solve  are needed.   In\u00a0[6]:  \n      import   numpy   as   np  from   sympy   import   symbols ,   Eq ,   solve      \nNext, define the symbolic math variables. Multiple symbolic math variables can be defined at the same time. Remember the argument names (on the right-hand side of the assignment operator  = ) need to be enclosed in quotes '  '  and separated by spaces, no commas. The object names (on the left-hand side of the assignment operator  = ) are separated with commas, no quotes.   In\u00a0[7]:  \n      Tce ,   Tbd   =   symbols ( 'Tce Tbd' )      \nTwo equations based on the sum of the forces need to be defined.   Assuming the ring is in static equilibrium:    \\Sigma \\vec{F} = 0    \\Sigma \\vec{F} = 0      \\Sigma F_{x} = 0    \\Sigma F_{x} = 0      \\Sigma F_{y} = 0    \\Sigma F_{y} = 0    The three forces opperating on the ring are defined as:    {T_{ce}} = tension \\ in \\ cable \\ CE \\    {T_{ce}} = tension \\ in \\ cable \\ CE \\      \\vec{T_{ce}} = T_{ce} cos(30)\\hat{i} + T_{ce} sin(30)\\hat{j}    \\vec{T_{ce}} = T_{ce} cos(30)\\hat{i} + T_{ce} sin(30)\\hat{j}      {T_{bd}} = tension \\ in \\ cable \\ BD    {T_{bd}} = tension \\ in \\ cable \\ BD      \\vec{T_{bd}} = - T_{bd} cos(45)\\hat{i} + T_{bd} sin(45)\\hat{j}    \\vec{T_{bd}} = - T_{bd} cos(45)\\hat{i} + T_{bd} sin(45)\\hat{j}      \\vec{w} = 0 \\hat{i} - 22 \\hat{j}    \\vec{w} = 0 \\hat{i} - 22 \\hat{j}    Taking  \\Sigma F_{x} = 0 \\Sigma F_{x} = 0  (sum of the  \\hat{i} \\hat{i}  terms):    T_{ce} cos(30) - T_{bd} cos(45) = 0    T_{ce} cos(30) - T_{bd} cos(45) = 0    Taking  \\Sigma F_{y} = 0 \\Sigma F_{y} = 0  (sum of the  \\hat{j} \\hat{j}  terms):  $$ T_{ce} sin(30) + T_{bd} sin(45) - 22 = 0 $$\nThe first equation, based on the sum of the forces in the x-direction (the  \\hat{i} \\hat{i}  terms) is:    T_{ce} cos(30) - T_{bd} cos(45) = 0    T_{ce} cos(30) - T_{bd} cos(45) = 0    This equation can be represented as a SymPy equation object. Note the right-hand side of the equation is  0 . SymPy equation objects are instantiated with expressions equal to zero. If the expression was not equal to zero, simply subtract both sides by the term on the right-hand side of the equals sign and use the resulting expression (equal to zero) to create the SymPy equation object.   In\u00a0[8]:  \n      eq1 = Eq ( Tce np . cos ( np . radians ( 30 ))   -   Tbd np . cos ( np . radians ( 45 )))  print ( eq1 )           Eq(-0.707106781186548*Tbd + 0.866025403784439*Tce, 0)      \nThe second equation, based on the sum of the forces in the y-direction is:    T_{ce} sin(30) + T_{bd} sin(45) - 22 = 0    T_{ce} sin(30) + T_{bd} sin(45) - 22 = 0    Define this equation as a SymPy equation object as well:   In\u00a0[9]:  \n      eq2 = Eq ( Tce np . sin ( np . radians ( 30 ))   +   Tbd np . sin ( np . radians ( 45 )) - 22 )  print ( eq2 )           Eq(0.707106781186547*Tbd + 0.5*Tce - 22, 0)      \nNow solve the two equations for  T_{ce} T_{ce}  and  T_{bd} T_{bd}  with SymPy's  solve()  method. The first argument passed to the  solve()  method is a tuple of equations to solve, the argument passed to the  solve()  method is a tuple of the variables to solve for.   In\u00a0[10]:  \n      solve (( eq1 , eq2 ),( Tce ,   Tbd ))         Out[10]:   {Tce: 16.1051177665153, Tbd: 19.7246603876972}      \nThe solution is saved in a Python dictionary. The dictionary keys are the variable names and the dictionary values are the numerical solutions.   The numerical solutions can be pulled out of the dictionary using regular Python dictionary access. Note  Tce  and  Tbd  are SymPy symbols objects, not strings.   In\u00a0[11]:  \n      sol_dict   =   solve (( eq1 , eq2 ),( Tce ,   Tbd ))  print ( f 'Tce =  {sol_dict[Tce]} ' )  print ( f 'Tce =  {sol_dict[Tbd]} ' )           Tce = 16.1051177665153\nTce = 19.7246603876972      \nThe same problem can be solved again, but with  w w  kept as a variable.   In\u00a0[12]:  \n      w ,   Tce ,   Tbd   =   symbols ( 'w, Tab, Tac' )  eq1 = Eq ( Tce np . cos ( np . radians ( 30 ))   -   Tbd np . cos ( np . radians ( 45 )))  eq2 = Eq ( Tce np . sin ( np . radians ( 30 ))   +   Tbd np . sin ( np . radians ( 45 )) - w )  solve (( eq1 , eq2 ),( Tce , Tbd ))         Out[12]:   {Tab: 0.732050807568878*w, Tac: 0.896575472168054*w}      \nThe result is a solution is in terms of the variable  w w .",
            "title": "SOLUTION:"
        },
        {
            "location": "/10-Symbolic-Math/10.07-Summary/",
            "text": "Summary\n\n\nIn this chapter, you learned about symbolic math and how to complete symbolic math calculations with the SymPy package. Symbolic math treats variables as mathematical symbols rather than defining variables as defined numbers. \n\n\nYou learned how to create symbolic math variables with SymPy's \nsymbols()\n function.\n\n\nSymbolic math variables can be combined into symbolic math expressions and symbolic math equations. You learned how to substitute variables and numbers into symbolic math expressions and equations. \n\n\nAt the end of the chapter, you learned how to solve linear and quadratic equations with SymPy. \n\n\nThe final example in the chapter was a multi-variable statics problem where two variables were solved for two unknowns. \n\n\nKey Terms and Concepts\n\n\nsymbolic math\n\n\nsymbolic variable\n\n\nobject\n\n\nnumerical calculation\n\n\nsystems of equations\n\n\nexpression\n\n\nequation\n\n\nsubstitution\n\n\nevaluate\n\n\nlinear equation\n\n\nquadratic equation",
            "title": "Summary"
        },
        {
            "location": "/10-Symbolic-Math/10.07-Summary/#summary",
            "text": "In this chapter, you learned about symbolic math and how to complete symbolic math calculations with the SymPy package. Symbolic math treats variables as mathematical symbols rather than defining variables as defined numbers.   You learned how to create symbolic math variables with SymPy's  symbols()  function.  Symbolic math variables can be combined into symbolic math expressions and symbolic math equations. You learned how to substitute variables and numbers into symbolic math expressions and equations.   At the end of the chapter, you learned how to solve linear and quadratic equations with SymPy.   The final example in the chapter was a multi-variable statics problem where two variables were solved for two unknowns.",
            "title": "Summary"
        },
        {
            "location": "/10-Symbolic-Math/10.07-Summary/#key-terms-and-concepts",
            "text": "symbolic math  symbolic variable  object  numerical calculation  systems of equations  expression  equation  substitution  evaluate  linear equation  quadratic equation",
            "title": "Key Terms and Concepts"
        },
        {
            "location": "/10-Symbolic-Math/10.08-Review-Questions/",
            "text": "Review Questions\n\n\nSolving Equations\n\n\nQ10.20 Use SymPy to solve for \nx\nx\n if $ x - 4 = 2$\n\n\nQ10.02 Use SympPy to solve for the roots of the quadratic equation \n2x^2 - 4x + 1.5 = 0\n2x^2 - 4x + 1.5 = 0\n\n\nQ10.03 Use SymPy to solve the system of linear equations below for the varaibles \nx\nx\n and \ny\ny\n:\n\n\n\n\n -3x - 2y + 7  = 0 \n\n\n -3x - 2y + 7  = 0 \n\n\n\n\n\n\n 5x - 3y - 6 = 0 \n\n\n 5x - 3y - 6 = 0 \n\n\n\n\nQ10.04 Use SymPy to solve the system of non-linear equations below for the variables \nx\nx\n and \ny\ny\n:\n\n\n\n\n 3x^2 + 2y^3 = -\\frac{17}{4} \n\n\n 3x^2 + 2y^3 = -\\frac{17}{4} \n\n\n\n\n\n\n \\frac{-x^3}{2} - 8y^2 + \\frac{127}{2} = 0 \n\n\n \\frac{-x^3}{2} - 8y^2 + \\frac{127}{2} = 0",
            "title": "Review Questions"
        },
        {
            "location": "/10-Symbolic-Math/10.08-Review-Questions/#review-questions",
            "text": "",
            "title": "Review Questions"
        },
        {
            "location": "/10-Symbolic-Math/10.08-Review-Questions/#solving-equations",
            "text": "Q10.20 Use SymPy to solve for  x x  if $ x - 4 = 2$  Q10.02 Use SympPy to solve for the roots of the quadratic equation  2x^2 - 4x + 1.5 = 0 2x^2 - 4x + 1.5 = 0  Q10.03 Use SymPy to solve the system of linear equations below for the varaibles  x x  and  y y :    -3x - 2y + 7  = 0    -3x - 2y + 7  = 0      5x - 3y - 6 = 0    5x - 3y - 6 = 0    Q10.04 Use SymPy to solve the system of non-linear equations below for the variables  x x  and  y y :    3x^2 + 2y^3 = -\\frac{17}{4}    3x^2 + 2y^3 = -\\frac{17}{4}      \\frac{-x^3}{2} - 8y^2 + \\frac{127}{2} = 0    \\frac{-x^3}{2} - 8y^2 + \\frac{127}{2} = 0",
            "title": "Solving Equations"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.00-Introduction/",
            "text": "Python and External Hardware\n\n\nIntroduction\n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nConnect external hardware to a computer running Python\n\n\n\n\n\n\nInstall the PySerial library\n\n\n\n\n\n\nRead data over a serial connection using Python\n\n\n\n\n\n\nSave data coming in over a serial connection using Python\n\n\n\n\n\n\nWrite data to a serial line using Python\n\n\n\n\n\n\nRead data from a sensor using Python\n\n\n\n\n\n\nControl an LED using Python",
            "title": "Introduction"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.00-Introduction/#python-and-external-hardware",
            "text": "",
            "title": "Python and External Hardware"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.00-Introduction/#introduction",
            "text": "By the end of this chapter you will be able to:    Connect external hardware to a computer running Python    Install the PySerial library    Read data over a serial connection using Python    Save data coming in over a serial connection using Python    Write data to a serial line using Python    Read data from a sensor using Python    Control an LED using Python",
            "title": "Introduction"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.01-PySerial/",
            "text": "PySerial\n\n\nPySerial is a Python package that facilitates serial communication. A computer running Python with the PySerial package installed can communicate with external hardware.  PySerial is a useful package for problem solvers because it allows us to exchange data between computers and pieces of external hardware such as voltmeters, oscilloscopes, strain gauges, flow meters, actuators, and lights.\n\n\nPySerial provides an interface to communicate over the \nserial\n communication protocol. Serial communication is one of the oldest computer communication protocols. Serial communication protocol predates the USB specification used by computers and other pieces of hardware like mice, keyboards, and webcams. USB stands for Universal Serial Bus. USB and is built upon and extends the original serial communication interface.\n\n\nInstalling PySerial\n\n\nTo use the PySerial package with Python, PySerial first needs to be installed.  If you installed the full Anaconda distribution of Python, PySerial comes pre-installed. If you do have the full Anaconda distribution of Python installed, PySerial can be installed using the \nAnaconda Prompt\n. \n\n\n> conda install pyserial\n\n\n\n\nAlternatively, PySerial can be installed on the command line using \npip\n:\n\n\n$ pip install pyserial\n\n\n\n\nAfter PySerial is installed, the installation can be confirmed at the Python REPL:\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\n>>>\n \nimport\n \nserial\n\n\n>>>\n \nprint\n(\nserial\n.\nversion\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNOTE: Even though the command to install PySerial was\n \n> conda install pyserial\n, \nthe PySerial module is imported with the line\n \nimport serial\n.",
            "title": "PySerial"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.01-PySerial/#pyserial",
            "text": "PySerial is a Python package that facilitates serial communication. A computer running Python with the PySerial package installed can communicate with external hardware.  PySerial is a useful package for problem solvers because it allows us to exchange data between computers and pieces of external hardware such as voltmeters, oscilloscopes, strain gauges, flow meters, actuators, and lights.  PySerial provides an interface to communicate over the  serial  communication protocol. Serial communication is one of the oldest computer communication protocols. Serial communication protocol predates the USB specification used by computers and other pieces of hardware like mice, keyboards, and webcams. USB stands for Universal Serial Bus. USB and is built upon and extends the original serial communication interface.",
            "title": "PySerial"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.01-PySerial/#installing-pyserial",
            "text": "To use the PySerial package with Python, PySerial first needs to be installed.  If you installed the full Anaconda distribution of Python, PySerial comes pre-installed. If you do have the full Anaconda distribution of Python installed, PySerial can be installed using the  Anaconda Prompt .   > conda install pyserial  Alternatively, PySerial can be installed on the command line using  pip :  $ pip install pyserial  After PySerial is installed, the installation can be confirmed at the Python REPL:   In\u00a0[1]:  \n      >>>   import   serial  >>>   print ( serial . version )           3.4       NOTE: Even though the command to install PySerial was   > conda install pyserial ,  the PySerial module is imported with the line   import serial .",
            "title": "Installing PySerial"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.02-Bytes-and-Unicode-Strings/",
            "text": "Bytes and Unicode Strings\n\n\nBefore using PySerial to communicate with external hardware over the serial interface, it is import to understand the difference between \nbytes\n and \nunicode strings\n in Python. \n\n\nThe distinction between bytes and Unicode strings is important because strings in Python are \nUnicode\n by default. However, external hardware like Arduino's, oscilloscopes and voltmeters transmit characters as \nbytes\n.\n\n\nUnicode Strings\n\n\nIn Python, the syntax to define a new string is:\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nustring\n \n=\n \n'A unicode string'\n\n\n\n\n\n\n\n\n\n\n\nUse Python's built-in \ntype()\n function to determine the data type of the \nustring\n variable:\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nprint\n(\ntype\n(\nustring\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<class 'str'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen the Python interpreter declares the variable \nustring\n is of \n<class 'str'>\n, it indicates \nustring\n is a \nUnicode string\n.\n\n\nIn Python 3, all strings are \nUnicode strings\n by defaut\n.\n\n\nUnicode strings\n are useful because there are many letters and letter-like characters that are not part of the set of letters, numbers, and symbols on a regular computer keyboard.  For example in Spanish, the accent character is used over certain vowels. Letters with accents cannot be represented by the letters on a standard English keyboard.  However, letters with accents are part of a set of letters, numbers, and symbols in \nunicode strings\n.\n\n\nByte Strings\n\n\nAnother way that characters such as letters, numbers, and punctuation can be stored is as \nbytes\n. A \nbyte\n is a unit of computer information that has a fixed width (one byte long). Because of this fixed width, one \nbyte\n only has a small number of unique combinations. This limits \nbyte strings\n to only the letters, numbers and punctuation marks on a computer keyboard (plus a couple extra). This limited set of characters is called the ASCII (pronounced \nask-ee two\n) character set. A table of ASCII character codes is in the appendix. For instance, the ASCII character code \n49\n corresponds to the number one \n1\n.\n\n\nMachines speak bytes.\n\n\nHowever, external hardware such as Arduinos, oscilloscopes, and voltmeters speak \nbyte strings\n by default. Almost all machines speak \nbyte strings\n by default, including the servers that bring Netflix to your laptop.\nTo define a \nbyte string\n in Python, the letter \nb\n is placed before the quotation marks \nb'  '\n when a string is created.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nbstring\n \n=\n \nb\n'bstring'\n\n\n\n\n\n\n\n\n\n\n\nWe can view the data type of the \nbstring\n variable using the \ntype()\n function.\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nprint\n(\ntype\n(\nbstring\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<class 'bytes'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConvert between Unicode strings and byte strings\n\n\nIn order for a Python program to communicate with external hardware, it needs to be able to convert between \nUnicode strings\n and \nbyte strings\n. This conversion is completed with the \n.encode()\n and \n.decode()\n methods. \n\n\nThe \n.encode()\n method \"encodes\" a Unicode string into a byte string.\n\n\n<byte string> = <unicode string>.encode()\n\n\nThe \n.decode()\n method \"decodes\" a byte string into a unicode string.\n\n\n<unicode string> = <byte string>.decode\n\n\nRemember: Machines speak bytes, Python strings are Unicode by default.\n \n\n\nA Python script must decode what machines transmit before further processing. Python defaults to Unicode (and machines do not), so within a script's Python code, remember to \nencode\n  Unicode strings so machines can understand them.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nustring\n \n=\n \n'A unicode string'\n\n\nnew_bstring\n \n=\n \nustring\n.\nencode\n()\n\n\ntype\n(\nnew_bstring\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[5]:\n\n\n\n\n\n\n\n\nbytes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nbstring\n \n=\n \nb\n'bstring'\n\n\nnew_ustring\n \n=\n \nbstring\n.\ndecode\n()\n\n\ntype\n(\nnew_ustring\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[6]:\n\n\n\n\n\n\n\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen a command from a Python program (a Unicode string) is sent to a piece of external hardware (that reads bytes):\n\n\nThe \n.encode()\n method is applied to the Unicode string (to convert the Unicode string to a byte string) before the command is sent to the piece of external hardware.\n\n\nWhen a chunk of data comes in from a piece of external hardware (a byte string) and is read by a Python script (which speaks Unicode by the default):\n\n\nThe \n.decode()\n method is applied to the byte string (to convert the byte string to a Unicode string) before it is processed further by Python program.",
            "title": "Bytes and Unicode Strings"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.02-Bytes-and-Unicode-Strings/#bytes-and-unicode-strings",
            "text": "Before using PySerial to communicate with external hardware over the serial interface, it is import to understand the difference between  bytes  and  unicode strings  in Python.   The distinction between bytes and Unicode strings is important because strings in Python are  Unicode  by default. However, external hardware like Arduino's, oscilloscopes and voltmeters transmit characters as  bytes .",
            "title": "Bytes and Unicode Strings"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.02-Bytes-and-Unicode-Strings/#unicode-strings",
            "text": "In Python, the syntax to define a new string is:   In\u00a0[1]:  \n      ustring   =   'A unicode string'      \nUse Python's built-in  type()  function to determine the data type of the  ustring  variable:   In\u00a0[2]:  \n      print ( type ( ustring ))           <class 'str'>      \nWhen the Python interpreter declares the variable  ustring  is of  <class 'str'> , it indicates  ustring  is a  Unicode string .  In Python 3, all strings are  Unicode strings  by defaut .  Unicode strings  are useful because there are many letters and letter-like characters that are not part of the set of letters, numbers, and symbols on a regular computer keyboard.  For example in Spanish, the accent character is used over certain vowels. Letters with accents cannot be represented by the letters on a standard English keyboard.  However, letters with accents are part of a set of letters, numbers, and symbols in  unicode strings .",
            "title": "Unicode Strings"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.02-Bytes-and-Unicode-Strings/#byte-strings",
            "text": "Another way that characters such as letters, numbers, and punctuation can be stored is as  bytes . A  byte  is a unit of computer information that has a fixed width (one byte long). Because of this fixed width, one  byte  only has a small number of unique combinations. This limits  byte strings  to only the letters, numbers and punctuation marks on a computer keyboard (plus a couple extra). This limited set of characters is called the ASCII (pronounced  ask-ee two ) character set. A table of ASCII character codes is in the appendix. For instance, the ASCII character code  49  corresponds to the number one  1 .  Machines speak bytes.  However, external hardware such as Arduinos, oscilloscopes, and voltmeters speak  byte strings  by default. Almost all machines speak  byte strings  by default, including the servers that bring Netflix to your laptop.\nTo define a  byte string  in Python, the letter  b  is placed before the quotation marks  b'  '  when a string is created.   In\u00a0[3]:  \n      bstring   =   b 'bstring'      \nWe can view the data type of the  bstring  variable using the  type()  function.   In\u00a0[4]:  \n      print ( type ( bstring ))           <class 'bytes'>",
            "title": "Byte Strings"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.02-Bytes-and-Unicode-Strings/#convert-between-unicode-strings-and-byte-strings",
            "text": "In order for a Python program to communicate with external hardware, it needs to be able to convert between  Unicode strings  and  byte strings . This conversion is completed with the  .encode()  and  .decode()  methods.   The  .encode()  method \"encodes\" a Unicode string into a byte string.  <byte string> = <unicode string>.encode()  The  .decode()  method \"decodes\" a byte string into a unicode string.  <unicode string> = <byte string>.decode  Remember: Machines speak bytes, Python strings are Unicode by default.    A Python script must decode what machines transmit before further processing. Python defaults to Unicode (and machines do not), so within a script's Python code, remember to  encode   Unicode strings so machines can understand them.   In\u00a0[5]:  \n      ustring   =   'A unicode string'  new_bstring   =   ustring . encode ()  type ( new_bstring )         Out[5]:   bytes         In\u00a0[6]:  \n      bstring   =   b 'bstring'  new_ustring   =   bstring . decode ()  type ( new_ustring )         Out[6]:   str      \nWhen a command from a Python program (a Unicode string) is sent to a piece of external hardware (that reads bytes):  The  .encode()  method is applied to the Unicode string (to convert the Unicode string to a byte string) before the command is sent to the piece of external hardware.  When a chunk of data comes in from a piece of external hardware (a byte string) and is read by a Python script (which speaks Unicode by the default):  The  .decode()  method is applied to the byte string (to convert the byte string to a Unicode string) before it is processed further by Python program.",
            "title": "Convert between Unicode strings and byte strings"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.03-Controlling-an-LED/",
            "text": "Controlling an LED with Python\n\n\nIn this section, you will learn how to control an LED connected to an external piece of hardware (an Arduino) using Python. To accomplish this task, the following hardware is required:\n\n\n\n\nA computer running Python\n\n\nAn Arduino\n\n\nAn LED\n\n\nWires, a resistor and a breadboard to connect the LED to the Arduino\n\n\nA USB cable to connect the Arduino to the computer\nYou will also need to download the Arduino IDE (Integrated Development Environment). Download the Arduino IDE using the following link: \n\n\n\n\n\n\nhttps://www.arduino.cc/en/Main/Software\n\n\n\n\nIf you are working on a computer that you don't have administrator privileges to install software on, be sure to select: [Windows ZIP for non-admin install].\n\n\n\n\nWire the LED to the Arduino\n\n\nConnect the LED to the Arduino using a resistor, wires and a breadboard. Note the short leg of the LED is connected to ground, and the long leg of the resistor is connected through a resistor to PIN 13. A resistor is needed to prevent too much current from flowing through the LED. This type of resistor is called a \npull up resistor\n.\n\n\n\nUpload code to the Arduino\n\n\nUpload the following code to the Arduino using the Arduino IDE. The code is same as in the example sketch called \nPhysical Pixel\n. The \nPhysical Pixel\n sketch is found in the Arduino IDE under File --> Examples --> 04.Communication --> PhysicalPixel\n\n\n\n\nThe code for the Physical Pixel Sketch is shown below.\n\n\n// Arduino IDE: \n// File -> Examples -> 04.Communication -> PhysicalPixel\n\nconst int ledPin = 13; // pin the LED is attached to\nint incomingByte;      // variable stores  serial data\n\nvoid setup() {\n  // initialize serial communication:\n  Serial.begin(9600);\n  // initialize the LED pin as an output:\n  pinMode(ledPin, OUTPUT);\n}\n\nvoid loop() {\n  // see if there's incoming serial data:\n  if (Serial.available() > 0) {\n    // read the oldest byte in the serial buffer:\n    incomingByte = Serial.read();\n    // if it's a capital H (ASCII 72), turn on the LED:\n    if (incomingByte == 'H') {\n      digitalWrite(ledPin, HIGH);\n    }\n    // if it's an L (ASCII 76) turn off the LED:\n    if (incomingByte == 'L') {\n      digitalWrite(ledPin, LOW);\n    }\n  }\n}\n\n\n\n\nConnect the Arduino to the Computer\n\n\nConnect the Arduino to the computer using a USB cable. Ensure two settings in the Arduino IDE are set correctly.\n\n\n\n\nMake sure the \nPort\n is selected properly in the Arduino IDE under Tools --> Port. \n\n\nMake sure the \nBoard\n is selected in the Arduino IDE under Tools --> Board --> Arduino/Genuino Uno\n\n\n\n\nIn the Arduino IDE, click the [checkmark] to verify and the [arrow] to upload. If the sketch does not upload, check which COM port is selected in Tools --> Port.\n\n\n\n\n\n\nTurn the LED on and off with the Arduino Serial Monitor\n\n\nOpen the Arduino Serial Monitor using Tools --> Serial Monitor. In the Serial Monitor type \nL\n or \nH\n and click [Send]. Observe the LED turn on and off. Send \nH\n to turn the LED on. Send \nL\n to turn the LED off.\n\n\n\n\nUse the Python REPL to turn the Arduino LED on and off\n\n\nNext,  use the Python REPL to turn the Arduino on and off. (You can open the Python REPL by typing \n> python\n at the \nAnaconda Prompt\n) At the Python REPL, type the following commands. If a REPL prompt \n>>>\n precedes the command, type the command into the REPL. If the line does not start with a REPL prompt, the line represents expected output. \n\n\nWhen you type the command: \nser = serial.Serial('COM4', 9800, timeout=1)\n, ensure the \n'COM#'\n corresponds to the port that worked with the Arduino IDE in Tools --> Port.\n\n\n>>> import serial\n>>> import time\n\n>>> ser = serial.Serial('COM4', 9600)  # open serial port\n>>> time.sleep(2)                      # wait 2 seconds\n>>> ser.name()\n'COM4'\n\n>>> ser.write(b'H')\n# LED turns on\n\n>>> ser.write(b'L')\n# LED turns off\n\n>>> ser.write(b'H')\n# LED turns on\n\n>>> ser.write(b'L')\n# LED turns off\n\n>>> ser.close()\n>>> exit()\n\n\n\n\nEnsure the command \nser.close()\n is issued before exiting the Python REPL. \n\n\nWrite a Python Script to turn the LED on and off\n\n\nAfter the LED turns on and off based on sending \nH\n and \nL\n with the Arduino Serial Monitor and you can turn the LED on and off with the Python REPL, it's time to write a Python script to turn the LED on and off. Again, the serial communication between the Python script and the Arduino is facilitated by the PySerial package. Ensure PySerial is installed before running the Python script. \n\n\nAt the top of the Python script, import the PySerial package. Note that even though the package is called PySerial, the line \nimport serial\n is used. Python's built-in \ntime\n module is also imported as the \ntime.sleep()\n function will be used in the script.\n\n\n# blink.py\n\nimport serial\nimport time\n\n\n\n\nIn the next part of the Python script, connect to the Arduino over the serial port. In the line \nser = serial.Serial('COM4', 9800, timeout=1)\n, ensure the \n'COM#'\n corresponds to the port that worked with the Arduino IDE. Then create a loop that blinks the Arduino LED on and off for about 5 seconds.  Notice the byte string \nb'H'\n is sent to the Arduino, not the Unicode string \n'H'\n. The Unicode string \n'H'\n is prepended with the letter \nb\n in the line \nser.writelines(b'H')\n. This line of code turns the Unicode string into a byte string before it is sent to the Arduino.\n\n\nser = serial.Serial('COM4', 9800, timeout=1)\ntime.sleep(2)\n\nfor i in range(10):\n    ser.writelines(b'H')   # send a byte\n    time.sleep(0.5)        # wait 0.5 seconds\n    ser.writelines(b'L')   # send a byte\n    time.sleep(0.5)\n\nser.close()\n\n\n\n\nRun the entire Python script and watch the Arduino LED blink ten times. A common problem is the serial port was not closed before the script starts. Make sure the Arduino Serial Monitor is closed and try running \n>>> ser.close()\n at the Python REPL.\n\n\nWrite a Python script to allow a user to turn the LED on and off\n\n\nOnce the LED blinks on and off successfully using a for loop in a Python script, you can write a new Python script that allows a user to turn the LED on and off. At the top of the new Python script import the \nPySerial\n package and built-in \ntime\n module.\n\n\nimport serial\nimport time\n\n\n\n\nNext, give the user instructions. If the user types \nH\n, the LED turns on. If the user types \nL\n the LED turns off. If the user types \nq\n, the program terminates.\n\n\nprint('This is a program that allows a user to turn an LED on and off')\nprint('type H to turn the LED on')\nprint('type L to turn the LED off')\nprint('type q to quit')\n\n\n\n\nFinally, the script needs a while loop to ask the user to enter the letter \nH\n, \nL\n or \nq\n. Once the user enters the letter, the letter is converted to a byte string. Next, the byte string is sent over the serial line to the Arduino. A delay is added so that the Arduino can process the command before reading with the next one.\n\n\nser = serial.Serial('COM4', 9800, timeout=1)\ntime.sleep(2)\n\nuser_input = 'L'\nwhile user_input != 'q':\n    user_input = input('H = on, L = off, q = quit' : )\n    byte_command = encode(user_input)\n    ser.writelines(byte_command)   # send a byte\n    time.sleep(0.5) # wait 0.5 seconds\n\nprint('q entered. Exiting the program')\nser.close()\n\n\n\n\nRun the Python script. Type \nH\n and \nL\n and observe the LED turn on and off. Type \nq\n to end the program.",
            "title": "Controlling an LED with Python"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.03-Controlling-an-LED/#controlling-an-led-with-python",
            "text": "In this section, you will learn how to control an LED connected to an external piece of hardware (an Arduino) using Python. To accomplish this task, the following hardware is required:   A computer running Python  An Arduino  An LED  Wires, a resistor and a breadboard to connect the LED to the Arduino  A USB cable to connect the Arduino to the computer\nYou will also need to download the Arduino IDE (Integrated Development Environment). Download the Arduino IDE using the following link:     https://www.arduino.cc/en/Main/Software   If you are working on a computer that you don't have administrator privileges to install software on, be sure to select: [Windows ZIP for non-admin install].",
            "title": "Controlling an LED with Python"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.03-Controlling-an-LED/#wire-the-led-to-the-arduino",
            "text": "Connect the LED to the Arduino using a resistor, wires and a breadboard. Note the short leg of the LED is connected to ground, and the long leg of the resistor is connected through a resistor to PIN 13. A resistor is needed to prevent too much current from flowing through the LED. This type of resistor is called a  pull up resistor .",
            "title": "Wire the LED to the Arduino"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.03-Controlling-an-LED/#upload-code-to-the-arduino",
            "text": "Upload the following code to the Arduino using the Arduino IDE. The code is same as in the example sketch called  Physical Pixel . The  Physical Pixel  sketch is found in the Arduino IDE under File --> Examples --> 04.Communication --> PhysicalPixel   The code for the Physical Pixel Sketch is shown below.  // Arduino IDE: \n// File -> Examples -> 04.Communication -> PhysicalPixel\n\nconst int ledPin = 13; // pin the LED is attached to\nint incomingByte;      // variable stores  serial data\n\nvoid setup() {\n  // initialize serial communication:\n  Serial.begin(9600);\n  // initialize the LED pin as an output:\n  pinMode(ledPin, OUTPUT);\n}\n\nvoid loop() {\n  // see if there's incoming serial data:\n  if (Serial.available() > 0) {\n    // read the oldest byte in the serial buffer:\n    incomingByte = Serial.read();\n    // if it's a capital H (ASCII 72), turn on the LED:\n    if (incomingByte == 'H') {\n      digitalWrite(ledPin, HIGH);\n    }\n    // if it's an L (ASCII 76) turn off the LED:\n    if (incomingByte == 'L') {\n      digitalWrite(ledPin, LOW);\n    }\n  }\n}",
            "title": "Upload code to the Arduino"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.03-Controlling-an-LED/#connect-the-arduino-to-the-computer",
            "text": "Connect the Arduino to the computer using a USB cable. Ensure two settings in the Arduino IDE are set correctly.   Make sure the  Port  is selected properly in the Arduino IDE under Tools --> Port.   Make sure the  Board  is selected in the Arduino IDE under Tools --> Board --> Arduino/Genuino Uno   In the Arduino IDE, click the [checkmark] to verify and the [arrow] to upload. If the sketch does not upload, check which COM port is selected in Tools --> Port.",
            "title": "Connect the Arduino to the Computer"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.03-Controlling-an-LED/#turn-the-led-on-and-off-with-the-arduino-serial-monitor",
            "text": "Open the Arduino Serial Monitor using Tools --> Serial Monitor. In the Serial Monitor type  L  or  H  and click [Send]. Observe the LED turn on and off. Send  H  to turn the LED on. Send  L  to turn the LED off.",
            "title": "Turn the LED on and off with the Arduino Serial Monitor"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.03-Controlling-an-LED/#use-the-python-repl-to-turn-the-arduino-led-on-and-off",
            "text": "Next,  use the Python REPL to turn the Arduino on and off. (You can open the Python REPL by typing  > python  at the  Anaconda Prompt ) At the Python REPL, type the following commands. If a REPL prompt  >>>  precedes the command, type the command into the REPL. If the line does not start with a REPL prompt, the line represents expected output.   When you type the command:  ser = serial.Serial('COM4', 9800, timeout=1) , ensure the  'COM#'  corresponds to the port that worked with the Arduino IDE in Tools --> Port.  >>> import serial\n>>> import time\n\n>>> ser = serial.Serial('COM4', 9600)  # open serial port\n>>> time.sleep(2)                      # wait 2 seconds\n>>> ser.name()\n'COM4'\n\n>>> ser.write(b'H')\n# LED turns on\n\n>>> ser.write(b'L')\n# LED turns off\n\n>>> ser.write(b'H')\n# LED turns on\n\n>>> ser.write(b'L')\n# LED turns off\n\n>>> ser.close()\n>>> exit()  Ensure the command  ser.close()  is issued before exiting the Python REPL.",
            "title": "Use the Python REPL to turn the Arduino LED on and off"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.03-Controlling-an-LED/#write-a-python-script-to-turn-the-led-on-and-off",
            "text": "After the LED turns on and off based on sending  H  and  L  with the Arduino Serial Monitor and you can turn the LED on and off with the Python REPL, it's time to write a Python script to turn the LED on and off. Again, the serial communication between the Python script and the Arduino is facilitated by the PySerial package. Ensure PySerial is installed before running the Python script.   At the top of the Python script, import the PySerial package. Note that even though the package is called PySerial, the line  import serial  is used. Python's built-in  time  module is also imported as the  time.sleep()  function will be used in the script.  # blink.py\n\nimport serial\nimport time  In the next part of the Python script, connect to the Arduino over the serial port. In the line  ser = serial.Serial('COM4', 9800, timeout=1) , ensure the  'COM#'  corresponds to the port that worked with the Arduino IDE. Then create a loop that blinks the Arduino LED on and off for about 5 seconds.  Notice the byte string  b'H'  is sent to the Arduino, not the Unicode string  'H' . The Unicode string  'H'  is prepended with the letter  b  in the line  ser.writelines(b'H') . This line of code turns the Unicode string into a byte string before it is sent to the Arduino.  ser = serial.Serial('COM4', 9800, timeout=1)\ntime.sleep(2)\n\nfor i in range(10):\n    ser.writelines(b'H')   # send a byte\n    time.sleep(0.5)        # wait 0.5 seconds\n    ser.writelines(b'L')   # send a byte\n    time.sleep(0.5)\n\nser.close()  Run the entire Python script and watch the Arduino LED blink ten times. A common problem is the serial port was not closed before the script starts. Make sure the Arduino Serial Monitor is closed and try running  >>> ser.close()  at the Python REPL.",
            "title": "Write a Python Script to turn the LED on and off"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.03-Controlling-an-LED/#write-a-python-script-to-allow-a-user-to-turn-the-led-on-and-off",
            "text": "Once the LED blinks on and off successfully using a for loop in a Python script, you can write a new Python script that allows a user to turn the LED on and off. At the top of the new Python script import the  PySerial  package and built-in  time  module.  import serial\nimport time  Next, give the user instructions. If the user types  H , the LED turns on. If the user types  L  the LED turns off. If the user types  q , the program terminates.  print('This is a program that allows a user to turn an LED on and off')\nprint('type H to turn the LED on')\nprint('type L to turn the LED off')\nprint('type q to quit')  Finally, the script needs a while loop to ask the user to enter the letter  H ,  L  or  q . Once the user enters the letter, the letter is converted to a byte string. Next, the byte string is sent over the serial line to the Arduino. A delay is added so that the Arduino can process the command before reading with the next one.  ser = serial.Serial('COM4', 9800, timeout=1)\ntime.sleep(2)\n\nuser_input = 'L'\nwhile user_input != 'q':\n    user_input = input('H = on, L = off, q = quit' : )\n    byte_command = encode(user_input)\n    ser.writelines(byte_command)   # send a byte\n    time.sleep(0.5) # wait 0.5 seconds\n\nprint('q entered. Exiting the program')\nser.close()  Run the Python script. Type  H  and  L  and observe the LED turn on and off. Type  q  to end the program.",
            "title": "Write a Python script to allow a user to turn the LED on and off"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.04-Reading-a-Sensor-with-Python/",
            "text": "Reading a Sensor with Python\n\n\nIn this section, you will learn how to read a sensor connected to an external piece of hardware (an Arduino) with Python. To accomplish this, the following hardware is required:\n\n\n\n\nA computer running Python\n\n\nAn Arduino\n\n\nA potentiometer (the sensor)\n\n\nwires, a resistor, an LED, and a breadboard to connect the sensor to the Arduino\n\n\nA USB cable to connect the Arduino to the computer\n\n\n\n\nYou will also need to download the Arduino IDE (the Arduino Integrated Development Environment) using the following link as shown in the previous section: \n\n\n\n\nhttps://www.arduino.cc/en/Main/Software\n\n\n\n\nWire the sensor to the Arduino\n\n\nConnect the potentiometer sensor to the Arduino using a resistor, wires and a breadboard. The middle pin of the potentiometer is connected to pin A0 on the Arduino (green wire). Connect the LED to the Arduino. Note the long lead of the LED is connected to PIN13 on the Arduino (yellow wire) and the short lead of the LED is connected through a resistor to ground (black wire). If the LED is wired backward, the LED will not turn on.\n\n\nIn the hardware schematic, the blue square with an arrow on it is a potentiometer. , and the user knows when the sensor signal changes because the user has turned the potentiometer dial.\n\n\nThe hardware schematic describes how to the Arduino, LED, resistor, and potentiometer are connected with jumper wires and a breadboard.\n\n\n\nUpload code to the Arduino\n\n\nOnce the LED and potentiometer are hooked up the Arduino, upload the following code to the Arduino using the Arduino IDE. Note that Arduinos don't use the Python programming language. The programming language used by Arduinos is a variant of the C programming language.\n\n\nThe Arduino sketch below (an Arduino program is called a sketch) accomplishes a couple things. First, the Arduino reads the potentiometer sensor value and stores the sensor value in the variable \nsensorValue\n. Next, the Arduino sends the sensor value over the serial line (as a byte string). Finally, \nsensorValue\n is compared to \n500\n. If \nsensorValue\n is less than \n500\n, the LED stays off. If \nsensorValue\n is greater than \n500\n, the LED turn on. The read-send-compare process repeats in a loop.\n\n\n// potentiometer_read.ino\n// reads a potentiometer and sends value over serial\nint sensorPin = A0;  // The potentiometer on pin 0                  \nint ledPin = 13;     // The LED is connected on pin 13\nint sensorValue;     // variable to stores data\n\nvoid setup() // runs once when the sketch starts\n{\n  // make the LED pin (pin 13) an output pin\n  pinMode(ledPin, OUTPUT);\n\n  // initialize serial communication\n  Serial.begin(9600);\n}\n\nvoid loop() // runs repeatedly after setup() finishes\n{\n  sensorValue = analogRead(sensorPin);  // read pin A0   \n  Serial.println(sensorValue);         // send data to serial\n\n  if (sensorValue < 500) {            // less than 500?\n    digitalWrite(ledPin, LOW); }     // Turn the LED off\n\n  else {                               // if sensor reading is greater than 500\n    digitalWrite(ledPin, HIGH); }     // Keep the LED on\n\n  delay(100);             // Pause 100 milliseconds before next sensor reading\n}\n\n\n\n\nConnect the Arduino to the computer and Upload the Sketch\n\n\nConnect the Arduino to the computer with a USB cable. In the Arduino IDE select Tools --> Board --> Arduino/Genuino Uno. Upload the sketch to the Arduino. In the Arduino IDE, click the [check mark] to verify and the [arrow] to upload. If the sketch does not upload, check which \nCOM port\n is selected in the Arduino IDE under Tools --> Ports.  \n\n\n\n\n\n\nCheck the Sensor Signal\n\n\nTo verify the Arduino sketch is working correctly, the sensor signal can be checked in three ways:\n\n\n\n\nThe LED turns on and off as the potentiometer dial is rotated\n\n\nIn the Arudino \nSerial Monitor\n, numbers change as the potentiometer dial is rotated\n\n\nIn the Arduino \nSeral Plotter\n, the line moves as the potentiometer dial is rotated\n\n\n\n\nLED turns ON and OFF\n\n\nThe LED should turn on and off as the potentiometer is rotated. If the LED does not turn on and off when the potentiometer is rotated, make sure the potentiometer is turned back and forth through it's full range of rotation. Also, ensure the USB cable is plugged into both the Arduino and the computer.\n\n\nArudino Serial Monitor\n\n\nAccess the Arduino \nSerial Monitor\n using Tools --> Serial Monitor. \n\n\n\nIf the Arduino sketch is working correctly, a running list of numbers is shown in the Arduino \nSerial Monitor\n. When the potentiometer is dialed back and forth, the numbers streaming down the \nSerial Monitor\n should change. The output in the Serial Monitor should be a running list of numbers between \n0\n and \n1024\n.\n\n\nIf a running list of numbers can't be seen in the Arduino \nSerial Monitor\n, ensure [Auto Scroll], [Both NL & CR] and [9600 baud] are selected. Also, make sure the \nPort\n is set correctly in the Arduino IDE under Tools --> Port. \n\n\n\n\nArduino Serial Plotter\n\n\nTo access the Arduino Serial Plotter, select Tools --> Serial Monitor in the Arduino IDE. Note the Arduino Serial Monitor needs to be closed before the Arduino Serial Plotter can be opened. If the sketch is working correctly, potentiometer rotation produces a moving line on the Arduino Serial Plotter. \n\n\n\n\nThe output of the Arduino Serial Plotter should be a running line graph. The height of the line on the graph should change as the potentiometer is dialed back and forth. If the Arduino Serial Plotter is blank, make sure [9600 baud] is selected in the lower right corner of the Serial Plotter. Also, make sure the \nPort\n has been set correctly in the Arduino IDE in Tools --> Port.\n\n\n\n\nUse the Python REPL to read the potentiometer data\n\n\nAt the Python REPL, type the following commands. If the REPL prompt \n>>>\n precedes the command, type the command into the REPL. If the line does not start with a REPL prompt, this line represents expected output.\n\n\n# serial read using the Python REPL\n\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import serial\n>>> import time\n>>> ser = serial.Serial('COM4',9600)\n>>> time.sleep(2)\n>>> b = ser.readline()\n>>> b\nb'409\\r\\n'\n>>> type(b)\n<class 'bytes'>\n>>> str_rn = b.decode()\n>>> str_rn\n'409\\r\\n'\n>>> str = str_rn.rstrip()\n>>> str\n'409'\n>>> type(str)\n<class 'str'>\n>>> f = float(str)\n>>> f\n409.0\n>>> type(f)\n<class 'float'>\n>>> ser.close()\n>>> exit()\n\n\n\n\n\nWrite a Python script to read the sensor\n\n\nAfter the hardware is connected and the Arduino sketch is working correctly, you can construct a Python script to read the sensor value.\n\n\nCommunication between the Python script and the Arduino is accomplished using the PySerial package. Make sure PySerial is installed before the script is run.  See a previous section in this chapter on how to install the PySerial package.\n\n\nAt the top of the Python script, import the PySerial module. Note that although the package is called PySerial, use the line \nimport serial\n to import the package.\n\n\nimport serial\nimport time\n\n\n\n\nNext, set up the serial communication line with the Arduino. Ensure the port specified in the command \nser = serial.Serial('COM4', 9600)\n is the same \nCOM#\n that was used in the Arduino IDE.\n\n\n# set up the serial line\nser = serial.Serial('COM4', 9600)\ntime.sleep(2)\n\n\n\n\nNext, code a loop runs for about 5 seconds while data is collected from the sensor. If it seems like the loop is stuck, press [Ctrl] + [c].\n\n\n# Read and record the data\ndata =[]                       # empty list to store the data\nfor i in range(50):\n    b = ser.readline()         # read a byte string\n        string_n = b.decode()  # decode byte string into Unicode  \n    string = string_n.rstrip() # remove \\n and \\r\n    flt = float(string)        # convert string to float\n    print(flt)\n    data.append(flt)           # add to the end of data list\n    time.sleep(0.1)            # wait (sleep) 0.1 seconds\n\nser.close()\n\n\n\n\nAfter the data is collected, the data can be displayed with the Python's \nprint()\n function and a \nfor\n loop. The output looks like the numbers in the Arduino \nSerial Monitor\n.\n\n\n# show the data\n\nfor line in data:\n    print(line)\n\n\n\n\nThe data can also be plotted with Matplotlib. The resulting plot looks like the line plot in the Arduino \nSerial Plotter\n.\n\n\nimport matplotlib.pyplot as plt\n# if using a Jupyter notebook include\n%matplotlib inline\n\nplt.plot(data)\nplt.xlabel('Time (seconds)')\nplt.ylabel('Potentiometer Reading')\nplt.title('Potentiometer Reading vs. Time')\nplt.show()\n\n\n\n\nRun the entire script and twist the potentiometer. You should see the potentiometer values running by in the Python REPL command window.\n\n\nAfter all the data is collected, you will see a plot like the one below.",
            "title": "Reading a Sensor with Python"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.04-Reading-a-Sensor-with-Python/#reading-a-sensor-with-python",
            "text": "In this section, you will learn how to read a sensor connected to an external piece of hardware (an Arduino) with Python. To accomplish this, the following hardware is required:   A computer running Python  An Arduino  A potentiometer (the sensor)  wires, a resistor, an LED, and a breadboard to connect the sensor to the Arduino  A USB cable to connect the Arduino to the computer   You will also need to download the Arduino IDE (the Arduino Integrated Development Environment) using the following link as shown in the previous section:    https://www.arduino.cc/en/Main/Software",
            "title": "Reading a Sensor with Python"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.04-Reading-a-Sensor-with-Python/#wire-the-sensor-to-the-arduino",
            "text": "Connect the potentiometer sensor to the Arduino using a resistor, wires and a breadboard. The middle pin of the potentiometer is connected to pin A0 on the Arduino (green wire). Connect the LED to the Arduino. Note the long lead of the LED is connected to PIN13 on the Arduino (yellow wire) and the short lead of the LED is connected through a resistor to ground (black wire). If the LED is wired backward, the LED will not turn on.  In the hardware schematic, the blue square with an arrow on it is a potentiometer. , and the user knows when the sensor signal changes because the user has turned the potentiometer dial.  The hardware schematic describes how to the Arduino, LED, resistor, and potentiometer are connected with jumper wires and a breadboard.",
            "title": "Wire the sensor to the Arduino"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.04-Reading-a-Sensor-with-Python/#upload-code-to-the-arduino",
            "text": "Once the LED and potentiometer are hooked up the Arduino, upload the following code to the Arduino using the Arduino IDE. Note that Arduinos don't use the Python programming language. The programming language used by Arduinos is a variant of the C programming language.  The Arduino sketch below (an Arduino program is called a sketch) accomplishes a couple things. First, the Arduino reads the potentiometer sensor value and stores the sensor value in the variable  sensorValue . Next, the Arduino sends the sensor value over the serial line (as a byte string). Finally,  sensorValue  is compared to  500 . If  sensorValue  is less than  500 , the LED stays off. If  sensorValue  is greater than  500 , the LED turn on. The read-send-compare process repeats in a loop.  // potentiometer_read.ino\n// reads a potentiometer and sends value over serial\nint sensorPin = A0;  // The potentiometer on pin 0                  \nint ledPin = 13;     // The LED is connected on pin 13\nint sensorValue;     // variable to stores data\n\nvoid setup() // runs once when the sketch starts\n{\n  // make the LED pin (pin 13) an output pin\n  pinMode(ledPin, OUTPUT);\n\n  // initialize serial communication\n  Serial.begin(9600);\n}\n\nvoid loop() // runs repeatedly after setup() finishes\n{\n  sensorValue = analogRead(sensorPin);  // read pin A0   \n  Serial.println(sensorValue);         // send data to serial\n\n  if (sensorValue < 500) {            // less than 500?\n    digitalWrite(ledPin, LOW); }     // Turn the LED off\n\n  else {                               // if sensor reading is greater than 500\n    digitalWrite(ledPin, HIGH); }     // Keep the LED on\n\n  delay(100);             // Pause 100 milliseconds before next sensor reading\n}",
            "title": "Upload code to the Arduino"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.04-Reading-a-Sensor-with-Python/#connect-the-arduino-to-the-computer-and-upload-the-sketch",
            "text": "Connect the Arduino to the computer with a USB cable. In the Arduino IDE select Tools --> Board --> Arduino/Genuino Uno. Upload the sketch to the Arduino. In the Arduino IDE, click the [check mark] to verify and the [arrow] to upload. If the sketch does not upload, check which  COM port  is selected in the Arduino IDE under Tools --> Ports.",
            "title": "Connect the Arduino to the computer and Upload the Sketch"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.04-Reading-a-Sensor-with-Python/#check-the-sensor-signal",
            "text": "To verify the Arduino sketch is working correctly, the sensor signal can be checked in three ways:   The LED turns on and off as the potentiometer dial is rotated  In the Arudino  Serial Monitor , numbers change as the potentiometer dial is rotated  In the Arduino  Seral Plotter , the line moves as the potentiometer dial is rotated",
            "title": "Check the Sensor Signal"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.04-Reading-a-Sensor-with-Python/#led-turns-on-and-off",
            "text": "The LED should turn on and off as the potentiometer is rotated. If the LED does not turn on and off when the potentiometer is rotated, make sure the potentiometer is turned back and forth through it's full range of rotation. Also, ensure the USB cable is plugged into both the Arduino and the computer.",
            "title": "LED turns ON and OFF"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.04-Reading-a-Sensor-with-Python/#arudino-serial-monitor",
            "text": "Access the Arduino  Serial Monitor  using Tools --> Serial Monitor.   \nIf the Arduino sketch is working correctly, a running list of numbers is shown in the Arduino  Serial Monitor . When the potentiometer is dialed back and forth, the numbers streaming down the  Serial Monitor  should change. The output in the Serial Monitor should be a running list of numbers between  0  and  1024 .  If a running list of numbers can't be seen in the Arduino  Serial Monitor , ensure [Auto Scroll], [Both NL & CR] and [9600 baud] are selected. Also, make sure the  Port  is set correctly in the Arduino IDE under Tools --> Port.",
            "title": "Arudino Serial Monitor"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.04-Reading-a-Sensor-with-Python/#arduino-serial-plotter",
            "text": "To access the Arduino Serial Plotter, select Tools --> Serial Monitor in the Arduino IDE. Note the Arduino Serial Monitor needs to be closed before the Arduino Serial Plotter can be opened. If the sketch is working correctly, potentiometer rotation produces a moving line on the Arduino Serial Plotter.    The output of the Arduino Serial Plotter should be a running line graph. The height of the line on the graph should change as the potentiometer is dialed back and forth. If the Arduino Serial Plotter is blank, make sure [9600 baud] is selected in the lower right corner of the Serial Plotter. Also, make sure the  Port  has been set correctly in the Arduino IDE in Tools --> Port.",
            "title": "Arduino Serial Plotter"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.04-Reading-a-Sensor-with-Python/#use-the-python-repl-to-read-the-potentiometer-data",
            "text": "At the Python REPL, type the following commands. If the REPL prompt  >>>  precedes the command, type the command into the REPL. If the line does not start with a REPL prompt, this line represents expected output.  # serial read using the Python REPL\n\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import serial\n>>> import time\n>>> ser = serial.Serial('COM4',9600)\n>>> time.sleep(2)\n>>> b = ser.readline()\n>>> b\nb'409\\r\\n'\n>>> type(b)\n<class 'bytes'>\n>>> str_rn = b.decode()\n>>> str_rn\n'409\\r\\n'\n>>> str = str_rn.rstrip()\n>>> str\n'409'\n>>> type(str)\n<class 'str'>\n>>> f = float(str)\n>>> f\n409.0\n>>> type(f)\n<class 'float'>\n>>> ser.close()\n>>> exit()",
            "title": "Use the Python REPL to read the potentiometer data"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.04-Reading-a-Sensor-with-Python/#write-a-python-script-to-read-the-sensor",
            "text": "After the hardware is connected and the Arduino sketch is working correctly, you can construct a Python script to read the sensor value.  Communication between the Python script and the Arduino is accomplished using the PySerial package. Make sure PySerial is installed before the script is run.  See a previous section in this chapter on how to install the PySerial package.  At the top of the Python script, import the PySerial module. Note that although the package is called PySerial, use the line  import serial  to import the package.  import serial\nimport time  Next, set up the serial communication line with the Arduino. Ensure the port specified in the command  ser = serial.Serial('COM4', 9600)  is the same  COM#  that was used in the Arduino IDE.  # set up the serial line\nser = serial.Serial('COM4', 9600)\ntime.sleep(2)  Next, code a loop runs for about 5 seconds while data is collected from the sensor. If it seems like the loop is stuck, press [Ctrl] + [c].  # Read and record the data\ndata =[]                       # empty list to store the data\nfor i in range(50):\n    b = ser.readline()         # read a byte string\n        string_n = b.decode()  # decode byte string into Unicode  \n    string = string_n.rstrip() # remove \\n and \\r\n    flt = float(string)        # convert string to float\n    print(flt)\n    data.append(flt)           # add to the end of data list\n    time.sleep(0.1)            # wait (sleep) 0.1 seconds\n\nser.close()  After the data is collected, the data can be displayed with the Python's  print()  function and a  for  loop. The output looks like the numbers in the Arduino  Serial Monitor .  # show the data\n\nfor line in data:\n    print(line)  The data can also be plotted with Matplotlib. The resulting plot looks like the line plot in the Arduino  Serial Plotter .  import matplotlib.pyplot as plt\n# if using a Jupyter notebook include\n%matplotlib inline\n\nplt.plot(data)\nplt.xlabel('Time (seconds)')\nplt.ylabel('Potentiometer Reading')\nplt.title('Potentiometer Reading vs. Time')\nplt.show()  Run the entire script and twist the potentiometer. You should see the potentiometer values running by in the Python REPL command window.  After all the data is collected, you will see a plot like the one below.",
            "title": "Write a Python script to read the sensor"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.05-Summary/",
            "text": "Summary\n\n\nIn this chapter, you learned how to use Python to interact with external hardware. In particular, you learned how to use Python and the PySerial package to communicate with an Arduino. \n\n\nThe chapter began with a discussion of Unicode strings and byte strings. In Python, all strings are Unicode by default, but machines speak in bytes. To create a byte string in Python, prepend a string with the letter \nb\n as in \nb'my string'\n. Python's \n.encode()\n and \n.decode()\n methods convert between Unicode strings and byte strings.\n\n\nIn the first project of the chapter, you learned how to use Python and the PySerial package to control an LED attached to an Arduino. The general steps were:\n\n\n\n\ndownload and install the Arduino IDE\n\n\nwire a LED to an Arduino\n\n\nconnect the Arduino the computer and upload code\n\n\nblink the LED with the Arduino Serial Monitor\n\n\nblink the LED with the Python REPL\n\n\nblink the LED with a Python script\n\n\nrun a Python script to have a user turn the LED on and off\n\n\n\n\nThe second project of the chapter involved reading a sensor connected to an Arduino with Python and PySerial. To complete this project, the general steps were:\n\n\n\n\ndownload and install the Arduino IDE\n\n\nwire a potentiometer sensor and LED to the Arduino\n\n\nconnect the Arduino the computer and upload an Arduino sketch\n\n\ncheck the sensor signal with the LED, Arduino Serial Monitor and Arduino Serial Plotter\n\n\nuse the Python REPL to read the potentiometer sensor\n\n\nrun a Python script to collect the potentiometer sensor data and plot the data using Matplotlib\n\n\n\n\nKey Terms and Concepts\n\n\nExternal Hardware\n\n\nSensor\n\n\nLEDArduino\n\n\nIDE\n\n\nserial\n\n\nserial communication\n\n\nserial line\n\n\nUSB\n\n\nUnicode\n\n\nUnicode string\n\n\nbyte string\n\n\nport\n\n\n.ino-file\n\n\nC programming language\n\n\nbaud\n\n\nnewline character\n\n\nAdditional Resources\n\n\nThe official documentation for the PySerial Package is found here: \nhttps://docs.pyserial.com\n\n\nThe Arduino project has a great set of tutorials found here:\nhttps://Arduino.com/tutorials\n\n\nSparkFun has a great overview of wiring an LED to an Arduino here: and a great overview of writing a potentiometer to an Arduino here:",
            "title": "Summary"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.05-Summary/#summary",
            "text": "In this chapter, you learned how to use Python to interact with external hardware. In particular, you learned how to use Python and the PySerial package to communicate with an Arduino.   The chapter began with a discussion of Unicode strings and byte strings. In Python, all strings are Unicode by default, but machines speak in bytes. To create a byte string in Python, prepend a string with the letter  b  as in  b'my string' . Python's  .encode()  and  .decode()  methods convert between Unicode strings and byte strings.  In the first project of the chapter, you learned how to use Python and the PySerial package to control an LED attached to an Arduino. The general steps were:   download and install the Arduino IDE  wire a LED to an Arduino  connect the Arduino the computer and upload code  blink the LED with the Arduino Serial Monitor  blink the LED with the Python REPL  blink the LED with a Python script  run a Python script to have a user turn the LED on and off   The second project of the chapter involved reading a sensor connected to an Arduino with Python and PySerial. To complete this project, the general steps were:   download and install the Arduino IDE  wire a potentiometer sensor and LED to the Arduino  connect the Arduino the computer and upload an Arduino sketch  check the sensor signal with the LED, Arduino Serial Monitor and Arduino Serial Plotter  use the Python REPL to read the potentiometer sensor  run a Python script to collect the potentiometer sensor data and plot the data using Matplotlib",
            "title": "Summary"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.05-Summary/#key-terms-and-concepts",
            "text": "External Hardware  Sensor  LEDArduino  IDE  serial  serial communication  serial line  USB  Unicode  Unicode string  byte string  port  .ino-file  C programming language  baud  newline character",
            "title": "Key Terms and Concepts"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.05-Summary/#additional-resources",
            "text": "The official documentation for the PySerial Package is found here:  https://docs.pyserial.com  The Arduino project has a great set of tutorials found here: https://Arduino.com/tutorials  SparkFun has a great overview of wiring an LED to an Arduino here: and a great overview of writing a potentiometer to an Arduino here:",
            "title": "Additional Resources"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.06-Project-Ideas/",
            "text": "Project Ideas\n\n\nP11.01 Use Python and  PySerial measure light levels using a photoresistor connected to an Arduino.\n\n\nP11.02 Use Python and PySerial to  control a relay connected to an Arduino\n\n\nP11.03 Use Python and PySerial to  read a pH sensor connected to an Arduino\n\n\nP11.04 Use Python and PySerial to read a photosensor connected to an Arduino and turn on and off an LED based on light level.\n\n\nP11.05 Use Python and PySerial to read a temperature connected to an Arduino and send temperature measurements up to an IoT cloud server, like io.adafruit.com using the Requests package.\n\n\nP11.06 Use Python and PySerial to turn on and off an LED connected to an Arduino based on values stored on an IoT cloud server, like io.adafruit.com, using the Requests package.",
            "title": "Project Ideas"
        },
        {
            "location": "/11-Python-and-External-Hardware/11.06-Project-Ideas/#project-ideas",
            "text": "P11.01 Use Python and  PySerial measure light levels using a photoresistor connected to an Arduino.  P11.02 Use Python and PySerial to  control a relay connected to an Arduino  P11.03 Use Python and PySerial to  read a pH sensor connected to an Arduino  P11.04 Use Python and PySerial to read a photosensor connected to an Arduino and turn on and off an LED based on light level.  P11.05 Use Python and PySerial to read a temperature connected to an Arduino and send temperature measurements up to an IoT cloud server, like io.adafruit.com using the Requests package.  P11.06 Use Python and PySerial to turn on and off an LED connected to an Arduino based on values stored on an IoT cloud server, like io.adafruit.com, using the Requests package.",
            "title": "Project Ideas"
        },
        {
            "location": "/12-MicroPython/12.00-Introduction/",
            "text": "MicroPython\n\n\nIntroduction\n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nInstall MicroPython on a microcontroller\n\n\n\n\n\n\nRun Python commands on a microcontroller using the MicroPython REPL\n\n\n\n\n\n\nSave module files and run Python scripts on a microcontroller\n\n\n\n\n\n\nUse MicroPython to read data off a sensor\n\n\n\n\n\n\nUse MicroPython to switch on and off a light",
            "title": "Introduction"
        },
        {
            "location": "/12-MicroPython/12.00-Introduction/#micropython",
            "text": "",
            "title": "MicroPython"
        },
        {
            "location": "/12-MicroPython/12.00-Introduction/#introduction",
            "text": "By the end of this chapter you will be able to:    Install MicroPython on a microcontroller    Run Python commands on a microcontroller using the MicroPython REPL    Save module files and run Python scripts on a microcontroller    Use MicroPython to read data off a sensor    Use MicroPython to switch on and off a light",
            "title": "Introduction"
        },
        {
            "location": "/12-MicroPython/12.01-What-is-MicroPython/",
            "text": "What is MicroPython?\n\n\nWhat is MicroPython?\n\n\nMicroPython\n is a port, or version of Python designed to run on small, inexpensive, low-power microcontrollers. Examples of microcontrollers that Micropython can run on includes the \npyboard\n, the \nWiPy\n and ESP8266-based boards like the \nAdafruit Feather Huzzah\n and ESP8266 NodeMCU.  \n\n\nTraditionally, Python runs on desktop or laptop computers and cloud servers. Compared to a desktop or laptop, microcontrollers are much smaller, cheaper and less powerful.  A \"regular\" version of Python can't run on small, cheap microcontrollers because Python is too resource intensive. Regular Python takes up too much hard disk space, runs on too much RAM and requires a more powerful processor than microcontrollers have. \n\n\nIt is pretty amazing that a version of Python (MicroPython) runs on these small, cheap microcontrollers like the ESP8266. To get MicroPython to run at all on these little low-cost boards, MicroPython only contains a subset of all the Standard Library modules included with \"regular\" Python. Some of the libraries that are included with MicroPython don't have the full set of functions and classes that come with the full version of Python. By not including the full functionality of \"regular\" Python, MicroPython is compact (around 600 kB for the ESP8266 port), and MicroPython only uses a small amount of RAM (down to 16k according to the \nMicropython main page\n.)\n\n\nYou can try using MicroPython online with a browser-based \nMicroPython online emulator\n. The emulator allows you to run commands at a MicroPython Prompt and see the result on a virtual pyboard. \n\n\nWhat is MicroPython used for?\n\n\nMicroPython can be installed on small, cheap microcontrollers like the \nESP8266\n. Anything these small microcontrollers can do, MicroPython can do. A microcontroller running MicroPython can read a remote sensor to measure things like temperature, humidity and light level. MicroPython can also be used to blink LED's, control arrays of LED's, or run small displays. MicroPython can control servo motors, stepper motors, and solenoids. Civil Engineers could use MicroPython to monitor water levels. Mechanical Engineers could use MicroPython to drive robots. Electrical Engineers could use MicroPython to measure voltage levels in embedded systems. \n\n\nBy the end of this chapter, you will learn how to use MicroPython, running on a small cheap ESP8266 board, to turn on and off a light and read a sensor.\n\n\nWhy should problem solvers learn MircoPython?\n\n\nPython is used to solve problems such as calculations, statistics, modeling, and visualization. But Python on its own is relatively limited in controlling devices outside the computer it's running on. You don't want to leave a laptop in a remote estuary to measure water temperature, but you could leave a little microcontroller and low-cost temperature sensor in a remote location. A small robot can't carry around a heavy laptop, but a small, light, low-power board could run a simple robot. You don't want to use a computer for every small electrical measurement or embedded system control, but a $2 WiFi module would work. \n\n\nBesides, learning how to use MicroPython on small, cheap microcontroller can help problem solvers understand how programming works. Seeing and controlling a motor whirl is a different kind of feedback and excitement compared to seeing text on a screen that shows how fast a motor spins. Seeing an array of LED's light up produces a different kind of wonder compared to seeing a 2-D plot on a computer screen. Plus MicroPython is fun! It's as easy to program MicroPython as it is to program regular Python. The little projects you can do with MicroPython running on a small, low-cost board are almost unlimited. We could send MicroPython to space in a micro-satellite, or bury MicroPython underground in a boring machine, or launch MicroPython into the sky on a weather balloon.",
            "title": "What is MicroPython?"
        },
        {
            "location": "/12-MicroPython/12.01-What-is-MicroPython/#what-is-micropython",
            "text": "",
            "title": "What is MicroPython?"
        },
        {
            "location": "/12-MicroPython/12.01-What-is-MicroPython/#what-is-micropython_1",
            "text": "MicroPython  is a port, or version of Python designed to run on small, inexpensive, low-power microcontrollers. Examples of microcontrollers that Micropython can run on includes the  pyboard , the  WiPy  and ESP8266-based boards like the  Adafruit Feather Huzzah  and ESP8266 NodeMCU.    Traditionally, Python runs on desktop or laptop computers and cloud servers. Compared to a desktop or laptop, microcontrollers are much smaller, cheaper and less powerful.  A \"regular\" version of Python can't run on small, cheap microcontrollers because Python is too resource intensive. Regular Python takes up too much hard disk space, runs on too much RAM and requires a more powerful processor than microcontrollers have.   It is pretty amazing that a version of Python (MicroPython) runs on these small, cheap microcontrollers like the ESP8266. To get MicroPython to run at all on these little low-cost boards, MicroPython only contains a subset of all the Standard Library modules included with \"regular\" Python. Some of the libraries that are included with MicroPython don't have the full set of functions and classes that come with the full version of Python. By not including the full functionality of \"regular\" Python, MicroPython is compact (around 600 kB for the ESP8266 port), and MicroPython only uses a small amount of RAM (down to 16k according to the  Micropython main page .)  You can try using MicroPython online with a browser-based  MicroPython online emulator . The emulator allows you to run commands at a MicroPython Prompt and see the result on a virtual pyboard.",
            "title": "What is MicroPython?"
        },
        {
            "location": "/12-MicroPython/12.01-What-is-MicroPython/#what-is-micropython-used-for",
            "text": "MicroPython can be installed on small, cheap microcontrollers like the  ESP8266 . Anything these small microcontrollers can do, MicroPython can do. A microcontroller running MicroPython can read a remote sensor to measure things like temperature, humidity and light level. MicroPython can also be used to blink LED's, control arrays of LED's, or run small displays. MicroPython can control servo motors, stepper motors, and solenoids. Civil Engineers could use MicroPython to monitor water levels. Mechanical Engineers could use MicroPython to drive robots. Electrical Engineers could use MicroPython to measure voltage levels in embedded systems.   By the end of this chapter, you will learn how to use MicroPython, running on a small cheap ESP8266 board, to turn on and off a light and read a sensor.",
            "title": "What is MicroPython used for?"
        },
        {
            "location": "/12-MicroPython/12.01-What-is-MicroPython/#why-should-problem-solvers-learn-mircopython",
            "text": "Python is used to solve problems such as calculations, statistics, modeling, and visualization. But Python on its own is relatively limited in controlling devices outside the computer it's running on. You don't want to leave a laptop in a remote estuary to measure water temperature, but you could leave a little microcontroller and low-cost temperature sensor in a remote location. A small robot can't carry around a heavy laptop, but a small, light, low-power board could run a simple robot. You don't want to use a computer for every small electrical measurement or embedded system control, but a $2 WiFi module would work.   Besides, learning how to use MicroPython on small, cheap microcontroller can help problem solvers understand how programming works. Seeing and controlling a motor whirl is a different kind of feedback and excitement compared to seeing text on a screen that shows how fast a motor spins. Seeing an array of LED's light up produces a different kind of wonder compared to seeing a 2-D plot on a computer screen. Plus MicroPython is fun! It's as easy to program MicroPython as it is to program regular Python. The little projects you can do with MicroPython running on a small, low-cost board are almost unlimited. We could send MicroPython to space in a micro-satellite, or bury MicroPython underground in a boring machine, or launch MicroPython into the sky on a weather balloon.",
            "title": "Why should problem solvers learn MircoPython?"
        },
        {
            "location": "/12-MicroPython/12.02-Installing-MicroPython/",
            "text": "Installing MicroPython\n\n\nMicroPython is a port of the Python programming language that runs on small, inexpensive microcontrollers. In this section, you will learn how to install MicroPython on an ESP8266-based microcontroller such as the Adafruit Feather Huzzah ESP8266 and the ESP8266 NodeMCU using Python and a package called \nesptool\n. In subsequent sections, you will learn how to control an LED and read a sensor using MicroPython.\nThe following hardware is needed to install MicroPython on an ESP8266-based microcontroller:\n\n\n\n\n\n\n\n\nHardware\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nA laptop or desktop computer\n\n\ninstall MicroPython on the microcontroller\n\n\n\n\n\n\nAdafruit Feather Huzzah ESP8266\n\n\nmicrocontroller running MicroPython\n\n\n\n\n\n\nmicro USB cable\n\n\nconnect the microcontroller to computer\n\n\n\n\n\n\n\n\nThe following software is used to install MicroPython on an ESP8266-based microcontroller:\n\n\n\n\n\n\n\n\nSoftware\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nAnaconda distribution of Python\n\n\nrun \nesptool\n that installs MicroPython\n\n\n\n\n\n\nAnaconda Prompt\n\n\nInstall \nesptool\n package with \npip\n\n\n\n\n\n\nesptool\n\n\nA \npip\n installable package used to install MicroPython\n\n\n\n\n\n\nfirmware \n.bin\n file\n\n\nVersion of MicroPython run on the microcontroller\n\n\n\n\n\n\n### Summary of Steps:\n\n\n\n\n\n\n\n\n1. Install the \nAnaconda distribution\n of Python\n\n\n\n\n\n\n\n\n2. Create a new conda environment and \npip install esptool\n\n\n\n\n\n\n\n\n3. Download the \nlatest MicroPython .bin firmware file\n\n\n\n\n\n\n\n\n4. Install the \nSiLabs driver\n for the Adafruit Feather Huzzah ESP8266\n\n\n\n\n\n\n\n\n5. Connect the ESP8266-based microcontroller board to the laptop using a micro USB cable\n\n\n\n\n\n\n\n\n6. Determine which serial port the microcontroller is connected to\n\n\n\n\n\n\n\n\n7. Run the \nesptool\n to upload the \n.bin\n firmware file to the microcontroller\n\n\n\n\n\n\n\n\n8. Download and install \nPuTTY\n, a serial monitor\n\n\n\n\n\n\n\n\n9. Use PuTTY to connect to the microcontroller and run commands at the MicroPython REPL\n\n\n\n\n\n\n\n\n### Install the Anaconda distribution of Python\n\n\n\n\n\n\n\n\nIf you don't have the Anaconda distribution of Python installed already, go to \nAnaconda.com/download\n to download and install the latest version.\n\n\n\n\n\n\n\n\n### Create a new conda environment and install \nesptool\n\n\n\n\n\n\n\n\nTo install MicroPython on the ESP8266-based microcontroller, we will start by creating a \nvirtual environment\n. A virtual environment is an isolated Python interpreter and a set of packages that are separate from the base version of Python running on your computer. We'll create a new virtual environment with the \nAnaconda Prompt\n and the conda command line tool.\n\n\n\n\n\n\n\n\n\n\nOpen the \nAnaconda Prompt\n and create a new virtual environment named \nmicropython\n. Activate the environment with the command \nconda activate\n. After activating the virtual environment, you should see the virtual environment name \n(micropython)\n before the \n>\n Prompt.  Once inside the virtual environment, use \npip\n to install \nesptool\n. \nesptool\n will be used to upload the MicroPython \n.bin\n firmware file onto the ESP8266-based microcontroller. Confirm that \nesptool\n is installed in the \n(micropython)\n virtual environment by running the command \nconda list\n. The list of commands below also creates a new directory in the \nDocuments\n folder called \nmicropython\n to store all the project files. \n\n\n> conda create -n micropython python=3.6\n> conda activate micropython\n(micropython) > pip install esptool\n(micropython) > conda list\n(micropython) > cd Documents\n(micropython) > mkdir micropthon\n(micropython) > cd micropython\n\n\n\n\nDownload the latest MicroPython firmware .bin file\n\n\nGo to GitHub.com and download the latest \n.bin\n firmware file at \nmicropython.org/download#esp8266\n. Move the \n.bin\n firmware file to a new \nmicropython\n directory. The \n.bin\n firmware file is the version of MicroPython that runs on the ESP8266 microcontroller. Straight from the manufacturer, the ESP8266 microcontroller probably does not have MicroPyton installed, so we need to install MicroPython ourselves. After installing the Micropython \n.bin\n firmware file onto the board, we will be able to bring up the MicroPython REPL prompt, type commands into the Micropython REPL and run Micropython \n.py\n scripts on the board.\n\n\n\n\nInstall the SiLabs driver for the ESP8266-based microcontroller\n\n\nBefore we connect the ESP8266-based microcontroller such as an Adafruit Feather Huzzah ESP8266 or ESP8266 NodeMCU to the computer, a specific driver needs to be installed. For Windows 10 laptop to see the board, the \nCP210x USB to UART Bridge VCP driver\n needs to be downloaded from SiLabs and installed. The driver download and installation is quick and easy but does require administrator privileges.\n\n\n\n\nConnect the ESP8266-based microcontroller to the computer\n\n\nUse a microUSB cable (the same kind of cable that charges many mobile phones) to connect the ESP8266-based microcontroller to the computer. Make sure the microUSB cable is a full \nUSB data cable\n and not just a power only cable. If you have trouble getting the microcontroller to work, one reason might be the micoUSB cable you are using is only a charging cable and can not transfer data.\n\n\nDetermine which serial port the ESP8266-based microcontroller is connected to\n\n\nUse the Windows Device Manager to determine which serial port the ESP8266-based microcontroller is connected to is connected to. The serial port is one of the parameters which needs to be defined when the \n.bin\n firmware file is upload on the board.\n\n\nLook for something like \nSilicon Labs CP210x USB to UART Bridge (COM4)\n in the \nPorts (COM & LPT)\n menu of the Windows Device Manager. TCP210x USB to UART Bridge refers to the chip that handles serial communication on the board, not the ESP8266 chip itself. Make a note of the number after \n(COM )\n. The serial port number often comes up as \n(COM4)\n but it may be different on your computer. \n\n\n\n\n\n\nRun esptool to upload the .bin file to the ESP8266-based microcontroller\n\n\nOpen the Anaconda Prompt with the Windows Start Menu and \ncd\n(change directory) into the \nmicropython\n directory which contains the \n.bin\n file. Use the \ndir\n command to see the \nmicropython\n directory contents. Make sure the \n.bin\n firmware file is in the directory. The \n.bin\n firmware file is named something like \nesp8266-20171101-v1.9.3.bin\n. Activate the micropython virtual environment with the command \nconda activate micropython\n. Run \nesptool --help\n to ensure \nesptool\n is installed properly. Note there is no \n.py\n extension after \nesptool\n. On Windows , the command \nesptool\n works, but the command \nesptool.py\n may not. (Note this behavior is different than the commands shown on the \nMicroPython docs\n). If you try to run \nesptool\n and you are not in the \n(micropython)\n virtual environment, an error is returned. \n\n\n> cd Documents\n> cd micropython\n> pwd\nDocuments/micropython\n> dir\n> conda activate micropython\n(micropython) > esptool --help\n\n\n\n\n\n\nBefore uploading the \n.bin\n firmware file to the ESP8266-based microcontoller, it is best practice to first erase the flash memory on the board using the command \nesptool erase_flash\n. Make sure to specify the \n--port\n. The argument after \n--port\n is the \nCOM\n port assigned to the ESP8266 board shown in the Windows Device Manager.  This port often comes up as \nCOM4\n.\n\n\n(micropython) > esptool --port COM4 erase_flash\n\n\n\n\n\n\nNow you can finally write the \n.bin\n firmware file to the flash memory on the microcontroller using the \nesptool write_flash\n command. Make sure to use the exact firmware file name you see sitting in the \nmicropython\n directory. The port needs to be set corresponding to the port you found in the Windows Device Manager. \n---baud\n is the baud rate or upload speed. I found that \n--baud 460800\n worked, but you could also specify \n--baud 115200\n which is slower. The upload time was a matter of seconds with either baud rate. The \n0\n after \n--flash_size=dectect\n means the firmware is written at the start of the flash memory (the 0th position) on the board. Again, make sure the \n.bin\n firmware file name is correct. The long file name is easy to mistype.\n\n\n(micropython) > esptool --port COM4 --baud 115200 write_flash \\\n--flash_size=detect 0 esp8266-20171101-v1.9.3.bin\n\n\n\n\n\n\nDownload and install PuTTY, a serial monitor\n\n\nNow that MicroPython is installed on the ESP8266-based microcontroller, we can communicate with our board over a serial connection. However, Windows doesn't have a built-in serial monitor (like \nscreen\n on MacOS and Linux). Therefore, if you are using the Windows operating system, you need to download and install a serial communication tool like \nPuTTY\n.\n\n\nPuTTY is a lightweight serial and SSH client for Windows. PuTTY provides an interface to communicate with the ESP8266-based microcontroller. \nPuTTY can be downloaded here\n. PuTTY is pretty small, and the download and installation are quick.\n\n\n\n\nConnect to the ESP8266-based Microcontroller with PuTTY\n\n\nEnsure the ESP8266-based microcontroller is connected to the computer with a USB cable and ensure the board is visible in the Windows Device Manager. Then use PuTTY to connect to the board over serial.  Make sure to specify the correct serial port in the \nSerial line\n box and set \n115200\n baud in the Speed box. \nMicropython is set to run at 115200 baud\n, other baud rates will lead to junk characters in the serial monitor. Make sure to select the \nSerial\n radio button below the header \nConnection type:\n near the top of the PuTTY window. Overlooking this detail is easy. \n\n\n\n\n\n\nIf you see \n>>>\n the MicroPython REPL (the MicroPython prompt), MicroPython is successfully installed on your ESP8266-based microcontroller.\n\n\nSometimes, you may need to type [Enter] or Ctrl-D to bring up the \n>>>\n REPL prompt. If the \n>>>\n REPL prompt is not displayed in your PuTTY window, try to close PuTTY, unplug then replug the board and open PuTTY again. Most ESP8266-based microcontrollers also have a tiny little black RESET button that can be pressed to restart the board.  \n\n\n\n\nAt the \n>>>\n MicroPython REPL prompt try the following commands:\n\n\n>>> print('Problem Solving with MicroPython!')\nProblem Solving with MicroPython!\n\n>>> import sys\n>>> sys.platform\n'esp8266'",
            "title": "Installing MicroPython"
        },
        {
            "location": "/12-MicroPython/12.02-Installing-MicroPython/#installing-micropython",
            "text": "MicroPython is a port of the Python programming language that runs on small, inexpensive microcontrollers. In this section, you will learn how to install MicroPython on an ESP8266-based microcontroller such as the Adafruit Feather Huzzah ESP8266 and the ESP8266 NodeMCU using Python and a package called  esptool . In subsequent sections, you will learn how to control an LED and read a sensor using MicroPython.\nThe following hardware is needed to install MicroPython on an ESP8266-based microcontroller:     Hardware  Purpose      A laptop or desktop computer  install MicroPython on the microcontroller    Adafruit Feather Huzzah ESP8266  microcontroller running MicroPython    micro USB cable  connect the microcontroller to computer     The following software is used to install MicroPython on an ESP8266-based microcontroller:     Software  Purpose      Anaconda distribution of Python  run  esptool  that installs MicroPython    Anaconda Prompt  Install  esptool  package with  pip    esptool  A  pip  installable package used to install MicroPython    firmware  .bin  file  Version of MicroPython run on the microcontroller    ### Summary of Steps:     1. Install the  Anaconda distribution  of Python     2. Create a new conda environment and  pip install esptool     3. Download the  latest MicroPython .bin firmware file     4. Install the  SiLabs driver  for the Adafruit Feather Huzzah ESP8266     5. Connect the ESP8266-based microcontroller board to the laptop using a micro USB cable     6. Determine which serial port the microcontroller is connected to     7. Run the  esptool  to upload the  .bin  firmware file to the microcontroller     8. Download and install  PuTTY , a serial monitor     9. Use PuTTY to connect to the microcontroller and run commands at the MicroPython REPL     ### Install the Anaconda distribution of Python     If you don't have the Anaconda distribution of Python installed already, go to  Anaconda.com/download  to download and install the latest version.     ### Create a new conda environment and install  esptool     To install MicroPython on the ESP8266-based microcontroller, we will start by creating a  virtual environment . A virtual environment is an isolated Python interpreter and a set of packages that are separate from the base version of Python running on your computer. We'll create a new virtual environment with the  Anaconda Prompt  and the conda command line tool.      Open the  Anaconda Prompt  and create a new virtual environment named  micropython . Activate the environment with the command  conda activate . After activating the virtual environment, you should see the virtual environment name  (micropython)  before the  >  Prompt.  Once inside the virtual environment, use  pip  to install  esptool .  esptool  will be used to upload the MicroPython  .bin  firmware file onto the ESP8266-based microcontroller. Confirm that  esptool  is installed in the  (micropython)  virtual environment by running the command  conda list . The list of commands below also creates a new directory in the  Documents  folder called  micropython  to store all the project files.   > conda create -n micropython python=3.6\n> conda activate micropython\n(micropython) > pip install esptool\n(micropython) > conda list\n(micropython) > cd Documents\n(micropython) > mkdir micropthon\n(micropython) > cd micropython",
            "title": "Installing MicroPython"
        },
        {
            "location": "/12-MicroPython/12.02-Installing-MicroPython/#download-the-latest-micropython-firmware-bin-file",
            "text": "Go to GitHub.com and download the latest  .bin  firmware file at  micropython.org/download#esp8266 . Move the  .bin  firmware file to a new  micropython  directory. The  .bin  firmware file is the version of MicroPython that runs on the ESP8266 microcontroller. Straight from the manufacturer, the ESP8266 microcontroller probably does not have MicroPyton installed, so we need to install MicroPython ourselves. After installing the Micropython  .bin  firmware file onto the board, we will be able to bring up the MicroPython REPL prompt, type commands into the Micropython REPL and run Micropython  .py  scripts on the board.",
            "title": "Download the latest MicroPython firmware .bin file"
        },
        {
            "location": "/12-MicroPython/12.02-Installing-MicroPython/#install-the-silabs-driver-for-the-esp8266-based-microcontroller",
            "text": "Before we connect the ESP8266-based microcontroller such as an Adafruit Feather Huzzah ESP8266 or ESP8266 NodeMCU to the computer, a specific driver needs to be installed. For Windows 10 laptop to see the board, the  CP210x USB to UART Bridge VCP driver  needs to be downloaded from SiLabs and installed. The driver download and installation is quick and easy but does require administrator privileges.",
            "title": "Install the SiLabs driver for the ESP8266-based microcontroller"
        },
        {
            "location": "/12-MicroPython/12.02-Installing-MicroPython/#connect-the-esp8266-based-microcontroller-to-the-computer",
            "text": "Use a microUSB cable (the same kind of cable that charges many mobile phones) to connect the ESP8266-based microcontroller to the computer. Make sure the microUSB cable is a full  USB data cable  and not just a power only cable. If you have trouble getting the microcontroller to work, one reason might be the micoUSB cable you are using is only a charging cable and can not transfer data.",
            "title": "Connect the ESP8266-based microcontroller to the computer"
        },
        {
            "location": "/12-MicroPython/12.02-Installing-MicroPython/#determine-which-serial-port-the-esp8266-based-microcontroller-is-connected-to",
            "text": "Use the Windows Device Manager to determine which serial port the ESP8266-based microcontroller is connected to is connected to. The serial port is one of the parameters which needs to be defined when the  .bin  firmware file is upload on the board.  Look for something like  Silicon Labs CP210x USB to UART Bridge (COM4)  in the  Ports (COM & LPT)  menu of the Windows Device Manager. TCP210x USB to UART Bridge refers to the chip that handles serial communication on the board, not the ESP8266 chip itself. Make a note of the number after  (COM ) . The serial port number often comes up as  (COM4)  but it may be different on your computer.",
            "title": "Determine which serial port the ESP8266-based microcontroller is connected to"
        },
        {
            "location": "/12-MicroPython/12.02-Installing-MicroPython/#run-esptool-to-upload-the-bin-file-to-the-esp8266-based-microcontroller",
            "text": "Open the Anaconda Prompt with the Windows Start Menu and  cd (change directory) into the  micropython  directory which contains the  .bin  file. Use the  dir  command to see the  micropython  directory contents. Make sure the  .bin  firmware file is in the directory. The  .bin  firmware file is named something like  esp8266-20171101-v1.9.3.bin . Activate the micropython virtual environment with the command  conda activate micropython . Run  esptool --help  to ensure  esptool  is installed properly. Note there is no  .py  extension after  esptool . On Windows , the command  esptool  works, but the command  esptool.py  may not. (Note this behavior is different than the commands shown on the  MicroPython docs ). If you try to run  esptool  and you are not in the  (micropython)  virtual environment, an error is returned.   > cd Documents\n> cd micropython\n> pwd\nDocuments/micropython\n> dir\n> conda activate micropython\n(micropython) > esptool --help   Before uploading the  .bin  firmware file to the ESP8266-based microcontoller, it is best practice to first erase the flash memory on the board using the command  esptool erase_flash . Make sure to specify the  --port . The argument after  --port  is the  COM  port assigned to the ESP8266 board shown in the Windows Device Manager.  This port often comes up as  COM4 .  (micropython) > esptool --port COM4 erase_flash   Now you can finally write the  .bin  firmware file to the flash memory on the microcontroller using the  esptool write_flash  command. Make sure to use the exact firmware file name you see sitting in the  micropython  directory. The port needs to be set corresponding to the port you found in the Windows Device Manager.  ---baud  is the baud rate or upload speed. I found that  --baud 460800  worked, but you could also specify  --baud 115200  which is slower. The upload time was a matter of seconds with either baud rate. The  0  after  --flash_size=dectect  means the firmware is written at the start of the flash memory (the 0th position) on the board. Again, make sure the  .bin  firmware file name is correct. The long file name is easy to mistype.  (micropython) > esptool --port COM4 --baud 115200 write_flash \\\n--flash_size=detect 0 esp8266-20171101-v1.9.3.bin",
            "title": "Run esptool to upload the .bin file to the ESP8266-based microcontroller"
        },
        {
            "location": "/12-MicroPython/12.02-Installing-MicroPython/#download-and-install-putty-a-serial-monitor",
            "text": "Now that MicroPython is installed on the ESP8266-based microcontroller, we can communicate with our board over a serial connection. However, Windows doesn't have a built-in serial monitor (like  screen  on MacOS and Linux). Therefore, if you are using the Windows operating system, you need to download and install a serial communication tool like  PuTTY .  PuTTY is a lightweight serial and SSH client for Windows. PuTTY provides an interface to communicate with the ESP8266-based microcontroller.  PuTTY can be downloaded here . PuTTY is pretty small, and the download and installation are quick.",
            "title": "Download and install PuTTY, a serial monitor"
        },
        {
            "location": "/12-MicroPython/12.02-Installing-MicroPython/#connect-to-the-esp8266-based-microcontroller-with-putty",
            "text": "Ensure the ESP8266-based microcontroller is connected to the computer with a USB cable and ensure the board is visible in the Windows Device Manager. Then use PuTTY to connect to the board over serial.  Make sure to specify the correct serial port in the  Serial line  box and set  115200  baud in the Speed box.  Micropython is set to run at 115200 baud , other baud rates will lead to junk characters in the serial monitor. Make sure to select the  Serial  radio button below the header  Connection type:  near the top of the PuTTY window. Overlooking this detail is easy.     If you see  >>>  the MicroPython REPL (the MicroPython prompt), MicroPython is successfully installed on your ESP8266-based microcontroller.  Sometimes, you may need to type [Enter] or Ctrl-D to bring up the  >>>  REPL prompt. If the  >>>  REPL prompt is not displayed in your PuTTY window, try to close PuTTY, unplug then replug the board and open PuTTY again. Most ESP8266-based microcontrollers also have a tiny little black RESET button that can be pressed to restart the board.     At the  >>>  MicroPython REPL prompt try the following commands:  >>> print('Problem Solving with MicroPython!')\nProblem Solving with MicroPython!\n\n>>> import sys\n>>> sys.platform\n'esp8266'",
            "title": "Connect to the ESP8266-based Microcontroller with PuTTY"
        },
        {
            "location": "/12-MicroPython/12.03-MicroPython-REPL/",
            "text": "The MicroPython REPL\n\n\nThe last section detailed the installation of MicroPython on an ESP8266-based microcontroller using Python and a package called \nesptool\n. In this section, you will learn how to write commands to the MicroPython REPL (the Micropython prompt) to turn an LED on and off.\n\n\nBefore you can use the MicroPython REPL (the MicroPython prompt) running on a microcontroller, MicroPython needs to be installed on the board. A serial communication tool, like PuTTY,  also needs to be installed on your computer to communicate with the microcontroller over a serial line. The previous section detailed how to install MicroPython on an ESP8266-based microcontroller and how to install \nPuTTY\n on Windows.\n\n\nSummary of Steps\n\n\n\n\nConnect the ESP8266-based microcontroller to your computer with a USB cable\n\n\nDetermine which COM port the microcontroller is connected to using the Windows Device Manager \n\n\nOpen PuTTY and connect to the ESP8266-based microcontroller\n\n\nRun commands at the MicroPython REPL\n\n\n\n\nConnect the ESP8266-based microcontroller to your computer with a USB cable\n\n\nUse a microUSB cable to connect the microcontroller to the computer. Make sure that the microUSB cable is a full USB data cable and not just a simple power cable. Cables that are just used to charge phones may only be power cables and may not be capable of transmitting data.\n\n\nDetermine which COM port the microcontroller is connected to using the Windows Device Manager\n\n\nUse the Windows Device Manager to determine which serial port the microcontroller is connected to. On Windows, the microcontroller usually comes up as \nCOM4\n. You can find the serial port by looking in the Ports (COM & LPT) category of the Windows Device Manager. Look for something like \nSilicon Labs CP210x USB to UART Bridge (COM4)\n in the \nPorts (COM & LPT)\n menu. It is the \nCOM#\n that's needed to connect to the board.\n\n\n\n\n\n\nOpen PuTTY and connect to the ESP8266-based microcontroller\n\n\nEnsure the microcontroller is connected to your computer with a USB cable. Then initialize serial communication between the microcontroller and your computer with PuTTY. In PuTTY set the proper serial port (COM#) and 115200 baud. Remember to use the \n[Serial[\n radio button under \n[Connection Type:]\n to select serial communication or PuTTY will attempt to communicate with the microcontroller over SSH which won't work. \n\n\n\n\n\n\nIn PuTTY, click \n[Open]\n  to bring up the MicroPython REPL prompt \n>>>\n. If you can't see the \n>>>\n prompt, try typing [Enter], [Ctrl]-[D], pushing the RESET button on the microcontroller or unplugging then replugging the USB cable.\n\n\n\n\nRun commands at the MicroPython REPL\n\n\nAt the MicroPython REPL (the MicroPython command prompt \n>>>\n) try the following commands:\n\n\n>>> print('MicroPython for Engineers!')\nMicroPython for Engineers\n\n\n\n\nIf you import the \nsys\n module, you can see the MicroPython implementation and platform. \n\n\n>>> import sys\n>>> sys.implementation\n(name='micropython', version=(1, 9, 3))\n>>> sys.platform\n'esp8266'\n\n\n\n\n\n\nIf you see similar output, that means MicroPython is working on the ESP8266-based microcontroller. You can also view the flash memory size of your microcontroller and the size of the MicroPython firmware you installed. Try the command below at the MicroPython prompt:\n\n\n>>> import port_diag\n\n\n\n\n\n\nIn the results above, you  can see the flash memory size is 4 MB. Below the label \nFirmware checksum:\n you can see a line for \nsize: 600872\n. \nsize: 600872\n means the size of the Micropythpon installation is about 600 KB or about 0.6 MB. Just over half a megabyte on the microcontroller and you are running a working version of Python!\n\n\nNow try a simple for loop. When you initiate a loop, the MicroPython REPL automatically indents the next line. A tab is not needed on code lines below a loop statement. To run the loop, type backspace on an empty line (to backspace away from an indented line) and hit [Enter].\n\n\n>>> for i in range(5):\n...     print(\"Problem Solving with MicroPython!\")\n...\n\nProblem Solving with MicroPython!\nProblem Solving with MicroPython!\nProblem Solving with MicroPython!\nProblem Solving with MicroPython!\nProblem Solving with MicroPython!",
            "title": "The MicroPython REPL"
        },
        {
            "location": "/12-MicroPython/12.03-MicroPython-REPL/#the-micropython-repl",
            "text": "The last section detailed the installation of MicroPython on an ESP8266-based microcontroller using Python and a package called  esptool . In this section, you will learn how to write commands to the MicroPython REPL (the Micropython prompt) to turn an LED on and off.  Before you can use the MicroPython REPL (the MicroPython prompt) running on a microcontroller, MicroPython needs to be installed on the board. A serial communication tool, like PuTTY,  also needs to be installed on your computer to communicate with the microcontroller over a serial line. The previous section detailed how to install MicroPython on an ESP8266-based microcontroller and how to install  PuTTY  on Windows.",
            "title": "The MicroPython REPL"
        },
        {
            "location": "/12-MicroPython/12.03-MicroPython-REPL/#summary-of-steps",
            "text": "Connect the ESP8266-based microcontroller to your computer with a USB cable  Determine which COM port the microcontroller is connected to using the Windows Device Manager   Open PuTTY and connect to the ESP8266-based microcontroller  Run commands at the MicroPython REPL",
            "title": "Summary of Steps"
        },
        {
            "location": "/12-MicroPython/12.03-MicroPython-REPL/#connect-the-esp8266-based-microcontroller-to-your-computer-with-a-usb-cable",
            "text": "Use a microUSB cable to connect the microcontroller to the computer. Make sure that the microUSB cable is a full USB data cable and not just a simple power cable. Cables that are just used to charge phones may only be power cables and may not be capable of transmitting data.",
            "title": "Connect the ESP8266-based microcontroller to your computer with a USB cable"
        },
        {
            "location": "/12-MicroPython/12.03-MicroPython-REPL/#determine-which-com-port-the-microcontroller-is-connected-to-using-the-windows-device-manager",
            "text": "Use the Windows Device Manager to determine which serial port the microcontroller is connected to. On Windows, the microcontroller usually comes up as  COM4 . You can find the serial port by looking in the Ports (COM & LPT) category of the Windows Device Manager. Look for something like  Silicon Labs CP210x USB to UART Bridge (COM4)  in the  Ports (COM & LPT)  menu. It is the  COM#  that's needed to connect to the board.",
            "title": "Determine which COM port the microcontroller is connected to using the Windows Device Manager"
        },
        {
            "location": "/12-MicroPython/12.03-MicroPython-REPL/#open-putty-and-connect-to-the-esp8266-based-microcontroller",
            "text": "Ensure the microcontroller is connected to your computer with a USB cable. Then initialize serial communication between the microcontroller and your computer with PuTTY. In PuTTY set the proper serial port (COM#) and 115200 baud. Remember to use the  [Serial[  radio button under  [Connection Type:]  to select serial communication or PuTTY will attempt to communicate with the microcontroller over SSH which won't work.     In PuTTY, click  [Open]   to bring up the MicroPython REPL prompt  >>> . If you can't see the  >>>  prompt, try typing [Enter], [Ctrl]-[D], pushing the RESET button on the microcontroller or unplugging then replugging the USB cable.",
            "title": "Open PuTTY and connect to the ESP8266-based microcontroller"
        },
        {
            "location": "/12-MicroPython/12.03-MicroPython-REPL/#run-commands-at-the-micropython-repl",
            "text": "At the MicroPython REPL (the MicroPython command prompt  >>> ) try the following commands:  >>> print('MicroPython for Engineers!')\nMicroPython for Engineers  If you import the  sys  module, you can see the MicroPython implementation and platform.   >>> import sys\n>>> sys.implementation\n(name='micropython', version=(1, 9, 3))\n>>> sys.platform\n'esp8266'   If you see similar output, that means MicroPython is working on the ESP8266-based microcontroller. You can also view the flash memory size of your microcontroller and the size of the MicroPython firmware you installed. Try the command below at the MicroPython prompt:  >>> import port_diag   In the results above, you  can see the flash memory size is 4 MB. Below the label  Firmware checksum:  you can see a line for  size: 600872 .  size: 600872  means the size of the Micropythpon installation is about 600 KB or about 0.6 MB. Just over half a megabyte on the microcontroller and you are running a working version of Python!  Now try a simple for loop. When you initiate a loop, the MicroPython REPL automatically indents the next line. A tab is not needed on code lines below a loop statement. To run the loop, type backspace on an empty line (to backspace away from an indented line) and hit [Enter].  >>> for i in range(5):\n...     print(\"Problem Solving with MicroPython!\")\n...\n\nProblem Solving with MicroPython!\nProblem Solving with MicroPython!\nProblem Solving with MicroPython!\nProblem Solving with MicroPython!\nProblem Solving with MicroPython!",
            "title": "Run commands at the MicroPython REPL"
        },
        {
            "location": "/12-MicroPython/12.04-Blinking-a-LED/",
            "text": "Blinking a LED\n\n\nIn this section, you will learn how to blink the built-in LED on ESP8266-based microcontroller using the MicroPython REPL.\n\n\nBefore the LED on the ESP8266-based microcontroller can be blinked, MicroPython needs to be installed on the microcontroller and PuTTY needs to be installed on your computer. PuTTY facilitates interaction between a computer and the microcontroller using the serial communication protocol. An alternative to PuTTY is a MacOS or Linux terminal and the \nscreen\n utility.  The \nscreen\n utility can also be used for serial communication.\nMost ESP8266-based microcontrollers (such as the Adafruit Feather Huzzah ESP8266) have a built-in LED mounted on the board. On many boards, the built-in LED is connected to Pin 0. You can control the board's built-in LED with MicroPython's \nmachine\n module.\n\n\nConnect the ESP8266-based Microcontroller to the computer and bring up the MicroPython REPL\n\n\nConnect the ESP8266-based microcontroller to the computer with a microUSB cable. Ensure the microUSB cable is a USB data cable, not just a charging cable. Open PuTTY and connect to the microcontroller using the proper serial port (COM#) and 115200 baud. (Remember to use the \nSerial\n radio button under \nConnection Type:\n)\n\n\n\n\n\n\nClicking [Open] will bring up the MicroPython REPL prompt \n>>>\n. If you can't see the \n>>>\n prompt, try typing [Enter] or [Ctrl]+[D] or push the RESET button on the microcontroller. If none of these methods work, try closing PuTTY and unplugging then replugging in the microUSB cable that connects the board to the computer.\n\n\nUse the MicroPython REPL to turn the microcontroller's LED on and off\n\n\nTest to see if the MicroPython REPL is functioning correctly with a basic \nHello World\n program. Type the following into the PuTTY window:\n\n\n>>> print(\"Hello World\")\nHello World\n\n\n\n\nNext, try to turn the microcontroller's built-in LED on and off. Most ESP8266-based microcontrollers (such as the Adafruit Feather Huzzah ESP8266) have a built-in LED connected to Pin 0. If you control the voltage going to Pin 0, you control if the built-in LED on the microcontroller is on or off. To control a Pin on a microcontroller with MicroPython, you first need to import the \nmachine\n module. The \nmachine\n module is built into MicroPython, but absent from \"regular\" Python. Next, a \nPin\n object needs to be created. The integer passed into \nmachine.Pin()\n determines the pin number assigned to the \nPin\n object.\n\n\n>>> import machine\n>>> pin = machine.Pin(0)\n\n\n\n\nThe value of Pin0  (on or off) is determined with the command below.\n\n\n>>> pin.value\n1\n\n\n\n\nIn or assign a value to Pin 0, the \nPin\n object must be assigned as an \noutput\n pin. An output pin is a pin where a program or user determines the pin output. An input pin is a pin set up to read input, like the input from a sensor. In this case, you want to assign Pin 0 as an output pin.\n\n\n>>> pin = machine.Pin(0, machine.Pin.OUT)\n\n# turn the LED on\n>>> pin.value(0)\n\n# turn the LED off\n>>> pin.value(1)\n\n\n\n\nRun code at the MicroPython REPL to blink the LED\n\n\nNow let's make the microcontroller's built-in LED blink. Blinking the LED can be accomplished with a simple \nfor\n loop. At the MicroPython REPL, initiating a loop automatically indents the next line, so a tab is not needed before the \npin.on()\n statement. To run the loop, type backspace on an empty line (to backspace from an indented line) and hit [Enter].\n\n\n>>> import machine\n>>> import time\n>>> pin = machine.Pin(0, machine.Pin.OUT)\n>>> for i in range(10):\n...     pin.on()\n...     time.sleep(0.5)\n...     pin.off()\n...     time.sleep(0.5)\n...\n\n\n\n\nThe microcontroller's built-in LED turns on and off for a total of about 10 seconds.",
            "title": "Blinking a LED"
        },
        {
            "location": "/12-MicroPython/12.04-Blinking-a-LED/#blinking-a-led",
            "text": "In this section, you will learn how to blink the built-in LED on ESP8266-based microcontroller using the MicroPython REPL.  Before the LED on the ESP8266-based microcontroller can be blinked, MicroPython needs to be installed on the microcontroller and PuTTY needs to be installed on your computer. PuTTY facilitates interaction between a computer and the microcontroller using the serial communication protocol. An alternative to PuTTY is a MacOS or Linux terminal and the  screen  utility.  The  screen  utility can also be used for serial communication.\nMost ESP8266-based microcontrollers (such as the Adafruit Feather Huzzah ESP8266) have a built-in LED mounted on the board. On many boards, the built-in LED is connected to Pin 0. You can control the board's built-in LED with MicroPython's  machine  module.",
            "title": "Blinking a LED"
        },
        {
            "location": "/12-MicroPython/12.04-Blinking-a-LED/#connect-the-esp8266-based-microcontroller-to-the-computer-and-bring-up-the-micropython-repl",
            "text": "Connect the ESP8266-based microcontroller to the computer with a microUSB cable. Ensure the microUSB cable is a USB data cable, not just a charging cable. Open PuTTY and connect to the microcontroller using the proper serial port (COM#) and 115200 baud. (Remember to use the  Serial  radio button under  Connection Type: )    Clicking [Open] will bring up the MicroPython REPL prompt  >>> . If you can't see the  >>>  prompt, try typing [Enter] or [Ctrl]+[D] or push the RESET button on the microcontroller. If none of these methods work, try closing PuTTY and unplugging then replugging in the microUSB cable that connects the board to the computer.",
            "title": "Connect the ESP8266-based Microcontroller to the computer and bring up the MicroPython REPL"
        },
        {
            "location": "/12-MicroPython/12.04-Blinking-a-LED/#use-the-micropython-repl-to-turn-the-microcontrollers-led-on-and-off",
            "text": "Test to see if the MicroPython REPL is functioning correctly with a basic  Hello World  program. Type the following into the PuTTY window:  >>> print(\"Hello World\")\nHello World  Next, try to turn the microcontroller's built-in LED on and off. Most ESP8266-based microcontrollers (such as the Adafruit Feather Huzzah ESP8266) have a built-in LED connected to Pin 0. If you control the voltage going to Pin 0, you control if the built-in LED on the microcontroller is on or off. To control a Pin on a microcontroller with MicroPython, you first need to import the  machine  module. The  machine  module is built into MicroPython, but absent from \"regular\" Python. Next, a  Pin  object needs to be created. The integer passed into  machine.Pin()  determines the pin number assigned to the  Pin  object.  >>> import machine\n>>> pin = machine.Pin(0)  The value of Pin0  (on or off) is determined with the command below.  >>> pin.value\n1  In or assign a value to Pin 0, the  Pin  object must be assigned as an  output  pin. An output pin is a pin where a program or user determines the pin output. An input pin is a pin set up to read input, like the input from a sensor. In this case, you want to assign Pin 0 as an output pin.  >>> pin = machine.Pin(0, machine.Pin.OUT)\n\n# turn the LED on\n>>> pin.value(0)\n\n# turn the LED off\n>>> pin.value(1)",
            "title": "Use the MicroPython REPL to turn the microcontroller's LED on and off"
        },
        {
            "location": "/12-MicroPython/12.04-Blinking-a-LED/#run-code-at-the-micropython-repl-to-blink-the-led",
            "text": "Now let's make the microcontroller's built-in LED blink. Blinking the LED can be accomplished with a simple  for  loop. At the MicroPython REPL, initiating a loop automatically indents the next line, so a tab is not needed before the  pin.on()  statement. To run the loop, type backspace on an empty line (to backspace from an indented line) and hit [Enter].  >>> import machine\n>>> import time\n>>> pin = machine.Pin(0, machine.Pin.OUT)\n>>> for i in range(10):\n...     pin.on()\n...     time.sleep(0.5)\n...     pin.off()\n...     time.sleep(0.5)\n...  The microcontroller's built-in LED turns on and off for a total of about 10 seconds.",
            "title": "Run code at the MicroPython REPL to blink the LED"
        },
        {
            "location": "/12-MicroPython/12.05-Reading-a-Sensor/",
            "text": "Reading a Sensor\n\n\nIn this section, you will learn how to connect a temperature sensor to an ESP8266-based microcontroller and use the MicroPython REPL to read the temperature. This section includes specifics for the Adafruit Feather Huzzah ESP8266 microcontroller and the \nMCP9808 temperature sensor\n. Other ESP8266-based microcontrollers and temperature sensors could be used instead, but the specifics of the procedure may be different from what's shown in this section.\n\n\nBefore you can use MicroPython to read a temperature sensor, MicroPython needs to be installed on the board, and PuTTY needs to be installed on your computer (on MacOS and Linux, use a terminal and  \nscreen\n) to communicate with the board over serial.\n\n\nSummary of Steps\n\n\n\n\nConnect the MCP9808 temperature sensor to the Adafruit Feather Huzzah ESP8266 microcontroller\n\n\nConnect the Adafruit Feather Huzzah ESP8266 microcontroller to the computer with a USB cable and bring up the MicroPython REPL with PuTTY\n\n\nRun code at the MicroPython REPL to measure the temperature\n\n\n\n\nConnect the MCP9808 temperature sensor to the Adafruit Feather Huzzah ESP8266 microcontroller\n\n\nConnect the \nMCP9808 temperature sensor\n breakout board to the Adafruit Feather Huzzah ESP8266 microcontroller with jumper wires. There are four connections: A 3V power line from the Feather Huzzah to the MCP9808 Vdd pin, GND connected between both boards, and the I2C data and clock lines connected between the two boards. On the Feather Huzzah ESP8266, the I2C data line is SDA (pin 4) and the I2C clock line is SCL (pin 5). These pins on the microcontroller connect with the MPC9808 I2C data line SDA and the MPC9808 I2C clock line SCL. Unlike serial communication where RX connects to TX, in I2C communication SDA connects to SDA and SCL connects to SCL.\n\n\n\n\n\n\n\n\nFeather Huzzah\n\n\nwire\n\n\nMCP9808\n\n\n\n\n\n\n\n\n\n\n3V\n\n\nred\n\n\nVdd\n\n\n\n\n\n\nGND\n\n\nblack\n\n\nGND\n\n\n\n\n\n\nSDA (pin 4)\n\n\ngreen\n\n\nSDA\n\n\n\n\n\n\nSCL (pin 5)\n\n\nyellow\n\n\nSCL\n\n\n\n\n\n\n\n\n\n\nConnect the Adafruit Feather Huzzah ESP8266 microcontroller to the computer with a USB cable and bring up the MicroPython REPL with PuTTY\n\n\nConnect the Adafruit Feather Huzzah ESP8266 to the computer with a microUSB cable. Ensure the cable is a USB data cable, not just a power cable. Open PuTTY and connect to the Feather Huzzah using the proper serial port (COM#) and 115200 baud. (Remember to use the \nSerial\n radio button under \nConnection Type:\n)\n\n\n\n\n\n\nClicking [Open] will bring up the MicroPython REPL prompt \n>>>\n. If you can't see the \n>>>\n prompt, try typing [Enter] or [Ctrl]+[D] or push the RESET button on the Feather Huzzah. If none of these methods work, try closing PuTTY and unplugging then replugging in the USB cable then reopen PuTTY.\n\n\nRun code at the MicroPython REPL to measure the temperature\n\n\nAt the MicroPython REPL, import the \nmachine\n module and then create an instance of the \nmachine.I2C\n class. Set the \nscl\n and \nsda\n parameters as \nscl=machine.Pin(5)\n and \nsda=machine.Pin(4)\n.  Next, create an empty \nbytearray\n to store the data coming in from the MCP9808 temperature sensor. As strings in Micropython are UTF-8 encoded by default (like in Python 3), a \nbytearray\n needs to be used to read the raw output from the MCP9808 chip registers. The command \ni2c.readfrom_mem_into()\n reads the data from the sensor and saves it to the \nbyte_data\n variable. The arguments inside the \ni2c.readfrom_mem_into()\n method \n24\n and \n5\n correspond to the I2C memory address and registry address of the temperature data stored in the MCP9808 temperature sensor.   \n\n\n>>> import machine\n>>> i2c = machine.I2C(scl=machine.Pin(5), sda=machine.Pin(4))\n>>> byte_data = bytearray(2)\n>>> i2c.readfrom_mem_into(24, 5, byte_data)\n>>> value = byte_data[0] << 8 | byte_data[1]\n>>> temp = (value & 0xFFF) / 16.0\n>>> if value & 0x1000:\n...     temp -= 256.0\n.....   print(temp)",
            "title": "Reading a Sensor"
        },
        {
            "location": "/12-MicroPython/12.05-Reading-a-Sensor/#reading-a-sensor",
            "text": "In this section, you will learn how to connect a temperature sensor to an ESP8266-based microcontroller and use the MicroPython REPL to read the temperature. This section includes specifics for the Adafruit Feather Huzzah ESP8266 microcontroller and the  MCP9808 temperature sensor . Other ESP8266-based microcontrollers and temperature sensors could be used instead, but the specifics of the procedure may be different from what's shown in this section.  Before you can use MicroPython to read a temperature sensor, MicroPython needs to be installed on the board, and PuTTY needs to be installed on your computer (on MacOS and Linux, use a terminal and   screen ) to communicate with the board over serial.",
            "title": "Reading a Sensor"
        },
        {
            "location": "/12-MicroPython/12.05-Reading-a-Sensor/#summary-of-steps",
            "text": "Connect the MCP9808 temperature sensor to the Adafruit Feather Huzzah ESP8266 microcontroller  Connect the Adafruit Feather Huzzah ESP8266 microcontroller to the computer with a USB cable and bring up the MicroPython REPL with PuTTY  Run code at the MicroPython REPL to measure the temperature",
            "title": "Summary of Steps"
        },
        {
            "location": "/12-MicroPython/12.05-Reading-a-Sensor/#connect-the-mcp9808-temperature-sensor-to-the-adafruit-feather-huzzah-esp8266-microcontroller",
            "text": "Connect the  MCP9808 temperature sensor  breakout board to the Adafruit Feather Huzzah ESP8266 microcontroller with jumper wires. There are four connections: A 3V power line from the Feather Huzzah to the MCP9808 Vdd pin, GND connected between both boards, and the I2C data and clock lines connected between the two boards. On the Feather Huzzah ESP8266, the I2C data line is SDA (pin 4) and the I2C clock line is SCL (pin 5). These pins on the microcontroller connect with the MPC9808 I2C data line SDA and the MPC9808 I2C clock line SCL. Unlike serial communication where RX connects to TX, in I2C communication SDA connects to SDA and SCL connects to SCL.     Feather Huzzah  wire  MCP9808      3V  red  Vdd    GND  black  GND    SDA (pin 4)  green  SDA    SCL (pin 5)  yellow  SCL",
            "title": "Connect the MCP9808 temperature sensor to the Adafruit Feather Huzzah ESP8266 microcontroller"
        },
        {
            "location": "/12-MicroPython/12.05-Reading-a-Sensor/#connect-the-adafruit-feather-huzzah-esp8266-microcontroller-to-the-computer-with-a-usb-cable-and-bring-up-the-micropython-repl-with-putty",
            "text": "Connect the Adafruit Feather Huzzah ESP8266 to the computer with a microUSB cable. Ensure the cable is a USB data cable, not just a power cable. Open PuTTY and connect to the Feather Huzzah using the proper serial port (COM#) and 115200 baud. (Remember to use the  Serial  radio button under  Connection Type: )    Clicking [Open] will bring up the MicroPython REPL prompt  >>> . If you can't see the  >>>  prompt, try typing [Enter] or [Ctrl]+[D] or push the RESET button on the Feather Huzzah. If none of these methods work, try closing PuTTY and unplugging then replugging in the USB cable then reopen PuTTY.",
            "title": "Connect the Adafruit Feather Huzzah ESP8266 microcontroller to the computer with a USB cable and bring up the MicroPython REPL with PuTTY"
        },
        {
            "location": "/12-MicroPython/12.05-Reading-a-Sensor/#run-code-at-the-micropython-repl-to-measure-the-temperature",
            "text": "At the MicroPython REPL, import the  machine  module and then create an instance of the  machine.I2C  class. Set the  scl  and  sda  parameters as  scl=machine.Pin(5)  and  sda=machine.Pin(4) .  Next, create an empty  bytearray  to store the data coming in from the MCP9808 temperature sensor. As strings in Micropython are UTF-8 encoded by default (like in Python 3), a  bytearray  needs to be used to read the raw output from the MCP9808 chip registers. The command  i2c.readfrom_mem_into()  reads the data from the sensor and saves it to the  byte_data  variable. The arguments inside the  i2c.readfrom_mem_into()  method  24  and  5  correspond to the I2C memory address and registry address of the temperature data stored in the MCP9808 temperature sensor.     >>> import machine\n>>> i2c = machine.I2C(scl=machine.Pin(5), sda=machine.Pin(4))\n>>> byte_data = bytearray(2)\n>>> i2c.readfrom_mem_into(24, 5, byte_data)\n>>> value = byte_data[0] << 8 | byte_data[1]\n>>> temp = (value & 0xFFF) / 16.0\n>>> if value & 0x1000:\n...     temp -= 256.0\n.....   print(temp)",
            "title": "Run code at the MicroPython REPL to measure the temperature"
        },
        {
            "location": "/12-MicroPython/12.06-Uploading-Code/",
            "text": "Uploading Code\n\n\nIn this section, you will learn how to upload code to an ESP8266-based microcontroller with a tool called \nampy\n. The code in this section was written to turn the ESP8266-based microcontroller in a scrolling thermometer. The same upload method shown in this section can be used to upload MicroPython code you write to a ESP8266-based microcontroller.\n\n\nBefore MicroPython code is uploaded on the ESP8266-based microcontroller, MicroPython needs to be installed on the board. PuTTY also needs to be installed on you computer in order for the computer to communicate with the microcontroller over a serial connection.\n\n\nA previous section in this chapter detailed how to install MicroPython on an ESP9266 microcontroller and how to install PuTTY on a Windows. The procedures in this section are specific to the Adafruit Feather Huzzah ESP8266 microcontroller and the MCP9808 temperature sensor, both of which were used in a previous section. Other ESP8266-based microcontrollers and I2C sensors could be used instead, but the specifics of the procedure may be different from what's shown in this section.\n\n\nSummary of Steps\n\n\n\n\nInstall \nampy\n with \npip\n\n\nWrite MicroPython code \n\n\nUpload the MicroPython on code on the microcontroller with \nampy\n\n\nUnplug and then power up the Feather Huzzah and watch the temperature scroll by\n\n\n\n\nInstall ampy with pip\n\n\nAmpy\n is a Python package developed by Adafruit, a company that makes MicroPython compatible hardware. \nAmpy\n is used to push code stored on a computer onto a microcontroller running MicroPython. \nAmpy\n can be installed using the \nAnaconda Prompt\n. Alternatively, a terminal can be used to install \nampy\n. If you are using a virtual environment, active the virtual environment first then proceed with \nampy\n package installation.\n\n\n> conda activate micropython\n(micropython) > pip install adafruit-ampy\n(micropython) > ampy --help\n\n\n\n\nWrite MicroPython Code\n\n\nNow write the MicroPython code which you will uploaded on the microcontroller. The Adafruit Feather Huzzah ESP8266 microcontroller contains two main Python files: \nboot.py\n and \nmain.py\n. But additional files can also be uploaded to the microcontroller. \nboot.py\n is the file that runs first when the board is powered up. First \nboot.py\n runs, then \nmain.py\n runs. An additional \n.py\n file can be added to the board to provide \nmain.py\n with a function to run.\n\n\nTwo different \n.py\n files will be constructed in this section. One \n.py\n file contains a function that reads the temperature off the temperature sensor. A second \n.py\n file calls the function in the first \n.py\n file and prints the temperature to the terminal window with a loop.\nThe first \nMCP9808.py\n file includes one function called \nreadtemp()\n. The \nreadtemp()\n function reads temperature recorded by the MCP9808 temperature sensor.  The \nreadtemp()\n function parses out the temperature data from the I2C bus on the MCP9808 temperature sensor and outputs the temperature in degrees C as a float.\n\n\nAt the top of \nMCP9808.py\n we need to import the \nmachine\n module to use the I2C bus. The \nmachine\n module provides a class to create a new I2C object. \n\n\nWhen the I2C object is instantiated, the \nscl\n and \nsda\n pins that the MCP9808 temperature sensor is connected to need to be specified. \nscl\n is the I2C clock line and \nsda\n is the I2C data line.  \nscl\n and \nsda\n  are pin 5 and pin 4 on the Adafruit Feather Huzzah ESP8266. \n\n\nThe next part of the \nreadtemp()\n function creates a byte array. Data from the MCP9808 temperature sensor will be stored in the byte array. \n\n\nThe next part of the \nreadtemp()\n function in the \nMCP9808.py\n file uses the \ni2c.readfrom_mem_into()\n method to read the temperature off the sensor. The first argument passed to the \ni2c.readfrom_mem_into()\n method is the I2C bus address of the sensor. On the MCP9808 temperature sensor, the I2C bus address is \n24\n(if you type the line \n>>> i2c.scan()\n into the MicroPython REPL, the I2C bus address is returned). The next parameter passed to the  \ni2c.readfrom_mem_into()\n method is the register on the MCP9808 temperature sensor where the measured temperature is stored. On the MCP9808, the temperature is stored in register \n5\n. The third parameter passed to the  \ni2c.readfrom_mem_into()\n method is the variable we want to store the temperature data in. The \ni2c.readfrom_mem_into()\n method \nchanges\n the variable passed into the method as the third argument. Most Python methods modify the object the method operates on, but MicroPython's \ni2c.readfrom_mem_into()\n method changes the third variable passed to it, in our case the variable \nbyte_data\n. That's why we created the \nbyte_data\n variable before we called the \ni2c.readfrom_mem_into()\n method. \n\n\nThe last part of the \nreadtemp()\n function includes post-processing needed to convert the byte array into a temperature in degrees C. The final temperature in degrees C is a float\nThe entire contents of the \nMCP9808.py\n file are below:\n\n\n# MCP9808.py\n\n# Functions for the  MCP9808 temperature sensor\n# learn.adafruit.com/micropython-hardware-i2c-devices/i2c-master\n\ndef readtemp():\n    import machine\n    i2c = machine.I2C(scl=machine.Pin(5), sda=machine.Pin(4))\n    byte_data = bytearray(2)\n    i2c.readfrom_mem_into(24, 5, byte_data)\n    value = byte_data[0] << 8 | byte_data[1]\n    temp = (value & 0xFFF) / 16.0\n    if value & 0x1000:\n        temp -= 256.0\n    return temp\n\n\n\n\nNow construct a MicroPython script called \nmain.py\n which will use the function \nreadtemp()\n stored in \nMCP9808.py\n.\n\n\nThe \nmain.py\n script will import the \nMCP9808.py\n module and use the \nreadtemp()\n function to read the temperature from the MCP9808 temperature sensor. \n\n\nInside \nmain.py\n will be a loop that runs  for a total of 120 seconds. Each second the temperature is recorded. Inside the loop, the temperature is read off the MCP9808 temperature sensing using the \nMCP9808.readtemp()\n function.  \ntime.sleep(1)\n is inserted into the loop to wait one second between each measurement.\n\n\nThe complete \nmain.py\n file is below.\n\n\n# main.py\n\nimport MCP9808\nimport time\n\ntime.sleep(2)\n\nfor i in range(120):\n    data = MCP9808.readtemp()\n    print(data)\n    time.sleep(1)\n\n\n\n\nUpload MicroPython Code to the ESP8266 Microcontroller with \nampy\n\n\nOnce the \nMCP9808.py\n file and the \nmain.py\n files are saved, both files can be uploaded on the Adafruit Feather Huzzah ESP8266 microcontroller.\n\n\nEnsure the microcontroller is connected with a USB cable, and be aware of which serial port the microcontroller is connected to. \n\n\nUpload the \nMCP9808.py\n file and the \nmain.py\n file to the board using \nampy\n. Make sure you are in the directory with the \n.py\n files and that you are working in a virtual environment that has \nampy\n installed in it. In the example code below, the \n(micropython)\n virtual environment is active. The command \nampy --port COM4 ls\n lists the files stored on the microcontroller.\n\n\n(micropython) > ampy --port COM4 put MCP9808.py\n(micropython) > ampy --port COM4 put main.py\n(micropython) > ampy --port COM4 ls\nboot.py\nMCP9808.py\nmain.py\n\n\n\n\nUnplug and then power up the Feather Huzzah and watch the temperature scroll by\n\n\nThe Feather Huzzah needs to be restarted to run the \nmain.py\n file uploaded with \nampy\n. \n\n\nTo restart the board, unplug and then replug in the board's power (the USB cable). Once power is restored, the board will run through the \nboot.py\n script then start the \nmain.py\n script. When the board runs the \nmain.py\n script, the board will read the temperature from the MCP9808 temperature sensor then print the temperature out to the terminal. After two minutes the program should end.\n\n\nThe output below demonstrates the results shown in a terminal window.\n\n\n...\n25.6875\n25.75\n25.6875\n25.6875\n25.75\n25.6875\n25.75\n25.75\n25.75\n25.75\n25.75\n25.8125\n25.8125\n25.8125\n25.75\n25.75\n25.8125\n>>>",
            "title": "Uploading Code"
        },
        {
            "location": "/12-MicroPython/12.06-Uploading-Code/#uploading-code",
            "text": "In this section, you will learn how to upload code to an ESP8266-based microcontroller with a tool called  ampy . The code in this section was written to turn the ESP8266-based microcontroller in a scrolling thermometer. The same upload method shown in this section can be used to upload MicroPython code you write to a ESP8266-based microcontroller.  Before MicroPython code is uploaded on the ESP8266-based microcontroller, MicroPython needs to be installed on the board. PuTTY also needs to be installed on you computer in order for the computer to communicate with the microcontroller over a serial connection.  A previous section in this chapter detailed how to install MicroPython on an ESP9266 microcontroller and how to install PuTTY on a Windows. The procedures in this section are specific to the Adafruit Feather Huzzah ESP8266 microcontroller and the MCP9808 temperature sensor, both of which were used in a previous section. Other ESP8266-based microcontrollers and I2C sensors could be used instead, but the specifics of the procedure may be different from what's shown in this section.",
            "title": "Uploading Code"
        },
        {
            "location": "/12-MicroPython/12.06-Uploading-Code/#summary-of-steps",
            "text": "Install  ampy  with  pip  Write MicroPython code   Upload the MicroPython on code on the microcontroller with  ampy  Unplug and then power up the Feather Huzzah and watch the temperature scroll by",
            "title": "Summary of Steps"
        },
        {
            "location": "/12-MicroPython/12.06-Uploading-Code/#install-ampy-with-pip",
            "text": "Ampy  is a Python package developed by Adafruit, a company that makes MicroPython compatible hardware.  Ampy  is used to push code stored on a computer onto a microcontroller running MicroPython.  Ampy  can be installed using the  Anaconda Prompt . Alternatively, a terminal can be used to install  ampy . If you are using a virtual environment, active the virtual environment first then proceed with  ampy  package installation.  > conda activate micropython\n(micropython) > pip install adafruit-ampy\n(micropython) > ampy --help",
            "title": "Install ampy with pip"
        },
        {
            "location": "/12-MicroPython/12.06-Uploading-Code/#write-micropython-code",
            "text": "Now write the MicroPython code which you will uploaded on the microcontroller. The Adafruit Feather Huzzah ESP8266 microcontroller contains two main Python files:  boot.py  and  main.py . But additional files can also be uploaded to the microcontroller.  boot.py  is the file that runs first when the board is powered up. First  boot.py  runs, then  main.py  runs. An additional  .py  file can be added to the board to provide  main.py  with a function to run.  Two different  .py  files will be constructed in this section. One  .py  file contains a function that reads the temperature off the temperature sensor. A second  .py  file calls the function in the first  .py  file and prints the temperature to the terminal window with a loop.\nThe first  MCP9808.py  file includes one function called  readtemp() . The  readtemp()  function reads temperature recorded by the MCP9808 temperature sensor.  The  readtemp()  function parses out the temperature data from the I2C bus on the MCP9808 temperature sensor and outputs the temperature in degrees C as a float.  At the top of  MCP9808.py  we need to import the  machine  module to use the I2C bus. The  machine  module provides a class to create a new I2C object.   When the I2C object is instantiated, the  scl  and  sda  pins that the MCP9808 temperature sensor is connected to need to be specified.  scl  is the I2C clock line and  sda  is the I2C data line.   scl  and  sda   are pin 5 and pin 4 on the Adafruit Feather Huzzah ESP8266.   The next part of the  readtemp()  function creates a byte array. Data from the MCP9808 temperature sensor will be stored in the byte array.   The next part of the  readtemp()  function in the  MCP9808.py  file uses the  i2c.readfrom_mem_into()  method to read the temperature off the sensor. The first argument passed to the  i2c.readfrom_mem_into()  method is the I2C bus address of the sensor. On the MCP9808 temperature sensor, the I2C bus address is  24 (if you type the line  >>> i2c.scan()  into the MicroPython REPL, the I2C bus address is returned). The next parameter passed to the   i2c.readfrom_mem_into()  method is the register on the MCP9808 temperature sensor where the measured temperature is stored. On the MCP9808, the temperature is stored in register  5 . The third parameter passed to the   i2c.readfrom_mem_into()  method is the variable we want to store the temperature data in. The  i2c.readfrom_mem_into()  method  changes  the variable passed into the method as the third argument. Most Python methods modify the object the method operates on, but MicroPython's  i2c.readfrom_mem_into()  method changes the third variable passed to it, in our case the variable  byte_data . That's why we created the  byte_data  variable before we called the  i2c.readfrom_mem_into()  method.   The last part of the  readtemp()  function includes post-processing needed to convert the byte array into a temperature in degrees C. The final temperature in degrees C is a float\nThe entire contents of the  MCP9808.py  file are below:  # MCP9808.py\n\n# Functions for the  MCP9808 temperature sensor\n# learn.adafruit.com/micropython-hardware-i2c-devices/i2c-master\n\ndef readtemp():\n    import machine\n    i2c = machine.I2C(scl=machine.Pin(5), sda=machine.Pin(4))\n    byte_data = bytearray(2)\n    i2c.readfrom_mem_into(24, 5, byte_data)\n    value = byte_data[0] << 8 | byte_data[1]\n    temp = (value & 0xFFF) / 16.0\n    if value & 0x1000:\n        temp -= 256.0\n    return temp  Now construct a MicroPython script called  main.py  which will use the function  readtemp()  stored in  MCP9808.py .  The  main.py  script will import the  MCP9808.py  module and use the  readtemp()  function to read the temperature from the MCP9808 temperature sensor.   Inside  main.py  will be a loop that runs  for a total of 120 seconds. Each second the temperature is recorded. Inside the loop, the temperature is read off the MCP9808 temperature sensing using the  MCP9808.readtemp()  function.   time.sleep(1)  is inserted into the loop to wait one second between each measurement.  The complete  main.py  file is below.  # main.py\n\nimport MCP9808\nimport time\n\ntime.sleep(2)\n\nfor i in range(120):\n    data = MCP9808.readtemp()\n    print(data)\n    time.sleep(1)",
            "title": "Write MicroPython Code"
        },
        {
            "location": "/12-MicroPython/12.06-Uploading-Code/#upload-micropython-code-to-the-esp8266-microcontroller-with-ampy",
            "text": "Once the  MCP9808.py  file and the  main.py  files are saved, both files can be uploaded on the Adafruit Feather Huzzah ESP8266 microcontroller.  Ensure the microcontroller is connected with a USB cable, and be aware of which serial port the microcontroller is connected to.   Upload the  MCP9808.py  file and the  main.py  file to the board using  ampy . Make sure you are in the directory with the  .py  files and that you are working in a virtual environment that has  ampy  installed in it. In the example code below, the  (micropython)  virtual environment is active. The command  ampy --port COM4 ls  lists the files stored on the microcontroller.  (micropython) > ampy --port COM4 put MCP9808.py\n(micropython) > ampy --port COM4 put main.py\n(micropython) > ampy --port COM4 ls\nboot.py\nMCP9808.py\nmain.py",
            "title": "Upload MicroPython Code to the ESP8266 Microcontroller with ampy"
        },
        {
            "location": "/12-MicroPython/12.06-Uploading-Code/#unplug-and-then-power-up-the-feather-huzzah-and-watch-the-temperature-scroll-by",
            "text": "The Feather Huzzah needs to be restarted to run the  main.py  file uploaded with  ampy .   To restart the board, unplug and then replug in the board's power (the USB cable). Once power is restored, the board will run through the  boot.py  script then start the  main.py  script. When the board runs the  main.py  script, the board will read the temperature from the MCP9808 temperature sensor then print the temperature out to the terminal. After two minutes the program should end.  The output below demonstrates the results shown in a terminal window.  ...\n25.6875\n25.75\n25.6875\n25.6875\n25.75\n25.6875\n25.75\n25.75\n25.75\n25.75\n25.75\n25.8125\n25.8125\n25.8125\n25.75\n25.75\n25.8125\n>>>",
            "title": "Unplug and then power up the Feather Huzzah and watch the temperature scroll by"
        },
        {
            "location": "/12-MicroPython/12.07-Summary/",
            "text": "Summary\n\n\nIn this chapter, you learned about MicroPython. MicroPython is a small slimed down port of the Python programming language designed to run on small cheap microcontrollers. The first part of the chapter introduced MicroPython. \"Regular\" Python consumes to much hard disk space and RAM to be run installed on a microcontroller. But MicroPython is very small for a programming language. It only takes up less than 1MB on a microcontroller.\n\n\nThe next section of the chapter involved how to install MicroPython on a microcontroller. To install MicroPython on a microcontroller, use a package called \nesptool\n and upload a .bin firmware file to the board.\n\n\nThe rest of the chapter involved two projects. Blinking an LED with MicroPython and reading a sensor with MicroPython.\n\n\nTo blink an LED on a microcontroller, you need to connect to the microcontroller with a program called PuTTY. Through a PuTTY terminal, you can use MicroPython's \nmachine\n module to write high and low values to the pins on the microcontroller. \n\n\nAn MCP9808 temperature sensor was read using MicroPython in the second project. The sensor first needed to be wired up to the microcontroller, and then the MicroPython's \nic2\n class was used to read data off the sensor. At the end of the project, a Python package called \nampy\n was used to upload a \n.py\n file to the microcontroller.\n\n\nKey Terms and Concepts\n\n\nMicroPython\n\n\nmicrocontroller\n\n\nMicroPython REPL\n\n\nREPL prompt\n\n\nbaud rate\n\n\nport\n\n\npyboard\n\n\nESP8266\n\n\nresource intensive\n\n\nesptool\n\n\n.bin firmware file\n\n\ndriver\n\n\nUSB data cable\n\n\nPuTTY\n\n\nMCP9808 temperature sensor\n\n\nampy\n\n\nHello World",
            "title": "Summary"
        },
        {
            "location": "/12-MicroPython/12.07-Summary/#summary",
            "text": "In this chapter, you learned about MicroPython. MicroPython is a small slimed down port of the Python programming language designed to run on small cheap microcontrollers. The first part of the chapter introduced MicroPython. \"Regular\" Python consumes to much hard disk space and RAM to be run installed on a microcontroller. But MicroPython is very small for a programming language. It only takes up less than 1MB on a microcontroller.  The next section of the chapter involved how to install MicroPython on a microcontroller. To install MicroPython on a microcontroller, use a package called  esptool  and upload a .bin firmware file to the board.  The rest of the chapter involved two projects. Blinking an LED with MicroPython and reading a sensor with MicroPython.  To blink an LED on a microcontroller, you need to connect to the microcontroller with a program called PuTTY. Through a PuTTY terminal, you can use MicroPython's  machine  module to write high and low values to the pins on the microcontroller.   An MCP9808 temperature sensor was read using MicroPython in the second project. The sensor first needed to be wired up to the microcontroller, and then the MicroPython's  ic2  class was used to read data off the sensor. At the end of the project, a Python package called  ampy  was used to upload a  .py  file to the microcontroller.",
            "title": "Summary"
        },
        {
            "location": "/12-MicroPython/12.07-Summary/#key-terms-and-concepts",
            "text": "MicroPython  microcontroller  MicroPython REPL  REPL prompt  baud rate  port  pyboard  ESP8266  resource intensive  esptool  .bin firmware file  driver  USB data cable  PuTTY  MCP9808 temperature sensor  ampy  Hello World",
            "title": "Key Terms and Concepts"
        },
        {
            "location": "/12-MicroPython/12.08-Project-Ideas/",
            "text": "Project Ideas\n\n\nP12.01 Use MicroPython and a microcontroller to read a potentiometer and print the results to the screen of a computer.\n\n\nP12.02 Use MicroPython, a microcontroller, and a light sensor to measure light level. Light up different numbers of LED's based on the measured light level.\n\n\nP12.03 Use MicroPython and a microcontroller to read a potentiometer and print the results to the screen of a computer.\n\n\nP12.04 Use MicroPython to turn on and off an LED based on a value stored on an IoT cloud server, like io.adafruit.com.\n\n\nP12.05 Use MicorPython and a temperature sensor connected to a microcontroller to measure the temperature and send the temperature to a computer running Python and PySerial. Use Matplotlib on the computer to plot the temperature.\n\n\nP12.06 Use MicroPython and uRequests package to send temperature sensor measurements up to an IoT cloud server, like io.adafruit.com.",
            "title": "Project Ideas"
        },
        {
            "location": "/12-MicroPython/12.08-Project-Ideas/#project-ideas",
            "text": "P12.01 Use MicroPython and a microcontroller to read a potentiometer and print the results to the screen of a computer.  P12.02 Use MicroPython, a microcontroller, and a light sensor to measure light level. Light up different numbers of LED's based on the measured light level.  P12.03 Use MicroPython and a microcontroller to read a potentiometer and print the results to the screen of a computer.  P12.04 Use MicroPython to turn on and off an LED based on a value stored on an IoT cloud server, like io.adafruit.com.  P12.05 Use MicorPython and a temperature sensor connected to a microcontroller to measure the temperature and send the temperature to a computer running Python and PySerial. Use Matplotlib on the computer to plot the temperature.  P12.06 Use MicroPython and uRequests package to send temperature sensor measurements up to an IoT cloud server, like io.adafruit.com.",
            "title": "Project Ideas"
        },
        {
            "location": "/99-Appendix/99.00-Appendix/",
            "text": "Appendix\n\n\nContents\n\n\nThe following is detailed in the appendix:\n\n\n\n\n\n\nReserved and Key Words in Python\n\n\n\n\n\n\nASCII Character Codes\n\n\n\n\n\n\nVirtual Environments\n\n\n\n\n\n\nNumPy Math Functions\n\n\n\n\n\n\nGit and GitHub\n\n\n\n\n\n\nLaTeX Math\n\n\n\n\n\n\nProblem Solving with Python Book Construction\n\n\n\n\n\n\nContributions\n\n\n\n\n\n\nCover Artwork\n\n\n\n\n\n\nAbout the author",
            "title": "Contents"
        },
        {
            "location": "/99-Appendix/99.00-Appendix/#appendix",
            "text": "",
            "title": "Appendix"
        },
        {
            "location": "/99-Appendix/99.00-Appendix/#contents",
            "text": "The following is detailed in the appendix:    Reserved and Key Words in Python    ASCII Character Codes    Virtual Environments    NumPy Math Functions    Git and GitHub    LaTeX Math    Problem Solving with Python Book Construction    Contributions    Cover Artwork    About the author",
            "title": "Contents"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/",
            "text": "Reserved and Keywords in Python\n\n\nThe following are reserved and keywords in Python. These words should not be used as the names for user-defined functions, classes, methods or modules. The keywords can be accessed with the following code:\n\n\nimport keyword\nprint(f'There are {len(keyword.kwlist)} key words')\nfor keywrd in keyword.kwlist:\n    print(keywrd)\n\n\n\n\nThere are 33 key words\nFalse\nNone\nTrue\nand\nas\n...\n\n\n\n\n\nLogical Keywords\n\n\nTrue\nFalse\nnot\nand\nor\nis\nNone\nin\n\n\n\n\nControl Flow Key Words\n\n\nif\nelse\nelif\nfor\nwhile\nbreak\ncontinue\npass\ntry\nexcept\nfinally\nraise\nreturn\nyield\n\n\n\n\nDefinition Key Words\n\n\ndef\nglobal\nnonlocal\nclass\nlambda\nwith\nassert\ndel\n\n\n\n\nModule Keywords\n\n\nimport\nfrom\nas\nwith",
            "title": "Reserved and Keywords in Python"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#reserved-and-keywords-in-python",
            "text": "The following are reserved and keywords in Python. These words should not be used as the names for user-defined functions, classes, methods or modules. The keywords can be accessed with the following code:  import keyword\nprint(f'There are {len(keyword.kwlist)} key words')\nfor keywrd in keyword.kwlist:\n    print(keywrd)  There are 33 key words\nFalse\nNone\nTrue\nand\nas\n...",
            "title": "Reserved and Keywords in Python"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#logical-keywords",
            "text": "True\nFalse\nnot\nand\nor\nis\nNone\nin",
            "title": "Logical Keywords"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#control-flow-key-words",
            "text": "if\nelse\nelif\nfor\nwhile\nbreak\ncontinue\npass\ntry\nexcept\nfinally\nraise\nreturn\nyield",
            "title": "Control Flow Key Words"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#definition-key-words",
            "text": "def\nglobal\nnonlocal\nclass\nlambda\nwith\nassert\ndel",
            "title": "Definition Key Words"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#module-keywords",
            "text": "import\nfrom\nas\nwith",
            "title": "Module Keywords"
        },
        {
            "location": "/99-Appendix/99.02-ASCII-Character-Codes/",
            "text": "ASCII Character Codes\n\n\nA listing of ASCII character codes is below. ASCII character codes  character codes can be accessed using the following code:\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nfor\n \nASCIIcode\n \nin\n \nrange\n(\n32\n,\n127\n):\n\n    \nprint\n(\nf\n'ASCII code: \n{ASCIIcode}\n    Character: {chr(ASCIIcode)}'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nASCII code: 32    Character:  \nASCII code: 33    Character: !\nASCII code: 34    Character: \"\nASCII code: 35    Character: #\nASCII code: 36    Character: $\nASCII code: 37    Character: %\nASCII code: 38    Character: &\nASCII code: 39    Character: '\nASCII code: 40    Character: (\nASCII code: 41    Character: )\nASCII code: 42    Character: *\nASCII code: 43    Character: +\nASCII code: 44    Character: ,\nASCII code: 45    Character: -\nASCII code: 46    Character: .\nASCII code: 47    Character: /\nASCII code: 48    Character: 0\nASCII code: 49    Character: 1\nASCII code: 50    Character: 2\nASCII code: 51    Character: 3\nASCII code: 52    Character: 4\nASCII code: 53    Character: 5\nASCII code: 54    Character: 6\nASCII code: 55    Character: 7\nASCII code: 56    Character: 8\nASCII code: 57    Character: 9\nASCII code: 58    Character: :\nASCII code: 59    Character: ;\nASCII code: 60    Character: <\nASCII code: 61    Character: =\nASCII code: 62    Character: >\nASCII code: 63    Character: ?\nASCII code: 64    Character: @\nASCII code: 65    Character: A\nASCII code: 66    Character: B\nASCII code: 67    Character: C\nASCII code: 68    Character: D\nASCII code: 69    Character: E\nASCII code: 70    Character: F\nASCII code: 71    Character: G\nASCII code: 72    Character: H\nASCII code: 73    Character: I\nASCII code: 74    Character: J\nASCII code: 75    Character: K\nASCII code: 76    Character: L\nASCII code: 77    Character: M\nASCII code: 78    Character: N\nASCII code: 79    Character: O\nASCII code: 80    Character: P\nASCII code: 81    Character: Q\nASCII code: 82    Character: R\nASCII code: 83    Character: S\nASCII code: 84    Character: T\nASCII code: 85    Character: U\nASCII code: 86    Character: V\nASCII code: 87    Character: W\nASCII code: 88    Character: X\nASCII code: 89    Character: Y\nASCII code: 90    Character: Z\nASCII code: 91    Character: [\nASCII code: 92    Character: \\\nASCII code: 93    Character: ]\nASCII code: 94    Character: ^\nASCII code: 95    Character: _\nASCII code: 96    Character: `\nASCII code: 97    Character: a\nASCII code: 98    Character: b\nASCII code: 99    Character: c\nASCII code: 100    Character: d\nASCII code: 101    Character: e\nASCII code: 102    Character: f\nASCII code: 103    Character: g\nASCII code: 104    Character: h\nASCII code: 105    Character: i\nASCII code: 106    Character: j\nASCII code: 107    Character: k\nASCII code: 108    Character: l\nASCII code: 109    Character: m\nASCII code: 110    Character: n\nASCII code: 111    Character: o\nASCII code: 112    Character: p\nASCII code: 113    Character: q\nASCII code: 114    Character: r\nASCII code: 115    Character: s\nASCII code: 116    Character: t\nASCII code: 117    Character: u\nASCII code: 118    Character: v\nASCII code: 119    Character: w\nASCII code: 120    Character: x\nASCII code: 121    Character: y\nASCII code: 122    Character: z\nASCII code: 123    Character: {\nASCII code: 124    Character: |\nASCII code: 125    Character: }\nASCII code: 126    Character: ~",
            "title": "ASCII Character Codes"
        },
        {
            "location": "/99-Appendix/99.02-ASCII-Character-Codes/#ascii-character-codes",
            "text": "A listing of ASCII character codes is below. ASCII character codes  character codes can be accessed using the following code:   In\u00a0[1]:  \n      for   ASCIIcode   in   range ( 32 , 127 ): \n     print ( f 'ASCII code:  {ASCIIcode}     Character: {chr(ASCIIcode)}' )           ASCII code: 32    Character:  \nASCII code: 33    Character: !\nASCII code: 34    Character: \"\nASCII code: 35    Character: #\nASCII code: 36    Character: $\nASCII code: 37    Character: %\nASCII code: 38    Character: &\nASCII code: 39    Character: '\nASCII code: 40    Character: (\nASCII code: 41    Character: )\nASCII code: 42    Character: *\nASCII code: 43    Character: +\nASCII code: 44    Character: ,\nASCII code: 45    Character: -\nASCII code: 46    Character: .\nASCII code: 47    Character: /\nASCII code: 48    Character: 0\nASCII code: 49    Character: 1\nASCII code: 50    Character: 2\nASCII code: 51    Character: 3\nASCII code: 52    Character: 4\nASCII code: 53    Character: 5\nASCII code: 54    Character: 6\nASCII code: 55    Character: 7\nASCII code: 56    Character: 8\nASCII code: 57    Character: 9\nASCII code: 58    Character: :\nASCII code: 59    Character: ;\nASCII code: 60    Character: <\nASCII code: 61    Character: =\nASCII code: 62    Character: >\nASCII code: 63    Character: ?\nASCII code: 64    Character: @\nASCII code: 65    Character: A\nASCII code: 66    Character: B\nASCII code: 67    Character: C\nASCII code: 68    Character: D\nASCII code: 69    Character: E\nASCII code: 70    Character: F\nASCII code: 71    Character: G\nASCII code: 72    Character: H\nASCII code: 73    Character: I\nASCII code: 74    Character: J\nASCII code: 75    Character: K\nASCII code: 76    Character: L\nASCII code: 77    Character: M\nASCII code: 78    Character: N\nASCII code: 79    Character: O\nASCII code: 80    Character: P\nASCII code: 81    Character: Q\nASCII code: 82    Character: R\nASCII code: 83    Character: S\nASCII code: 84    Character: T\nASCII code: 85    Character: U\nASCII code: 86    Character: V\nASCII code: 87    Character: W\nASCII code: 88    Character: X\nASCII code: 89    Character: Y\nASCII code: 90    Character: Z\nASCII code: 91    Character: [\nASCII code: 92    Character: \\\nASCII code: 93    Character: ]\nASCII code: 94    Character: ^\nASCII code: 95    Character: _\nASCII code: 96    Character: `\nASCII code: 97    Character: a\nASCII code: 98    Character: b\nASCII code: 99    Character: c\nASCII code: 100    Character: d\nASCII code: 101    Character: e\nASCII code: 102    Character: f\nASCII code: 103    Character: g\nASCII code: 104    Character: h\nASCII code: 105    Character: i\nASCII code: 106    Character: j\nASCII code: 107    Character: k\nASCII code: 108    Character: l\nASCII code: 109    Character: m\nASCII code: 110    Character: n\nASCII code: 111    Character: o\nASCII code: 112    Character: p\nASCII code: 113    Character: q\nASCII code: 114    Character: r\nASCII code: 115    Character: s\nASCII code: 116    Character: t\nASCII code: 117    Character: u\nASCII code: 118    Character: v\nASCII code: 119    Character: w\nASCII code: 120    Character: x\nASCII code: 121    Character: y\nASCII code: 122    Character: z\nASCII code: 123    Character: {\nASCII code: 124    Character: |\nASCII code: 125    Character: }\nASCII code: 126    Character: ~",
            "title": "ASCII Character Codes"
        },
        {
            "location": "/99-Appendix/99.03-Virtual-Environments/",
            "text": "Virtual Environments\n\n\nUsing \nvirtual environments\n is standard practice in Python. A virtual environment is an isolated installation of Python with associated packages. When you use virtual environments, one project can have a separate version of Python and packages. Another project can use a different virtual environment and therefore have a separate version of Python and packages. By utilizing virtual environments, two projects on the same computer can use different versions of Python and different versions of packages.\n\n\nCreate a virtual environment with the Anaconda Prompt\n\n\nTo create the new virtual environment, open the \nAnaconda Prompt\n and issue the command:\n\n\n> conda create --name env_name python=3.6\n\n\n\n\nThe \nconda create\n command builds the new virtual environment. The \n--name env_name\n flag gives the new virtual environment the name \nenv_name\n.  Including \npython=3.6\n ensures the virtual environment has a current version of Python. \n\n\nThe following output or something similar results:\n\n\nThe following NEW packages will be INSTALLED:\n\n    ca-certificates: 2018.03.07-0           \n    certifi:         2018.11.29-py36_0      \n    libedit:         3.1.20170329-h6b74fdf_2\n    libffi:          3.2.1-hd88cf55_4       \n    libgcc-ng:       8.2.0-hdf63c60_1       \n    libstdcxx-ng:    8.2.0-hdf63c60_1       \n    ncurses:         6.1-he6710b0_1         \n    openssl:         1.1.1a-h7b6447c_0      \n    pip:             18.1-py36_0            \n    python:          3.6.8-h0371630_0       \n    readline:        7.0-h7b6447c_5         \n    setuptools:      40.6.3-py36_0          \n    sqlite:          3.26.0-h7b6447c_0      \n    tk:              8.6.8-hbc83047_0       \n    wheel:           0.32.3-py36_0          \n    xz:              5.2.4-h14c3975_4       \n    zlib:            1.2.11-h7b6447c_3      \n\nProceed ([y]/n)?\n\n\n\n\nType \ny\n to confirm and create the new virtual environment. \n\n\nActivate a virtual environment\n\n\nTo use the new virtual environment \nenv_name\n, it first needs to be activated:\n\n\n> conda activate env_name\n\n\n\n\nThe virtual environment is active when you see \n(env_name) >\n in parenthesis at the start of the prompt:\n\n\n(env_name) > \n\n\n\n\nInstall packages in a virtual environment\n\n\nWhen a new virtual environment is created, no packages are installed by default. If you use the Anaconda distribution of Python, the \nbase\n environment contains about 600 packages that come with Anaconda. But a fresh new virtual environment will just have Python installed, no other packages.\n\n\nTo install a package into the virtual environment \n(env_name)\n, first, make sure the environment is active (\n(env_name)\n before the prompt). Package installation is accomplished with the \nconda install\n command followed by the package name. To install Matplotlib into the virtual environment type:\n\n\n(env_name) > conda install matplotlib\n\n\n\n\nMultiple packages can be installed with the same command. To install both NumPy and Jupyter use:\n\n\n(env_name) > conda install numpy jupyter\n\n\n\n\nDeactivate a virtual environment\n\n\nTo deactivate an active environment, use:\n\n\n(env_name) > conda deactivate\n>\n\n\n\n\nWhen the virtual environment is deactivated, the prompt looks normal \n>\n, with no environment name in parenthesis before it.\n\n\nList your virtual environments\n\n\nView a list of your virtual environments using the command \nconda info --envs\n or \nconda env list\n.\n\n\n> conda activate env_name\n(env_name) > conda info --envs\n\n# conda environments:\n#\nbase                     /home/tribilium/anaconda3\nenv_name               * /home/tribilium/anaconda3/envs/env_name\nmatplotlib               /home/tribilium/anaconda3/envs/matplotlib\n\n\n\n\nNotice the \n*\n asterisk on the line with \nenv_name\n. The virtual environment with the \n*\n is currently active. \n\n\nTo exit the virtual environment, use the command \nconda deactivate\n. \n\n\n(env_name) > conda deactive\n\n\n\n\nIf you run \nconda env list\n again, there is no \n*\n in front of \nenv_name\n. That's because the \nenv_name\n virtual environment is no longer active.\n\n\n> conda env list\n\n# conda environments:\n#\nbase                  *  /home/tribilium/anaconda3\nenv_name                 /home/tribilium/anaconda3/envs/env_name\nmatplotlib               /home/tribilium/anaconda3/envs/matplotlib\n\n\n\n\n\nRemove a virtual environment\n\n\nRemove a virtual environment with the command \nconda remove --name env_name --all\n. Exit out of the environment to want to remove before you remove it.\n\n\nCheck to see if the virtual environment you want to remove is present:\n\n\n> conda env list\n\n# conda environments:\n#\nbase                  *  /home/tribilium/anaconda3\nenv_name                 /home/tribilium/anaconda3/envs/env_name\nmatplotlib               /home/tribilium/anaconda3/envs/matplotlib\n\n\n\n\n\nRemove the virtual environment called \nenv_name\n.\n\n\n> conda remove --name env_name --all\n\nProceed ([y]/n)?\n\n\n\n\nType [y] to remove the environment. View a list of your virtual environments again. Note that \nenv_name\nis no longer in the list.\n\n\n> conda env list\n\n# conda environments:\n#\nbase                  *  /home/tribilium/anaconda3\nmatplotlib               /home/tribilium/anaconda3/envs/matplotlib",
            "title": "Virtual Environments"
        },
        {
            "location": "/99-Appendix/99.03-Virtual-Environments/#virtual-environments",
            "text": "Using  virtual environments  is standard practice in Python. A virtual environment is an isolated installation of Python with associated packages. When you use virtual environments, one project can have a separate version of Python and packages. Another project can use a different virtual environment and therefore have a separate version of Python and packages. By utilizing virtual environments, two projects on the same computer can use different versions of Python and different versions of packages.",
            "title": "Virtual Environments"
        },
        {
            "location": "/99-Appendix/99.03-Virtual-Environments/#create-a-virtual-environment-with-the-anaconda-prompt",
            "text": "To create the new virtual environment, open the  Anaconda Prompt  and issue the command:  > conda create --name env_name python=3.6  The  conda create  command builds the new virtual environment. The  --name env_name  flag gives the new virtual environment the name  env_name .  Including  python=3.6  ensures the virtual environment has a current version of Python.   The following output or something similar results:  The following NEW packages will be INSTALLED:\n\n    ca-certificates: 2018.03.07-0           \n    certifi:         2018.11.29-py36_0      \n    libedit:         3.1.20170329-h6b74fdf_2\n    libffi:          3.2.1-hd88cf55_4       \n    libgcc-ng:       8.2.0-hdf63c60_1       \n    libstdcxx-ng:    8.2.0-hdf63c60_1       \n    ncurses:         6.1-he6710b0_1         \n    openssl:         1.1.1a-h7b6447c_0      \n    pip:             18.1-py36_0            \n    python:          3.6.8-h0371630_0       \n    readline:        7.0-h7b6447c_5         \n    setuptools:      40.6.3-py36_0          \n    sqlite:          3.26.0-h7b6447c_0      \n    tk:              8.6.8-hbc83047_0       \n    wheel:           0.32.3-py36_0          \n    xz:              5.2.4-h14c3975_4       \n    zlib:            1.2.11-h7b6447c_3      \n\nProceed ([y]/n)?  Type  y  to confirm and create the new virtual environment.",
            "title": "Create a virtual environment with the Anaconda Prompt"
        },
        {
            "location": "/99-Appendix/99.03-Virtual-Environments/#activate-a-virtual-environment",
            "text": "To use the new virtual environment  env_name , it first needs to be activated:  > conda activate env_name  The virtual environment is active when you see  (env_name) >  in parenthesis at the start of the prompt:  (env_name) >",
            "title": "Activate a virtual environment"
        },
        {
            "location": "/99-Appendix/99.03-Virtual-Environments/#install-packages-in-a-virtual-environment",
            "text": "When a new virtual environment is created, no packages are installed by default. If you use the Anaconda distribution of Python, the  base  environment contains about 600 packages that come with Anaconda. But a fresh new virtual environment will just have Python installed, no other packages.  To install a package into the virtual environment  (env_name) , first, make sure the environment is active ( (env_name)  before the prompt). Package installation is accomplished with the  conda install  command followed by the package name. To install Matplotlib into the virtual environment type:  (env_name) > conda install matplotlib  Multiple packages can be installed with the same command. To install both NumPy and Jupyter use:  (env_name) > conda install numpy jupyter",
            "title": "Install packages in a virtual environment"
        },
        {
            "location": "/99-Appendix/99.03-Virtual-Environments/#deactivate-a-virtual-environment",
            "text": "To deactivate an active environment, use:  (env_name) > conda deactivate\n>  When the virtual environment is deactivated, the prompt looks normal  > , with no environment name in parenthesis before it.",
            "title": "Deactivate a virtual environment"
        },
        {
            "location": "/99-Appendix/99.03-Virtual-Environments/#list-your-virtual-environments",
            "text": "View a list of your virtual environments using the command  conda info --envs  or  conda env list .  > conda activate env_name\n(env_name) > conda info --envs\n\n# conda environments:\n#\nbase                     /home/tribilium/anaconda3\nenv_name               * /home/tribilium/anaconda3/envs/env_name\nmatplotlib               /home/tribilium/anaconda3/envs/matplotlib  Notice the  *  asterisk on the line with  env_name . The virtual environment with the  *  is currently active.   To exit the virtual environment, use the command  conda deactivate .   (env_name) > conda deactive  If you run  conda env list  again, there is no  *  in front of  env_name . That's because the  env_name  virtual environment is no longer active.  > conda env list\n\n# conda environments:\n#\nbase                  *  /home/tribilium/anaconda3\nenv_name                 /home/tribilium/anaconda3/envs/env_name\nmatplotlib               /home/tribilium/anaconda3/envs/matplotlib",
            "title": "List your virtual environments"
        },
        {
            "location": "/99-Appendix/99.03-Virtual-Environments/#remove-a-virtual-environment",
            "text": "Remove a virtual environment with the command  conda remove --name env_name --all . Exit out of the environment to want to remove before you remove it.  Check to see if the virtual environment you want to remove is present:  > conda env list\n\n# conda environments:\n#\nbase                  *  /home/tribilium/anaconda3\nenv_name                 /home/tribilium/anaconda3/envs/env_name\nmatplotlib               /home/tribilium/anaconda3/envs/matplotlib  Remove the virtual environment called  env_name .  > conda remove --name env_name --all\n\nProceed ([y]/n)?  Type [y] to remove the environment. View a list of your virtual environments again. Note that  env_name is no longer in the list.  > conda env list\n\n# conda environments:\n#\nbase                  *  /home/tribilium/anaconda3\nmatplotlib               /home/tribilium/anaconda3/envs/matplotlib",
            "title": "Remove a virtual environment"
        },
        {
            "location": "/99-Appendix/99.04-NumPy-Math-Functions/",
            "text": "NumPy Math Functions\n\n\nThe code below prints out all NumPy functions and methods:\n\n\nimport numpy as np\nfor func in dir(np):\n    print(func)\n\n\n\n\nNumPy Array Creation and Manipulation Functions and Methods\n\n\nnp.array\nnp.arange\nnp.ndarray\nnp.zeros\nnp.ones\nnp.matrix\nnp.traspose\nnp.size\nnp.shape\nnp.reshape\nnp.meshgrid\nnp.dot\nnp.cross\nnp.asmatrix\nnp.asarray\n\n\n\n\nNumPy Exponential and Logarithmic Functions and Methods\n\n\nnp.log\nnp.log10\nnp.log1p\nnp.log2\nnp.logaddexp\nnp.logaddexp2\nnp.exp\nnp.exp2\nnp.sqrt\nnp.power\nnp.e\n\n\n\n\nNumPy Trigonometric Functions and Methods\n\n\nnp.pi\nnp.sin\nnp.cos\nnp.tan\nnp.arcsin\nnp.arccos\nnp.arctan\nnp.arcsinh\nnp.arccosh\nnp.arctanh\nnp.arctan2\nnp.radians\nnp.rad2deg\nnp.deg2rad\nnp.radians\nnp.sinc\nnp.sinh\nnp.tanh\nnp.angle\n\n\n\n\nNumPy Statistics Functions and Methods\n\n\nnp.mean\nnp.average\nnp.median\nnp.std\nnp.var\nnp.correlate\nnp.histogram\nnp.amin\nnp.amax\nnp.ptp\nnp.percentile",
            "title": "NumPy Math Functions"
        },
        {
            "location": "/99-Appendix/99.04-NumPy-Math-Functions/#numpy-math-functions",
            "text": "The code below prints out all NumPy functions and methods:  import numpy as np\nfor func in dir(np):\n    print(func)",
            "title": "NumPy Math Functions"
        },
        {
            "location": "/99-Appendix/99.04-NumPy-Math-Functions/#numpy-array-creation-and-manipulation-functions-and-methods",
            "text": "np.array\nnp.arange\nnp.ndarray\nnp.zeros\nnp.ones\nnp.matrix\nnp.traspose\nnp.size\nnp.shape\nnp.reshape\nnp.meshgrid\nnp.dot\nnp.cross\nnp.asmatrix\nnp.asarray",
            "title": "NumPy Array Creation and Manipulation Functions and Methods"
        },
        {
            "location": "/99-Appendix/99.04-NumPy-Math-Functions/#numpy-exponential-and-logarithmic-functions-and-methods",
            "text": "np.log\nnp.log10\nnp.log1p\nnp.log2\nnp.logaddexp\nnp.logaddexp2\nnp.exp\nnp.exp2\nnp.sqrt\nnp.power\nnp.e",
            "title": "NumPy Exponential and Logarithmic Functions and Methods"
        },
        {
            "location": "/99-Appendix/99.04-NumPy-Math-Functions/#numpy-trigonometric-functions-and-methods",
            "text": "np.pi\nnp.sin\nnp.cos\nnp.tan\nnp.arcsin\nnp.arccos\nnp.arctan\nnp.arcsinh\nnp.arccosh\nnp.arctanh\nnp.arctan2\nnp.radians\nnp.rad2deg\nnp.deg2rad\nnp.radians\nnp.sinc\nnp.sinh\nnp.tanh\nnp.angle",
            "title": "NumPy Trigonometric Functions and Methods"
        },
        {
            "location": "/99-Appendix/99.04-NumPy-Math-Functions/#numpy-statistics-functions-and-methods",
            "text": "np.mean\nnp.average\nnp.median\nnp.std\nnp.var\nnp.correlate\nnp.histogram\nnp.amin\nnp.amax\nnp.ptp\nnp.percentile",
            "title": "NumPy Statistics Functions and Methods"
        },
        {
            "location": "/99-Appendix/99.05-Git-and-GitHub/",
            "text": "Git and GitHub\n\n\nGit\n is one of the standard \nversion-control\n systems used by developers to save code and work on code collaboratively as a team. \nGit\n is a program run on the command line or \nAnaconda Prompt\n. If you use Windows, the \ngitbash\n program can be downloaded at \ngit-scm.com/downloads\n. \nGit\n was created by Linus Torvalds, who also designed the Linux operating system.\n\nGitHub.com\n (now owned by Microsoft) is a website and service used by programmers and open source projects to share code and allow contributors to propose changes to existing code.\nBoth \ngit\n and \nGitHub.com\n are useful for problem solvers working in teams.\nBefore using \ngit\n and GitHub.com, it is helpful to understand a couple of terms:\n\n\n\n\ngit\n - a command line program used to track file changes and collaborate on code with others.\n\n\nrepo\n - short name for \"repository\". A repo is a directory and its contents.\n\n\nlocal repo\n -  a directory and its contents on your computer that \ngit\n knows about.\n\n\n\n\nremote repo\n - a directory and its contents stored in the cloud that \ngit\n knows about.\nUseful \ngit\n commands are summarized below:\n\n\n\n\n\n\ngit clone https://github.com/user/repo.git\n copy a remote repo from GitHub.com into a local directory\n\n\n\n\n\n\ngit init\n create a new local repo in the current folder\n\n\n\n\n\n\ngit remote add origin https://github.com/user/repo.git\n link a local repo to a remote repo on GitHub.com\n\n\n\n\n\n\ngit add .\n add all files and changes to the local repo\n\n\n\n\n\n\ngit commit -m \"commit message\"\n commit the changes in the local repo with the message \n\"commit message\"\n\n\n\n\n\n\ngit push origin master\n push local changes up to the remote repo\n\n\n\n\n\n\ngit pull origin master\n pull down the version in the remote repo into the local repo\n\n\n\n\n\n\nCloning a repo\n\n\nOne common operation to complete with \ngit\n is to clone a repo from GitHub.com and save it locally. This means you copy all the files stored in the remote repo on GitHub.com onto your local computer. Cloning a repo from Github.com is accomplished with:\n\n\n$ git clone https://github.com/user/repo.git\n\n\n\n\nThis command copies the repo named \nrepo\n from the user named \nuser\n to a local computer. To clone the repo for MicroPython, use:\n\n\n$ git clone https://github.com/micropython/micropython.git\n\n\n\n\nCreating and synching a remote repo on GitHub.com with a local repo\n\n\nAnother common task to complete with \ngit\n is to synch a remote repo on GitHub.com with a local repo on your local computer. This is useful when you want to keep the files in a particular project synched across multiple computers. Synched remote and local repos are also useful for a group of problem solvers working on the same project. Each team member has access to the same remote repo on GitHub.com and each team member has the same local repo on their computer.\n\n\nCreate a remote repo on GitHub.com\n\n\nFirst, go to \nGitHub.com/join\n and create a new account. Log in and create a new repo. It is a good idea to include a license and a \n.gitignore\n file. For a Python project, the \n.gitignore\n file for Python is a good start. Two common licenses for open source projects (projects you are willing to share with others) are the \nGNU General Public License v3.0\n and the \nMIT License\n.\n\n\nMake a new local repo and link the local repo to the remote repo on GitHub.com\n\n\nSecond, create a local directory and \ncd\n into it. Initialize a git repo locally in that directory. Then synch the local folder with the remote repo on GitHub.com.\n\n\n$ mkdir newproject\n$ cd newproject\n$ git init\n$ git remote add origin https://github.com/user/repo.git\n$ git pull origin master\n\n\n\n\nAdd, commit and push changes up to Github.com\n\n\nThird, work on the project locally. For example, you could edit one of the files in the directory \nnewproject\n or create a new file in the directory \nnewproject\n.\n\n\nFinally, save your work and commit the changes you made with \ngit\n. Push those changes up to the remote repo on GitHub.com\n\n\n$ git add .\n$ git commit -m \"commit message\"\n$ git push origin master\n\n\n\n\nPull the most recent version from GitHub.com before each work session\n\n\nIf using \ngit\n and GitHub.com, remember to pull the most recent version of the repo down from GitHub.com before you make any changes locally. If changes are made locally before the version of the repo on GitHub.com is synched, the local repo and remote repo will be out of synch.\n\n\n$ git pull origin master\n\n\n\n\nAfter local changes are made, save the changes and push to GitHub.com\n\n\n$ git add .\n$ git commit -m \"commit message\"\n$ git push orign master",
            "title": "Git and GitHub"
        },
        {
            "location": "/99-Appendix/99.05-Git-and-GitHub/#git-and-github",
            "text": "Git  is one of the standard  version-control  systems used by developers to save code and work on code collaboratively as a team.  Git  is a program run on the command line or  Anaconda Prompt . If you use Windows, the  gitbash  program can be downloaded at  git-scm.com/downloads .  Git  was created by Linus Torvalds, who also designed the Linux operating system. GitHub.com  (now owned by Microsoft) is a website and service used by programmers and open source projects to share code and allow contributors to propose changes to existing code.\nBoth  git  and  GitHub.com  are useful for problem solvers working in teams.\nBefore using  git  and GitHub.com, it is helpful to understand a couple of terms:   git  - a command line program used to track file changes and collaborate on code with others.  repo  - short name for \"repository\". A repo is a directory and its contents.  local repo  -  a directory and its contents on your computer that  git  knows about.   remote repo  - a directory and its contents stored in the cloud that  git  knows about.\nUseful  git  commands are summarized below:    git clone https://github.com/user/repo.git  copy a remote repo from GitHub.com into a local directory    git init  create a new local repo in the current folder    git remote add origin https://github.com/user/repo.git  link a local repo to a remote repo on GitHub.com    git add .  add all files and changes to the local repo    git commit -m \"commit message\"  commit the changes in the local repo with the message  \"commit message\"    git push origin master  push local changes up to the remote repo    git pull origin master  pull down the version in the remote repo into the local repo",
            "title": "Git and GitHub"
        },
        {
            "location": "/99-Appendix/99.05-Git-and-GitHub/#cloning-a-repo",
            "text": "One common operation to complete with  git  is to clone a repo from GitHub.com and save it locally. This means you copy all the files stored in the remote repo on GitHub.com onto your local computer. Cloning a repo from Github.com is accomplished with:  $ git clone https://github.com/user/repo.git  This command copies the repo named  repo  from the user named  user  to a local computer. To clone the repo for MicroPython, use:  $ git clone https://github.com/micropython/micropython.git",
            "title": "Cloning a repo"
        },
        {
            "location": "/99-Appendix/99.05-Git-and-GitHub/#creating-and-synching-a-remote-repo-on-githubcom-with-a-local-repo",
            "text": "Another common task to complete with  git  is to synch a remote repo on GitHub.com with a local repo on your local computer. This is useful when you want to keep the files in a particular project synched across multiple computers. Synched remote and local repos are also useful for a group of problem solvers working on the same project. Each team member has access to the same remote repo on GitHub.com and each team member has the same local repo on their computer.",
            "title": "Creating and synching a remote repo on GitHub.com with a local repo"
        },
        {
            "location": "/99-Appendix/99.05-Git-and-GitHub/#create-a-remote-repo-on-githubcom",
            "text": "First, go to  GitHub.com/join  and create a new account. Log in and create a new repo. It is a good idea to include a license and a  .gitignore  file. For a Python project, the  .gitignore  file for Python is a good start. Two common licenses for open source projects (projects you are willing to share with others) are the  GNU General Public License v3.0  and the  MIT License .",
            "title": "Create a remote repo on GitHub.com"
        },
        {
            "location": "/99-Appendix/99.05-Git-and-GitHub/#make-a-new-local-repo-and-link-the-local-repo-to-the-remote-repo-on-githubcom",
            "text": "Second, create a local directory and  cd  into it. Initialize a git repo locally in that directory. Then synch the local folder with the remote repo on GitHub.com.  $ mkdir newproject\n$ cd newproject\n$ git init\n$ git remote add origin https://github.com/user/repo.git\n$ git pull origin master",
            "title": "Make a new local repo and link the local repo to the remote repo on GitHub.com"
        },
        {
            "location": "/99-Appendix/99.05-Git-and-GitHub/#add-commit-and-push-changes-up-to-githubcom",
            "text": "Third, work on the project locally. For example, you could edit one of the files in the directory  newproject  or create a new file in the directory  newproject .  Finally, save your work and commit the changes you made with  git . Push those changes up to the remote repo on GitHub.com  $ git add .\n$ git commit -m \"commit message\"\n$ git push origin master",
            "title": "Add, commit and push changes up to Github.com"
        },
        {
            "location": "/99-Appendix/99.05-Git-and-GitHub/#pull-the-most-recent-version-from-githubcom-before-each-work-session",
            "text": "If using  git  and GitHub.com, remember to pull the most recent version of the repo down from GitHub.com before you make any changes locally. If changes are made locally before the version of the repo on GitHub.com is synched, the local repo and remote repo will be out of synch.  $ git pull origin master  After local changes are made, save the changes and push to GitHub.com  $ git add .\n$ git commit -m \"commit message\"\n$ git push orign master",
            "title": "Pull the most recent version from GitHub.com before each work session"
        },
        {
            "location": "/99-Appendix/99.06-LaTeX-Math/",
            "text": "LaTeX Math\n\n\nLaTeX math can be included in Jupyter notebook markdown cells. LaTeX math can also be included in parts of Matplotlib plots like axis labels and text fields.\n\n\nInline LaTeX math commands need to be enclosed by the dollar signs.\n\n\nthe angle is $2\\pi$ radians\n\n\n\n\nThe markup above is rendered as:\n\n\nangle is \n2\\pi\n2\\pi\n radians\n\n\nA table of useful LaTeX commands and the associated output is below. Note curly braces \n{  }\n are used to surround LaTeX math elements and a backslash \n\\\n is used before LaTeX commands.\n\n\n\n\n\n\n\n\nLaTex Command\n\n\nOutput\n\n\n\n\n\n\n\n\n\n\n2^{3}\n\n\n2^{3}\n2^{3}\n\n\n\n\n\n\nH_{2}\n\n\nH_{2}\nH_{2}\n\n\n\n\n\n\n\\frac{3}{4}\n\n\n\\frac{3}{4}\n\\frac{3}{4}\n\n\n\n\n\n\n\\pi\n\n\n\\pi\n\\pi\n\n\n\n\n\n\n\\Delta\n\n\n\\Delta\n\\Delta\n\n\n\n\n\n\n\\epsilon\n\n\n\\epsilon\n\\epsilon\n\n\n\n\n\n\n\\sigma\n\n\n\\sigma\n\\sigma\n\n\n\n\n\n\n2 \\times 3\n\n\n2 \\times 3\n2 \\times 3\n\n\n\n\n\n\n\\int_{a}^{b} x^2 dx\n\n\n\\int_{a}^{b} x^2 dx\n\\int_{a}^{b} x^2 dx\n\n\n\n\n\n\n\\sum\n\n\n\\sum\n\\sum\n\n\n\n\n\n\n\\vec{F}\n\n\n\\vec{F}\n\\vec{F}\n\n\n\n\n\n\n\\hat{k}\n\n\n\\hat{k}\n\\hat{k}\n\n\n\n\n\n\n\\bar{x}\n\n\n\\bar{x}\n\\bar{x}\n\n\n\n\n\n\n15 \\%\n\n\n15 \\%\n15 \\%",
            "title": "LaTeX Math"
        },
        {
            "location": "/99-Appendix/99.06-LaTeX-Math/#latex-math",
            "text": "LaTeX math can be included in Jupyter notebook markdown cells. LaTeX math can also be included in parts of Matplotlib plots like axis labels and text fields.  Inline LaTeX math commands need to be enclosed by the dollar signs.  the angle is $2\\pi$ radians  The markup above is rendered as:  angle is  2\\pi 2\\pi  radians  A table of useful LaTeX commands and the associated output is below. Note curly braces  {  }  are used to surround LaTeX math elements and a backslash  \\  is used before LaTeX commands.     LaTex Command  Output      2^{3}  2^{3} 2^{3}    H_{2}  H_{2} H_{2}    \\frac{3}{4}  \\frac{3}{4} \\frac{3}{4}    \\pi  \\pi \\pi    \\Delta  \\Delta \\Delta    \\epsilon  \\epsilon \\epsilon    \\sigma  \\sigma \\sigma    2 \\times 3  2 \\times 3 2 \\times 3    \\int_{a}^{b} x^2 dx  \\int_{a}^{b} x^2 dx \\int_{a}^{b} x^2 dx    \\sum  \\sum \\sum    \\vec{F}  \\vec{F} \\vec{F}    \\hat{k}  \\hat{k} \\hat{k}    \\bar{x}  \\bar{x} \\bar{x}    15 \\%  15 \\% 15 \\%",
            "title": "LaTeX Math"
        },
        {
            "location": "/99-Appendix/99.07-Problem-Solving-with-Python-Book-Construction/",
            "text": "Problem Solving with Python Book Construction\n\n\nJupyter Notebooks\n\n\nThis book was constructed using Jupyter notebooks. The GitHub.com repo for the book can be found at:\n\n\n\n\nhttps://github.com/ProfessorKazarinoff/Problem-Solving-with-Python\n\nThe directory structure of the GitHub repo contains all the Jupyter notebooks used the write the book. The repo also contains a set of custom conversion scripts and templates which convert the Jupyuter notebooks into \n.html\n and \n.tex\n files.\n\n\n\n\nProblem-Solving-with-Python/\n|-- conversion_tools/\n|-- notebooks/\n|-- LICENSE\n|-- notebooks/\n|-- pdf/\n|-- README.md\n|-- website/\n\n\n\n\nThe \nnotebooks\n directory contains a directory for each chapter of the book:\n\n\nnotebooks/\n|-- 00-Preface/\n|-- 01-Orientation/\n|-- 02-The-Python-REPL/\n|-- 03-Data-Types-and-Variables/\n|-- 04-Jupyter-Notebooks/\n|-- 05-Functions-and-Modules/\n|-- 06-Plotting-with-Matplotlib/\n|-- 07-If-Else-Try-Except/\n|-- 08-Loops/\n|-- 09-Matrices-and-Arrays/\n|-- 10-Symbolic-Math/\n|-- 11-Python-and-External-Hardware/\n|-- 12-MicroPython/\n|-- 99-Appendix/\n|-- figures/\n`-- TOC.ipynb\n\n\n\n\nThere is a Jupyter notebook for each section of the book within each chapter directory. Each chapter directory contains an \nimages\n directory for any images used in the markdown cells of the notebooks.\n\n\n01-Orientation/\n|-- 01.00-Welcome.ipynb\n|-- 01.01-Why-Python.ipynb\n|-- 01.02-The-Anaconda-Distribution-of-Python.ipynb\n|-- 01.03-Installing-Anaconda-on-Windows.ipynb\n|-- 01.04-Installing-Anaconda-on-MacOS.ipynb\n|-- 01.05-Installing-Anaconda-on-Linux.ipynb\n|-- 01.06-Installing-Python-from-Python-dot-org.ipynb\n|-- 01.07-Summary.ipynb\n|-- 01.08-Review-Questions.ipynb\n`-- images/\n\n\n\n\nWebsite\n\n\nThe website for this book was constructed using \nmkdocs\n and the \nMaterial for MkDocs\n theme. Jupyter noteboks were exported to \n.html\n files with markdown cells unformatted using a custom script and \nnbconvert\n.\n\n\nHardcopy\n\n\nThe hard copy of the book was constructed using LaTeX, \nnbconvert\n and a set of custom scripts and templates. One conversion script combined all of the notebooks into one BIG notebook.  The BIG notebook was then converted into \nLaTeX\n using \nnbconvert\n and a custom template. Outside of the Python ecosystem, a separate installation of TeXworks compiled the LaTeX \n.tex\n file to a \n.pdf\n document.",
            "title": "Problem Solving with Python Book Construction"
        },
        {
            "location": "/99-Appendix/99.07-Problem-Solving-with-Python-Book-Construction/#problem-solving-with-python-book-construction",
            "text": "",
            "title": "Problem Solving with Python Book Construction"
        },
        {
            "location": "/99-Appendix/99.07-Problem-Solving-with-Python-Book-Construction/#jupyter-notebooks",
            "text": "This book was constructed using Jupyter notebooks. The GitHub.com repo for the book can be found at:   https://github.com/ProfessorKazarinoff/Problem-Solving-with-Python \nThe directory structure of the GitHub repo contains all the Jupyter notebooks used the write the book. The repo also contains a set of custom conversion scripts and templates which convert the Jupyuter notebooks into  .html  and  .tex  files.   Problem-Solving-with-Python/\n|-- conversion_tools/\n|-- notebooks/\n|-- LICENSE\n|-- notebooks/\n|-- pdf/\n|-- README.md\n|-- website/  The  notebooks  directory contains a directory for each chapter of the book:  notebooks/\n|-- 00-Preface/\n|-- 01-Orientation/\n|-- 02-The-Python-REPL/\n|-- 03-Data-Types-and-Variables/\n|-- 04-Jupyter-Notebooks/\n|-- 05-Functions-and-Modules/\n|-- 06-Plotting-with-Matplotlib/\n|-- 07-If-Else-Try-Except/\n|-- 08-Loops/\n|-- 09-Matrices-and-Arrays/\n|-- 10-Symbolic-Math/\n|-- 11-Python-and-External-Hardware/\n|-- 12-MicroPython/\n|-- 99-Appendix/\n|-- figures/\n`-- TOC.ipynb  There is a Jupyter notebook for each section of the book within each chapter directory. Each chapter directory contains an  images  directory for any images used in the markdown cells of the notebooks.  01-Orientation/\n|-- 01.00-Welcome.ipynb\n|-- 01.01-Why-Python.ipynb\n|-- 01.02-The-Anaconda-Distribution-of-Python.ipynb\n|-- 01.03-Installing-Anaconda-on-Windows.ipynb\n|-- 01.04-Installing-Anaconda-on-MacOS.ipynb\n|-- 01.05-Installing-Anaconda-on-Linux.ipynb\n|-- 01.06-Installing-Python-from-Python-dot-org.ipynb\n|-- 01.07-Summary.ipynb\n|-- 01.08-Review-Questions.ipynb\n`-- images/",
            "title": "Jupyter Notebooks"
        },
        {
            "location": "/99-Appendix/99.07-Problem-Solving-with-Python-Book-Construction/#website",
            "text": "The website for this book was constructed using  mkdocs  and the  Material for MkDocs  theme. Jupyter noteboks were exported to  .html  files with markdown cells unformatted using a custom script and  nbconvert .",
            "title": "Website"
        },
        {
            "location": "/99-Appendix/99.07-Problem-Solving-with-Python-Book-Construction/#hardcopy",
            "text": "The hard copy of the book was constructed using LaTeX,  nbconvert  and a set of custom scripts and templates. One conversion script combined all of the notebooks into one BIG notebook.  The BIG notebook was then converted into  LaTeX  using  nbconvert  and a custom template. Outside of the Python ecosystem, a separate installation of TeXworks compiled the LaTeX  .tex  file to a  .pdf  document.",
            "title": "Hardcopy"
        },
        {
            "location": "/99-Appendix/99.08-Contributions/",
            "text": "Contributions\n\n\nAny corrections, typos or suggestions to improve the text can be emailed to:\n\n\n\n\nerrata@problemsolvingwithpython.com\n\n\n\n\nPlease include the chapter number and section number in your email. Include in your email if you would like to remain anonymous or have your name recognized in the contributor list. Thank-you in advance for improving the text for others.\n\n\nContributor List\n\n\n\n\nLevi, Blessing, and Ngan helped improve some review questions",
            "title": "Contributions"
        },
        {
            "location": "/99-Appendix/99.08-Contributions/#contributions",
            "text": "Any corrections, typos or suggestions to improve the text can be emailed to:   errata@problemsolvingwithpython.com   Please include the chapter number and section number in your email. Include in your email if you would like to remain anonymous or have your name recognized in the contributor list. Thank-you in advance for improving the text for others.",
            "title": "Contributions"
        },
        {
            "location": "/99-Appendix/99.08-Contributions/#contributor-list",
            "text": "Levi, Blessing, and Ngan helped improve some review questions",
            "title": "Contributor List"
        },
        {
            "location": "/99-Appendix/99.09-Cover-Artwork/",
            "text": "Cover Artwork\n\n\nMike Schultz is a printmaker and illustrator who has taught art to Burmese migrant youth on the Thailand-Burma border. He currently lives and works in Portland, Oregon with his cat, Siam.\n\n\nInstagram: \n@mike_schultz_studio\n\n\nWebsite: \nmikeschultzstudio.com",
            "title": "Cover Artwork"
        },
        {
            "location": "/99-Appendix/99.09-Cover-Artwork/#cover-artwork",
            "text": "Mike Schultz is a printmaker and illustrator who has taught art to Burmese migrant youth on the Thailand-Burma border. He currently lives and works in Portland, Oregon with his cat, Siam.  Instagram:  @mike_schultz_studio  Website:  mikeschultzstudio.com",
            "title": "Cover Artwork"
        },
        {
            "location": "/99-Appendix/99.10-About-the-Author/",
            "text": "About the Author\n\n\nPeter D. Kazarinoff, PhD is a full-time faculty member in Engineering and Engineering Technology at Portland Community College in Portland, Oregon. Peter earned a PhD in Materials Science and Engineering from the University of Washington and a BA from Cornell University. He teaches courses in Engineering Programming, Materials Science, Manufacturing and others at Portland Community College.\n\n\nHe blogs at: \npythonforundergradengineers.com\n\n\nPeter lives in beautiful Portland, Oregon with his wife and two kids.",
            "title": "About the Author"
        },
        {
            "location": "/99-Appendix/99.10-About-the-Author/#about-the-author",
            "text": "Peter D. Kazarinoff, PhD is a full-time faculty member in Engineering and Engineering Technology at Portland Community College in Portland, Oregon. Peter earned a PhD in Materials Science and Engineering from the University of Washington and a BA from Cornell University. He teaches courses in Engineering Programming, Materials Science, Manufacturing and others at Portland Community College.  He blogs at:  pythonforundergradengineers.com  Peter lives in beautiful Portland, Oregon with his wife and two kids.",
            "title": "About the Author"
        }
    ]
}